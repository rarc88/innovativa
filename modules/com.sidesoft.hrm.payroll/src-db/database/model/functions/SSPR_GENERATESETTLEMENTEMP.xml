<?xml version="1.0"?>
  <database name="FUNCTION SSPR_GENERATESETTLEMENTEMP">
    <function name="SSPR_GENERATESETTLEMENTEMP" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[TYPE RECORD IS REF CURSOR;
  Cur_Parameter RECORD;

  v_Client_ID VARCHAR2(32);
  v_Org_ID VARCHAR2(32);
  v_User_ID VARCHAR2(32) ;
  v_Record_ID VARCHAR2(32) ;
  v_ResultStr VARCHAR2(2000) := '';
  v_dateout DATE;
  v_bpartner_id VARCHAR2(32);
  v_n_insertions NUMBER;
  v_Message VARCHAR2(2000):='';
  V_VACATIONS_DAYS NUMBER;
  V_TOTAL NUMBER;
  V_SUELDO NUMBER;
  V_CONCEPT_ID VARCHAR2(32);
  V_PERIOD_ID VARCHAR2(32);
  V_AMOUNT NUMBER;
  
BEGIN
 --  Update AD_PInstance
  DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || PInstance_ID) ;
  v_ResultStr := 'PInstanceNotFound';
  AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;

  BEGIN --BODY

    -- Get Parameters
    v_ResultStr := 'ReadingParameters';
    v_n_insertions := 0;    
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        i.AD_Client_ID,
        i.AD_Org_ID 
                          
      FROM AD_PInstance i      
      WHERE i.AD_PInstance_ID = PInstance_ID      
      )
    LOOP
    
      v_Record_ID := Cur_Parameter.Record_ID;      
      v_Client_ID := Cur_Parameter.AD_Client_ID;
      v_Org_ID := Cur_Parameter.AD_Org_ID;
      v_User_ID := Cur_Parameter.AD_User_ID;     
      
    END LOOP; -- End Get Parameter

	--OBTENGO EL ID DEL EMPLEADO Y FECHA DE SALIDA PARA VALIDAR LA VACACIONES 
	SELECT dateout, c_bpartner_id,AD_Client_ID,AD_Org_ID,CREATEDBY
	INTO v_dateout, v_bpartner_id,v_Client_ID,v_Org_ID,v_User_ID
	FROM sspr_employeesettlement
	WHERE sspr_employeesettlement_id = v_Record_ID;

	--OBTENGO DIAS PENDIENTES DE VACACIONES DEL EMPLEADO
	SELECT COALESCE(TO_NUMBER(SUM(nodayspending)),0),SSPR_CONCEPT_ID INTO V_VACATIONS_DAYS,V_CONCEPT_ID FROM sspr_vacations 
	WHERE c_bpartner_id = v_bpartner_id AND END_DATE <= v_dateout;

	--OBTENGO EL PERIODO 
	SELECT C_PERIOD_ID INTO V_PERIOD_ID FROM C_PERIOD WHERE v_dateout BETWEEN STARTDATE AND ENDDATE;

	--OBTENGO EL VALOR DEL SUELDO DEL EMPLEADO 
	SELECT AMOUNT INTO V_AMOUNT FROM SSPR_Concept_Amount WHERE C_BPARTNER_ID = v_bpartner_id AND SSPR_CONCEPT_ID = V_CONCEPT_ID AND C_PERIOD_ID = V_PERIOD_ID;

	
	--CALCULO EL VALOR A LIQUIDAR 
	V_TOTAL:=TRUNC((V_VACATIONS_DAYS/2),0);
	V_SUELDO :=V_TOTAL*COALESCE(TO_NUMBER(V_AMOUNT),0);
	
	--INSERTO LINEAS DE LA LIQUIDACION
	INSERT INTO sspr_employeesettlementline(
            sspr_employeesettlementline_id, ad_client_id, ad_org_id, isactive, 
            created, createdby, updated, updatedby, sspr_concept_id, amount, 
            description, sspr_employeesettlement_id)
        VALUES (GET_UUID(), v_Client_ID,v_Org_ID,'Y', 
            now(), v_User_ID, now(), v_User_ID, V_CONCEPT_ID, V_SUELDO, 
            '', v_Record_ID);


    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, v_Message) ;			 	 	  
  				
RETURN;
END; --BODY
  EXCEPTION
  WHEN OTHERS THEN
    v_ResultStr:= '@ERROR=' || SQLERRM;
    DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
    RETURN;
END SSPR_GENERATESETTLEMENTEMP
]]></body>
    </function>
  </database>
