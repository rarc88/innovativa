<?xml version="1.0"?>
  <database name="FUNCTION SSWH_GENERATE_CHECK">
    <function name="SSWH_GENERATE_CHECK" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  v_Client_ID VARCHAR(32); 
  v_Org_ID    VARCHAR(32); 
  v_resultado VARCHAR(2000) := '';
  TYPE RECORD IS REF CURSOR;
   Cur_Parameter RECORD;
  -- Parameter Variables
    v_M_Locator_ID VARCHAR2(32);
    --
    v_DocStatus VARCHAR2(60) ;
    v_InOut_ID VARCHAR2(32);
    FINISH_PROCESS BOOLEAN:=false;
    
  n_nrofrom	 NUMBER(10,0);
  n_nroto NUMBER(10,0);
   

  ind_GenerarCheck NUMBER:=0;
  v_NextNo VARCHAR2(32);  
  v_nrocheck sswh_checkbook.nrocheck%TYPE;
  v_nrofrom sswh_checkbook.nrofrom%TYPE;
  v_nroto sswh_checkbook.nroto%TYPE;
  v_typecheck sswh_checkbook.typecheck%TYPE;

  --var   
    
  v_sub varchar2(10);
  v_aux1 varchar2(10):='';
  n_linecheck NUMBER(10,0);
  v_lengthline INTEGER;
  v_lengthCaracter NUMBER:=0;

  
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
       i.ad_client_id, 
          i.ad_org_id,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_Client_ID := Cur_Parameter.ad_client_id;
        v_Org_ID    := Cur_Parameter.ad_org_id;
    END LOOP; -- Get Parameter
    
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
    -- Read Information from Record
    v_ResultStr:='Reading Record';
    SELECT DocStatus
    INTO v_DocStatus
    FROM C_Invoice
    WHERE C_Invoice_ID=v_Record_ID;
    
  --  insert into temp values(v_Record_ID,v_Client_ID);

  
  select typecheck,nrocheck,nrofrom,nroto  
  into v_typecheck,v_nrocheck,v_nrofrom,v_nroto
  from sswh_checkbook
  where sswh_checkbook_id=v_record_ID;
  

  n_nrofrom:=to_number(v_nrofrom);--001
  n_nroto:=to_number(v_nroto)+1;--004
  
  if length(v_nrofrom)>length(v_nroto) then
  		v_lengthline := length(v_nrofrom);
  else
    	v_lengthline := length(v_nroto);
  end if;
  
  
 FOR ind_GenerarCheck in n_nrofrom..n_nroto -1  LOOP  
 
 
	 n_linecheck:=n_nrofrom; 
     
  	 Ad_Sequence_Next('sswh_checkbookline', v_record_ID, v_NextNo);
 			

             v_sub:=to_char(n_nrofrom);
             v_aux1:=v_sub;


        insert into sswh_checkbookline
 		(sswh_checkbookline_id,ad_client_id,ad_org_id,created,createdby,updated,updatedby,
  		isactive,linecheck,doc_line_status,generate_status,c_bankstatementline_id,sswh_checkbook_id)
  
  		select v_NextNo,v_Client_ID,v_Org_ID,now(),sswh_checkbook.createdby,now(),sswh_checkbook.updatedby,
  		'Y',v_aux1,'P','N',NULL,v_record_ID  
  		from sswh_checkbook where sswh_checkbook_id=v_record_ID;
        
        n_nrofrom:=n_linecheck+1;



END LOOP;


		update sswh_checkbook
		set generateto='Y',processed='Y',
        docaction='--',docstatus='CO'
		where sswh_checkbook_id=v_record_ID;
      


  
/*
    -- Check, if we have a Shipment already
    IF(NOT FINISH_PROCESS) THEN
      DECLARE
        v_DocumentNo VARCHAR2(60) ;
        Cur_MInOut RECORD;
      BEGIN
        v_ResultStr:='Check Receipt exists';
        FOR Cur_MInOut IN
          (SELECT M_InOut_ID, DocumentNo  FROM M_InOut  WHERE C_Invoice_ID=v_Record_ID)
        LOOP
          v_DocumentNo:=Cur_MInOut.DocumentNo;
          v_Message:='@InvoiceCreateDocAlreadyExists@ = ' || v_DocumentNo;
          RAISE_APPLICATION_ERROR(-20000, v_Message);
          EXIT;
        END LOOP;
      EXCEPTION
      WHEN OTHERS THEN
        NULL;
      END;
    END IF;--FINISH_PROCESS
    */
    
    IF(NOT FINISH_PROCESS) THEN
      -- Create (and post) the shipment
      v_ResultStr:='Create Shipment';
     /*
     M_InOut_Create(NULL, v_InOut_ID, NULL, v_Record_ID, 'Y', v_M_Locator_ID) ;
      DBMS_OUTPUT.PUT_LINE('  Shipment - ' || v_InOut_ID) ;
      M_GENERATE_AVERAGE_COSTS(p_pinstance_id);
      */
      
  
       --v_resultado :='nlinea :' || v_NextNo || 'nroche :' || v_nrocheck || 'ultline :' || n_linecheck ;
       
       v_resultado :='Cheques generados exitosamente' ;

      
      if (v_resultado is not null or v_resultado <> '')then
     -- v_Message := v_Message || 'Datos = ' || v_resultado;
      v_Message := v_Message || v_resultado;
      end if;

    END IF; --FINISH_PROCESS
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END SSWH_GENERATE_CHECK
]]></body>
    </function>
  </database>
