<?xml version="1.0"?>
  <database name="FUNCTION SCPP_INCLUDE_ALL_EMPLOYEE">
    <function name="SCPP_INCLUDE_ALL_EMPLOYEE" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[TYPE RECORD IS REF CURSOR;
  Cur_Parameter RECORD;  
  Cur_Employee RECORD;
  Cur_Concept RECORD;
  Cur_Validar0 RECORD;
  CUR_PROCESSPAYROOLL RECORD;

  v_Client_ID VARCHAR2(32);
  v_Org_ID VARCHAR2(32);
  v_User_ID VARCHAR2(32) ;
  
  v_ResultStr VARCHAR2(2000) := '';
  v_ApprovalPayment_ID VARCHAR2(32);
  v_Payroll_ID VARCHAR2(32);
  v_TypeofIncome VARCHAR2(60);
  
  
  v_n_insertions NUMBER;
  v_Message VARCHAR2(2000):='';

  --valornull_exception  Exception;
  v_amount NUMBER;
  V_AMOUNT_CONCEP NUMBER;
  
  v_value NUMBER;
  v_isliquidation CHARACTER(1);       --OBTG:VARCHAR2--
  v_c_partner_id_payroll VARCHAR2(32);
  v_get_uuid VARCHAR2(32);
  v_ssph_tenth_settlement_id VARCHAR(32) :='';
  v_date VARCHAR(32) :='';
  v_period VARCHAR(32) :='';

  v_count_payroll NUMBER;
  v_count_payroll_provision NUMBER;
  
BEGIN
  --  Update AD_PInstance
  DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || PInstance_ID) ;
  v_ResultStr := 'PInstanceNotFound';
  AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;

  BEGIN --BODY

    -- Get Parameters
    v_ResultStr := 'ReadingParameters';
    v_n_insertions := 0;
    
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID, 
        i.AD_Client_ID,
        i.AD_Org_ID                    
      FROM AD_PInstance i      
      WHERE i.AD_PInstance_ID = PInstance_ID      
      )
    LOOP
      v_ApprovalPayment_ID := Cur_Parameter.Record_ID;      
    END LOOP; -- Get Parameter  

    --ELIMINAR LINEAS 
    DELETE FROM scpp_approvalpaymentline WHERE scpp_approvalpayment_id = v_ApprovalPayment_ID;
    
    --OBTENGO DATOS GENERALES 
    SELECT AD_CLIENT_ID INTO v_Client_ID FROM scpp_approvalpayment   WHERE scpp_approvalpayment_id = v_ApprovalPayment_ID;
    SELECT AD_ORG_ID INTO v_Org_ID FROM scpp_approvalpayment   WHERE scpp_approvalpayment_id = v_ApprovalPayment_ID;
    SELECT CREATEDBY INTO v_User_ID FROM scpp_approvalpayment   WHERE scpp_approvalpayment_id = v_ApprovalPayment_ID;
    SELECT SSPR_PAYROLL_ID INTO v_Payroll_ID FROM scpp_approvalpayment   WHERE scpp_approvalpayment_id = v_ApprovalPayment_ID;
    SELECT TYPEOFINCOME INTO v_TypeofIncome FROM scpp_approvalpayment   WHERE scpp_approvalpayment_id = v_ApprovalPayment_ID;
    SELECT ssph_tenth_settlement_id INTO  v_ssph_tenth_settlement_id  from scpp_approvalpayment WHERE scpp_approvalpayment_id = v_ApprovalPayment_ID;
    
    IF(v_ssph_tenth_settlement_id IS NOT NULL)THEN
  
	    FOR Cur_Employee IN
		(
		    /*select sl.c_bpartner_id,c.em_sshr_department_id as sshr_department_id ,
		    c.em_sspr_costcenter_id as c_costcenter_id,
		    c.em_sspr_user1_id as user1_id ,
		    c.em_sspr_user2_id as user2_id,
		    c.em_sspr_category_acct_id as sspr_category_acct_id  
		    from SSPH_Tenth_Settlement s
		    left join SSPH_Tenth_Settlement_Line sl on sl.SSPH_Tenth_Settlement_Line_id=s.SSPH_Tenth_Settlement_id
		    left join c_bpartner c on c.c_bpartner_id=sl.c_bpartner_id
		    where s.ssph_tenth_settlement_id=v_ssph_tenth_settlement_id AND c.em_sspr_typeofincome='D'

		   select from SSPH_Tenth_Settlement s*/

		   select sl.c_bpartner_id,c.em_sshr_department_id as sshr_department_id ,
		    c.em_sspr_costcenter_id as c_costcenter_id,
		    c.em_sspr_user1_id as user1_id ,
		    c.em_sspr_user2_id as user2_id,
		    c.em_sspr_category_acct_id as sspr_category_acct_id , 
		    sl.adjustedamt as total
		    from SSPH_Tenth_Settlement_Line sl 
		   left join c_bpartner c on c.c_bpartner_id=sl.c_bpartner_id
		   where sl.ssph_tenth_settlement_id=v_ssph_tenth_settlement_id AND c.em_sspr_typeofincome='D'


		   --select *from SSPH_Tenth_Settlement_Line limit 50;
		)
	    LOOP
		
		DBMS_OUTPUT.PUT_LINE( 'empleado: ' || Cur_Employee.c_bpartner_id);
		
		--INSERTO LINEAS DEL PAGO
		v_get_uuid := get_uuid();
		INSERT INTO scpp_approvalpaymentline(
		  scpp_approvalpaymentline_id, ad_client_id, ad_org_id, isactive,created,createdby,updated,updatedby, 
		  scpp_approvalpayment_id, c_bpartner_id, sshr_department_id, c_costcenter_id,
		  user1_id, user2_id, sspr_category_acct_id,payrollamount
		) VALUES (
		v_get_uuid, v_Client_ID,v_Org_ID,'Y',now(),v_User_ID,now(),v_User_ID,
		v_ApprovalPayment_ID,Cur_Employee.c_bpartner_id, Cur_Employee.sshr_department_id, Cur_Employee.c_costcenter_id,
		Cur_Employee.user1_id,Cur_Employee.user2_id, Cur_Employee.sspr_category_acct_id,Cur_Employee.total);

                 
		 v_n_insertions:=v_n_insertions+1;
	    END LOOP;

    --*** PROCESO CARGAR LINEAS 
    ELSE      
	    FOR Cur_Employee IN
		(
		 select b.c_bpartner_id,c.em_sshr_department_id as sshr_department_id,
		 c.em_sspr_costcenter_id as c_costcenter_id,c.em_sspr_user1_id as user1_id,
		 c.em_sspr_user2_id as user2_id,c.em_sspr_category_acct_id as sspr_category_acct_id,
		 b.SSPR_Payroll_Ticket_id,b.totalnet
		 from SSPR_Payroll a 
		 left join SSPR_Payroll_Ticket b on a.SSPR_Payroll_id = b.SSPR_Payroll_id
		 left join c_bpartner c on b.c_bpartner_id = c.c_bpartner_id
		 where a.SSPR_Payroll_id = v_Payroll_ID
		 AND c.em_sspr_typeofincome = v_TypeofIncome
		 AND b.em_scpp_status_payment = 'DR'

		)
		
	    LOOP
		DBMS_OUTPUT.PUT_LINE( 'empleado: ' || Cur_Employee.c_bpartner_id);
		
		--INSERTO LINEAS DEL PAGO
		v_get_uuid := get_uuid();
		INSERT INTO scpp_approvalpaymentline(
		  scpp_approvalpaymentline_id, ad_client_id, ad_org_id, isactive,created,createdby,updated,updatedby, 
		  scpp_approvalpayment_id, c_bpartner_id, sshr_department_id, c_costcenter_id,
		  user1_id, user2_id, sspr_category_acct_id,payrollamount
		) VALUES (
		v_get_uuid, v_Client_ID,v_Org_ID,'Y',now(),v_User_ID,now(),v_User_ID,
		v_ApprovalPayment_ID,Cur_Employee.c_bpartner_id, Cur_Employee.sshr_department_id, Cur_Employee.c_costcenter_id,
		Cur_Employee.user1_id,Cur_Employee.user2_id, Cur_Employee.sspr_category_acct_id,Cur_Employee.totalnet);
		--ACTUALIZO REFERENCIA DEL PAGO EN LAS LINEAS DE LA NOMINA
		Update SSPR_Payroll_Ticket SET em_scpp_approvalpaymentline_id = v_get_uuid WHERE SSPR_Payroll_Ticket_id = Cur_Employee.SSPR_Payroll_Ticket_id;
		v_n_insertions:=v_n_insertions+1;
	    END LOOP;
     END IF;
     IF(v_ssph_tenth_settlement_id IS NOT NULL)THEN
         select settlementdate  into v_date from SSPH_Tenth_Settlement where SSPH_Tenth_Settlement_id=v_ssph_tenth_settlement_id ;
         
         select c_period_id  into v_period from c_period where startdate<=cast(v_date as date) and enddate>=cast(v_date as date);	 
        
	 Update scpp_approvalpayment  SET c_period_id = v_period WHERE scpp_approvalpayment_id =v_ApprovalPayment_ID;       
     END IF;

    v_Message := '@RowsInserted@: ' || v_n_insertions || '.';
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
    
  END; --BODY
  EXCEPTION
  WHEN OTHERS THEN
    v_ResultStr:= '@ERROR=' || SQLERRM;

    DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
    RETURN;
END SCPP_INCLUDE_ALL_EMPLOYEE
]]></body>
    </function>
  </database>
