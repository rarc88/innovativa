<?xml version="1.0"?>
  <database name="FUNCTION SSRFC_INVOICE_BALANCECONTROL">
    <function name="SSRFC_INVOICE_BALANCECONTROL" type="NULL">
      <parameter name="p_ep_instance" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[p_message             VARCHAR2(2000);     
  p_record_id           VARCHAR2(60);       
  p_docaction           VARCHAR2(60);       
  p_user                VARCHAR2(60);       
  p_result              NUMBER;
  p_docstatus           VARCHAR2(60);       
  p_issotrx             VARCHAR2(60);       

  v_ResultStr           VARCHAR2(2000):=''; 
  v_sql                 VARCHAR2(4000):=''; 
  v_converted           NUMBER;
  v_budgeted            CHAR(1);
  v_doctype_id          VARCHAR2(32);       
  v_isreversal            CHAR(1);
  v_isreturn            CHAR(1);
  v_docbasetype            VARCHAR2(60);       
  v_nc_or_re NUMBER:= 1;
  v_new_exec_value NUMBER:= 1;
  v_isdeferred            CHAR(1);
  v_differwithinyear    CHAR(1);
  v_dateinvoiced        DATE;
  v_datefrom            DATE;
  v_dateto              DATE;
  v_client              VARCHAR2(32);       
  v_org                 VARCHAR2(32);       
  v_user                VARCHAR2(32);       
  v_totaldays NUMBER:= 0;
  v_defferperday NUMBER:= 0;
  v_pivotmonth NUMBER:= 0;
  v_pivotyear NUMBER:= 0;
  v_pivotdate           DATE;
  v_pivotexecuted NUMBER:= 0;
  v_pivotexecutedmonth NUMBER:= 0;
  v_deferred_invoice_id VARCHAR2(32);       
  v_postyear            NUMBER;
  v_CostCenterID VARCHAR2(32):=''; 
  v_User1ID VARCHAR2(32):='';
  v_User2ID VARCHAR2(32):='';
  v_BuddgetitemID VARCHAR2(32):='';
  v_BudgetLineID VARCHAR2(32):='';
  v_BudgetAreaID VARCHAR2(32):='';
  v_CountBudget   NUMBER;
  v_sqlDelete           VARCHAR2(1000):='';
      

  TYPE RECORD IS REF CURSOR;
  cur_params            RECORD;
  cur_lines             RECORD;
  cur_deferred_lines    RECORD;
  Cur_budgetlog         RECORD;

BEGIN

  FOR Cur_Params IN (
    SELECT *
    FROM ad_ep_instance_para
    WHERE ad_ep_instance_id = p_ep_instance
    ) LOOP
    IF (cur_params.parametername LIKE 'DocAction') THEN
      p_docaction := Cur_Params.p_string;
    ELSIF (cur_params.parametername LIKE 'Record_ID') THEN
      p_record_id := cur_params.p_string;
    ELSIF (cur_params.parametername LIKE 'User') THEN
      p_user := cur_params.p_string;
    ELSIF (cur_params.parametername LIKE 'Message') THEN
      p_message := cur_params.p_text;
    ELSIF (cur_params.parametername LIKE 'Result') THEN
      p_result := cur_params.p_number;
    END IF;
  END LOOP;
--DQ VALIDACION ANULACION FACTURA DE VENTA
  SELECT  issotrx, docstatus, c_doctype_id, em_sfb_isdeferred,
          em_sfb_differ_within_year, dateinvoiced, em_ssfl_billing_period_from, em_ssfl_billing_period_to,
          ad_client_id, ad_org_id, updatedby
  INTO  p_issotrx, p_docstatus, v_doctype_id, v_isdeferred,
        v_differwithinyear, v_dateinvoiced, v_datefrom, v_dateto,
        v_client, v_org, v_user
  from c_invoice where c_invoice_id = p_record_id;

IF (p_issotrx='N') THEN

   --OBTENGO CONFIGURACION DE TIPO DOCUMENTO NC - (FI)
  SELECT isreversal, isreturn, docbasetype
  INTO v_isreversal, v_isreturn, v_docbasetype
  FROM c_doctype 
  WHERE c_doctype_id = v_doctype_id;       

  IF (p_docaction = 'CO' OR p_docaction = 'RE' or p_docaction = 'VO' or p_docstatus = 'VO') THEN
    FOR cur_lines IN (
	SELECT i.ad_client_id, i.ad_org_id, i.c_doctypetarget_id, i.dateinvoiced,
              i.c_currency_id, i.em_sfb_isnotbudgetable AS header_isnotbudgetable, il.line, (il.linenetamt + il.taxamt) AS linetotalamt,
              il.em_sfb_budget_cert_line_id AS linecertificate, il.m_product_id, il.c_charge_id, il.account_id,
	      il.c_invoiceline_id, il.EM_Ssrfc_Balancecontrol, il.EM_Ssrfc_Budget_Line_ID, bln.sfb_budget_line_id, b.c_currency_id as budget_currency_id,
	      il.em_Sfb_Budget_Cert_Line_ID, b.sfb_budget_id, i.c_invoice_id
	FROM c_invoice i
	LEFT JOIN c_invoiceline il ON i.c_invoice_id = il.c_invoice_id
	LEFT JOIN sfb_budget_line bln ON bln.sfb_budget_line_id = il.em_ssrfc_budget_line_id
	LEFT JOIN sfb_budget_version bv ON bln.sfb_budget_version_id = bv.sfb_budget_version_id
	LEFT JOIN sfb_budget b ON bv.sfb_budget_id = b.sfb_budget_id
	WHERE i.c_invoice_id = p_record_id
        AND i.issotrx = 'N'
        AND il.EM_Ssrfc_Balancecontrol='Y'
        ORDER BY il.line
    )
    LOOP

	IF (cur_lines.sfb_budget_line_id IS NULL) THEN
		RAISE_APPLICATION_ERROR(-20000, '@ssrfc_musthavebudgetline@');
	END IF;
	
	IF (p_docaction = 'RE' or p_docaction = 'VO' or p_docstatus = 'VO') THEN
		v_nc_or_re := -1;
	END IF;

	IF cur_lines.c_currency_id <> cur_lines.budget_currency_id THEN
            v_converted := C_Currency_Round(C_Currency_Convert(cur_lines.linetotalamt * v_nc_or_re, cur_lines.c_currency_id, cur_lines.budget_currency_id, cur_lines.dateinvoiced, null, cur_lines.ad_client_id, cur_lines.ad_org_id), cur_lines.budget_currency_id, null);
	ELSE
            v_converted := cur_lines.linetotalamt * v_nc_or_re;
	END IF;
	
	IF (v_converted IS NULL) THEN
            RAISE_APPLICATION_ERROR(-20000, '@NoConversionRateHeader@');
	END IF;

	v_sql := 'UPDATE SFB_BUDGET_LINE SET ';

	SELECT
	CASE EXTRACT(MONTH FROM TO_DATE(cur_lines.dateinvoiced))
		WHEN 1  THEN v_sql || 'jan_executed_value = jan_executed_value + '
		WHEN 2  THEN v_sql || 'feb_executed_value = feb_executed_value + '
		WHEN 3  THEN v_sql || 'mar_executed_value = mar_executed_value + '
		WHEN 4  THEN v_sql || 'apr_executed_value = apr_executed_value + '
		WHEN 5  THEN v_sql || 'may_executed_value = may_executed_value + '
		WHEN 6  THEN v_sql || 'jun_executed_value = jun_executed_value + '
		WHEN 7  THEN v_sql || 'jul_executed_value = jul_executed_value + '
		WHEN 8  THEN v_sql || 'aug_executed_value = aug_executed_value + '
		WHEN 9  THEN v_sql || 'sep_executed_value = sep_executed_value + '
		WHEN 10 THEN v_sql || 'oct_executed_value = oct_executed_value + '
		WHEN 11 THEN v_sql || 'nov_executed_value = nov_executed_value + '
		WHEN 12 THEN v_sql || 'dec_executed_value = dec_executed_value + '
	END INTO v_sql
	FROM DUAL;

	v_sql := v_sql || v_converted || ' WHERE SFB_BUDGET_LINE_ID = ''' || cur_lines.sfb_budget_line_id || '''';
	EXECUTE IMMEDIATE v_sql;


	v_sql := 'UPDATE SFB_BUDGET_LINE SET ';

	SELECT
	CASE EXTRACT(MONTH FROM TO_DATE(cur_lines.dateinvoiced))
		WHEN 1  THEN v_sql || 'jan_committed_value = jan_committed_value + '
		WHEN 2  THEN v_sql || 'feb_committed_value = feb_committed_value + '
		WHEN 3  THEN v_sql || 'mar_committed_value = mar_committed_value + '
		WHEN 4  THEN v_sql || 'apr_committed_value = apr_committed_value + '
		WHEN 5  THEN v_sql || 'may_committed_value = may_committed_value + '
		WHEN 6  THEN v_sql || 'jun_committed_value = jun_committed_value + '
		WHEN 7  THEN v_sql || 'jul_committed_value = jul_committed_value + '
		WHEN 8  THEN v_sql || 'aug_committed_value = aug_committed_value + '
		WHEN 9  THEN v_sql || 'sep_committed_value = sep_committed_value + '
		WHEN 10 THEN v_sql || 'oct_committed_value = oct_committed_value + '
		WHEN 11 THEN v_sql || 'nov_committed_value = nov_committed_value + '
		WHEN 12 THEN v_sql || 'dec_committed_value = dec_committed_value + '
	END INTO v_sql
	FROM DUAL;
	
	v_sql := v_sql || v_converted || ' WHERE SFB_BUDGET_LINE_ID = ''' || cur_lines.sfb_budget_line_id || '''';
	EXECUTE IMMEDIATE v_sql;

	v_sql := 'UPDATE SFB_BUDGET_LINE SET ';

	SELECT
	CASE EXTRACT(MONTH FROM TO_DATE(cur_lines.dateinvoiced))
		WHEN 1  THEN v_sql || 'jan_paidout_value = jan_paidout_value + '
		WHEN 2  THEN v_sql || 'feb_paidout_value = feb_paidout_value + '
		WHEN 3  THEN v_sql || 'mar_paidout_value = mar_paidout_value + '
		WHEN 4  THEN v_sql || 'apr_paidout_value = apr_paidout_value + '
		WHEN 5  THEN v_sql || 'may_paidout_value = may_paidout_value + '
		WHEN 6  THEN v_sql || 'jun_paidout_value = jun_paidout_value + '
		WHEN 7  THEN v_sql || 'jul_paidout_value = jul_paidout_value + '
		WHEN 8  THEN v_sql || 'aug_paidout_value = aug_paidout_value + '
		WHEN 9  THEN v_sql || 'sep_paidout_value = sep_paidout_value + '
		WHEN 10 THEN v_sql || 'oct_paidout_value = oct_paidout_value + '
		WHEN 11 THEN v_sql || 'nov_paidout_value = nov_paidout_value + '
		WHEN 12 THEN v_sql || 'dec_paidout_value = dec_paidout_value + '
	END INTO v_sql
	FROM DUAL;
	
	v_sql := v_sql || v_converted || ' WHERE SFB_BUDGET_LINE_ID = ''' || cur_lines.sfb_budget_line_id || '''';
	EXECUTE IMMEDIATE v_sql;

	IF (p_docaction = 'RE' or p_docaction = 'VO' or p_docstatus = 'VO') THEN
		delete from SSRFC_balancecontrol where c_invoiceline_id = cur_lines.c_invoiceline_id;
	ELSE
		insert into SSRFC_balancecontrol (SSRFC_balancecontrol_id, ad_client_id, ad_org_id,
			createdby, updatedby, dateinvoice, c_invoice_id, c_invoiceline_id, 
			ammount, Sfb_Budget_Cert_Line_ID, sfb_budget_id) 
		values (get_uuid(), cur_lines.ad_client_id, cur_lines.ad_org_id, p_user, p_user, 
			cur_lines.dateinvoiced, cur_lines.c_invoice_id , cur_lines.c_invoiceline_id,
			v_converted, cur_lines.em_Sfb_Budget_Cert_Line_ID, cur_lines.sfb_budget_id);
	END IF;
	
    END LOOP;

  END IF;
      
END IF;
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('SFB_BUDGET_CHECK exception: '|| v_ResultStr);
  RAISE;
END SSRFC_INVOICE_BALANCECONTROL
]]></body>
    </function>
  </database>
