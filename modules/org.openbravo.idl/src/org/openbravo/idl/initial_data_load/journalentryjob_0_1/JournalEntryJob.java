// ============================================================================
//
// Copyright (c) 2005-2016, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 3.1.4.r29781).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package org.openbravo.idl.initial_data_load.journalentryjob_0_1;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.openbravo.idl.proc.Value;
import org.openbravo.model.common.businesspartner.BusinessPartner;
import org.openbravo.model.common.currency.Currency;
import org.openbravo.model.common.plm.Product;
import org.openbravo.model.financialmgmt.accounting.coa.AcctSchema;
import org.openbravo.model.financialmgmt.accounting.coa.ElementValue;
import org.openbravo.model.financialmgmt.gl.GLCategory;
import org.openbravo.model.financialmgmt.tax.TaxRate;
import org.openbravo.model.financialmgmt.tax.Withholding;
import org.openbravo.model.marketing.Campaign;
import org.openbravo.model.materialmgmt.cost.ABCActivity;
import org.openbravo.model.project.Project;
import org.openbravo.model.sales.SalesRegion;

import routines.TalendString;
import routines.system.TDieException;

/**
 * Job: JournalEntryJob Purpose: <br>
 * Description: <br>
 * 
 * @author mirurita
 * @version 3.1.4.r29781
 * @status
 */
@SuppressWarnings({ "rawtypes", "unchecked", "hiding" })
public class JournalEntryJob {

  public final Object obj = new Object();
  // create and load default properties
  private java.util.Properties defaultProps = new java.util.Properties();

  // create application properties with default
  private class ContextProperties extends java.util.Properties {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;

    public ContextProperties(java.util.Properties properties) {
      super(properties);
    }

    public ContextProperties() {
      super();
    }

    @SuppressWarnings("unused")
    public void synchronizeContext() {

      if (executeInsert != null) {

        this.setProperty("executeInsert", executeInsert.toString());

      }

      if (filename != null) {

        this.setProperty("filename", filename.toString());

      }

    }

    public String executeInsert;
    public String filename;
  }

  private ContextProperties context = new ContextProperties();
  public Integer errorCode = null;
  private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
  private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
  public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

  private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
  private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
      new java.io.BufferedOutputStream(baos));

  public String getExceptionStackTrace() {
    errorMessagePS.flush();
    return baos.toString();
  }

  @SuppressWarnings("serial")
  private class TalendException extends Exception {
    private java.util.Map<String, Object> globalMap = null;
    private Exception e = null;
    private String currentComponent = null;

    private TalendException(Exception e, String errorComponent,
        final java.util.Map<String, Object> globalMap) {
      this.currentComponent = errorComponent;
      this.globalMap = globalMap;
      this.e = e;
    }

    @Override
    public void printStackTrace() {
      if (!(e instanceof TalendException || e instanceof TDieException)) {
        globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
        System.err.println("Exception in component " + currentComponent);
      }
      if (!(e instanceof TDieException)) {
        if (e instanceof TalendException) {
          e.printStackTrace();
        } else {
          e.printStackTrace();
          e.printStackTrace(errorMessagePS);
        }
      }
      if (!(e instanceof TalendException)) {
        try {
          for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
            if (m.getName().compareTo(currentComponent + "_error") == 0) {
              m.invoke(JournalEntryJob.this, new Object[] { e, globalMap });
              break;
            }
          }

          if (!(e instanceof TDieException)) {
          }
        } catch (java.lang.SecurityException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalArgumentException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalAccessException e) {
          this.e.printStackTrace();
        } catch (java.lang.reflect.InvocationTargetException e) {
          this.e.printStackTrace();
        }
      }
    }
  }

  public void tFileInputDelimited_1_error(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
    end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_1_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_1_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_3_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_3", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_9_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_9", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_16_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_16", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_18_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_18", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_2_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_2", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFileInputDelimited_1_onSubJobError(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
  }

  static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String TransactionalOrganization;
    String JournalName;
    String JournalLineDescription;
    String Currency;
    String AcctSchema;
    String GLCategory;
    String AccountingDate;
    String Opening;
    String Alias;
    String Account;
    String Product;
    String BusinessPartner;
    String Project;
    String Campaign;
    String SalesRegion;
    String DebitAmount;
    String CreditAmount;
    String Tax;
    String Withholding;
    String Activity;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TransactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TransactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.JournalName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.JournalName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.JournalLineDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.JournalLineDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AcctSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AcctSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.GLCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.GLCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Opening = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Opening = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Alias = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Alias = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Account = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Account = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Project = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Project = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Campaign = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Campaign = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SalesRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SalesRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DebitAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DebitAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CreditAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CreditAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Tax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Tax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Withholding = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Withholding = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Activity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Activity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TransactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TransactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.JournalName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.JournalName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.JournalLineDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.JournalLineDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AcctSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AcctSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.GLCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.GLCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Opening == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Opening.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Alias == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Alias.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Account == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Account.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Project == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Project.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Campaign == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Campaign.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SalesRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SalesRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DebitAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DebitAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CreditAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CreditAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Tax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Tax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Withholding == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Withholding.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Activity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Activity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("TransactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.TransactionalOrganization));

      sb.append(", ");

      sb.append("JournalName");
      sb.append("=");
      sb.append(String.valueOf(this.JournalName));

      sb.append(", ");

      sb.append("JournalLineDescription");
      sb.append("=");
      sb.append(String.valueOf(this.JournalLineDescription));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("AcctSchema");
      sb.append("=");
      sb.append(String.valueOf(this.AcctSchema));

      sb.append(", ");

      sb.append("GLCategory");
      sb.append("=");
      sb.append(String.valueOf(this.GLCategory));

      sb.append(", ");

      sb.append("AccountingDate");
      sb.append("=");
      sb.append(String.valueOf(this.AccountingDate));

      sb.append(", ");

      sb.append("Opening");
      sb.append("=");
      sb.append(String.valueOf(this.Opening));

      sb.append(", ");

      sb.append("Alias");
      sb.append("=");
      sb.append(String.valueOf(this.Alias));

      sb.append(", ");

      sb.append("Account");
      sb.append("=");
      sb.append(String.valueOf(this.Account));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("Project");
      sb.append("=");
      sb.append(String.valueOf(this.Project));

      sb.append(", ");

      sb.append("Campaign");
      sb.append("=");
      sb.append(String.valueOf(this.Campaign));

      sb.append(", ");

      sb.append("SalesRegion");
      sb.append("=");
      sb.append(String.valueOf(this.SalesRegion));

      sb.append(", ");

      sb.append("DebitAmount");
      sb.append("=");
      sb.append(String.valueOf(this.DebitAmount));

      sb.append(", ");

      sb.append("CreditAmount");
      sb.append("=");
      sb.append(String.valueOf(this.CreditAmount));

      sb.append(", ");

      sb.append("Tax");
      sb.append("=");
      sb.append(String.valueOf(this.Tax));

      sb.append(", ");

      sb.append("Withholding");
      sb.append("=");
      sb.append(String.valueOf(this.Withholding));

      sb.append(", ");

      sb.append("Activity");
      sb.append("=");
      sb.append(String.valueOf(this.Activity));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String TransactionalOrganization;
    String JournalName;
    String JournalLineDescription;
    String Currency;
    String AcctSchema;
    String GLCategory;
    String AccountingDate;
    String Opening;
    String Alias;
    String Account;
    String Product;
    String BusinessPartner;
    String Project;
    String Campaign;
    String SalesRegion;
    String DebitAmount;
    String CreditAmount;
    String Tax;
    String Withholding;
    String Activity;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TransactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TransactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.JournalName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.JournalName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.JournalLineDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.JournalLineDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AcctSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AcctSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.GLCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.GLCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Opening = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Opening = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Alias = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Alias = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Account = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Account = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Project = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Project = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Campaign = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Campaign = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SalesRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SalesRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DebitAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DebitAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CreditAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CreditAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Tax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Tax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Withholding = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Withholding = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Activity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Activity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TransactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TransactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.JournalName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.JournalName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.JournalLineDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.JournalLineDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AcctSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AcctSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.GLCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.GLCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Opening == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Opening.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Alias == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Alias.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Account == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Account.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Project == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Project.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Campaign == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Campaign.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SalesRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SalesRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DebitAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DebitAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CreditAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CreditAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Tax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Tax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Withholding == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Withholding.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Activity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Activity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("TransactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.TransactionalOrganization));

      sb.append(", ");

      sb.append("JournalName");
      sb.append("=");
      sb.append(String.valueOf(this.JournalName));

      sb.append(", ");

      sb.append("JournalLineDescription");
      sb.append("=");
      sb.append(String.valueOf(this.JournalLineDescription));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("AcctSchema");
      sb.append("=");
      sb.append(String.valueOf(this.AcctSchema));

      sb.append(", ");

      sb.append("GLCategory");
      sb.append("=");
      sb.append(String.valueOf(this.GLCategory));

      sb.append(", ");

      sb.append("AccountingDate");
      sb.append("=");
      sb.append(String.valueOf(this.AccountingDate));

      sb.append(", ");

      sb.append("Opening");
      sb.append("=");
      sb.append(String.valueOf(this.Opening));

      sb.append(", ");

      sb.append("Alias");
      sb.append("=");
      sb.append(String.valueOf(this.Alias));

      sb.append(", ");

      sb.append("Account");
      sb.append("=");
      sb.append(String.valueOf(this.Account));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("Project");
      sb.append("=");
      sb.append(String.valueOf(this.Project));

      sb.append(", ");

      sb.append("Campaign");
      sb.append("=");
      sb.append(String.valueOf(this.Campaign));

      sb.append(", ");

      sb.append("SalesRegion");
      sb.append("=");
      sb.append(String.valueOf(this.SalesRegion));

      sb.append(", ");

      sb.append("DebitAmount");
      sb.append("=");
      sb.append(String.valueOf(this.DebitAmount));

      sb.append(", ");

      sb.append("CreditAmount");
      sb.append("=");
      sb.append(String.valueOf(this.CreditAmount));

      sb.append(", ");

      sb.append("Tax");
      sb.append("=");
      sb.append(String.valueOf(this.Tax));

      sb.append(", ");

      sb.append("Withholding");
      sb.append("=");
      sb.append(String.valueOf(this.Withholding));

      sb.append(", ");

      sb.append("Activity");
      sb.append("=");
      sb.append(String.valueOf(this.Activity));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String TransactionalOrganization;
    String JournalName;
    String JournalLineDescription;
    String Currency;
    String AcctSchema;
    String GLCategory;
    String AccountingDate;
    String Opening;
    String Alias;
    String Account;
    String Product;
    String BusinessPartner;
    String Project;
    String Campaign;
    String SalesRegion;
    String DebitAmount;
    String CreditAmount;
    String Tax;
    String Withholding;
    String Activity;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TransactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TransactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.JournalName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.JournalName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.JournalLineDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.JournalLineDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AcctSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AcctSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.GLCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.GLCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Opening = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Opening = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Alias = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Alias = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Account = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Account = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Project = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Project = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Campaign = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Campaign = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SalesRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SalesRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DebitAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DebitAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CreditAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CreditAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Tax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Tax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Withholding = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Withholding = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Activity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Activity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TransactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TransactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.JournalName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.JournalName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.JournalLineDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.JournalLineDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AcctSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AcctSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.GLCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.GLCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Opening == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Opening.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Alias == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Alias.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Account == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Account.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Project == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Project.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Campaign == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Campaign.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SalesRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SalesRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DebitAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DebitAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CreditAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CreditAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Tax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Tax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Withholding == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Withholding.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Activity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Activity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("TransactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.TransactionalOrganization));

      sb.append(", ");

      sb.append("JournalName");
      sb.append("=");
      sb.append(String.valueOf(this.JournalName));

      sb.append(", ");

      sb.append("JournalLineDescription");
      sb.append("=");
      sb.append(String.valueOf(this.JournalLineDescription));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("AcctSchema");
      sb.append("=");
      sb.append(String.valueOf(this.AcctSchema));

      sb.append(", ");

      sb.append("GLCategory");
      sb.append("=");
      sb.append(String.valueOf(this.GLCategory));

      sb.append(", ");

      sb.append("AccountingDate");
      sb.append("=");
      sb.append(String.valueOf(this.AccountingDate));

      sb.append(", ");

      sb.append("Opening");
      sb.append("=");
      sb.append(String.valueOf(this.Opening));

      sb.append(", ");

      sb.append("Alias");
      sb.append("=");
      sb.append(String.valueOf(this.Alias));

      sb.append(", ");

      sb.append("Account");
      sb.append("=");
      sb.append(String.valueOf(this.Account));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("Project");
      sb.append("=");
      sb.append(String.valueOf(this.Project));

      sb.append(", ");

      sb.append("Campaign");
      sb.append("=");
      sb.append(String.valueOf(this.Campaign));

      sb.append(", ");

      sb.append("SalesRegion");
      sb.append("=");
      sb.append(String.valueOf(this.SalesRegion));

      sb.append(", ");

      sb.append("DebitAmount");
      sb.append("=");
      sb.append(String.valueOf(this.DebitAmount));

      sb.append(", ");

      sb.append("CreditAmount");
      sb.append("=");
      sb.append(String.valueOf(this.CreditAmount));

      sb.append(", ");

      sb.append("Tax");
      sb.append("=");
      sb.append(String.valueOf(this.Tax));

      sb.append(", ");

      sb.append("Withholding");
      sb.append("=");
      sb.append(String.valueOf(this.Withholding));

      sb.append(", ");

      sb.append("Activity");
      sb.append("=");
      sb.append(String.valueOf(this.Activity));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String TransactionalOrganization;
    String JournalName;
    String JournalLineDescription;
    String Currency;
    String AcctSchema;
    String GLCategory;
    String AccountingDate;
    String Opening;
    String Alias;
    String Account;
    String Product;
    String BusinessPartner;
    String Project;
    String Campaign;
    String SalesRegion;
    String DebitAmount;
    String CreditAmount;
    String Tax;
    String Withholding;
    String Activity;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TransactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TransactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.JournalName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.JournalName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.JournalLineDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.JournalLineDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AcctSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AcctSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.GLCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.GLCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Opening = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Opening = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Alias = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Alias = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Account = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Account = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Project = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Project = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Campaign = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Campaign = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SalesRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SalesRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DebitAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DebitAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CreditAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CreditAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Tax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Tax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Withholding = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Withholding = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Activity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Activity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TransactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TransactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.JournalName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.JournalName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.JournalLineDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.JournalLineDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AcctSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AcctSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.GLCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.GLCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Opening == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Opening.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Alias == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Alias.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Account == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Account.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Project == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Project.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Campaign == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Campaign.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SalesRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SalesRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DebitAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DebitAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CreditAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CreditAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Tax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Tax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Withholding == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Withholding.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Activity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Activity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("TransactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.TransactionalOrganization));

      sb.append(", ");

      sb.append("JournalName");
      sb.append("=");
      sb.append(String.valueOf(this.JournalName));

      sb.append(", ");

      sb.append("JournalLineDescription");
      sb.append("=");
      sb.append(String.valueOf(this.JournalLineDescription));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("AcctSchema");
      sb.append("=");
      sb.append(String.valueOf(this.AcctSchema));

      sb.append(", ");

      sb.append("GLCategory");
      sb.append("=");
      sb.append(String.valueOf(this.GLCategory));

      sb.append(", ");

      sb.append("AccountingDate");
      sb.append("=");
      sb.append(String.valueOf(this.AccountingDate));

      sb.append(", ");

      sb.append("Opening");
      sb.append("=");
      sb.append(String.valueOf(this.Opening));

      sb.append(", ");

      sb.append("Alias");
      sb.append("=");
      sb.append(String.valueOf(this.Alias));

      sb.append(", ");

      sb.append("Account");
      sb.append("=");
      sb.append(String.valueOf(this.Account));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("Project");
      sb.append("=");
      sb.append(String.valueOf(this.Project));

      sb.append(", ");

      sb.append("Campaign");
      sb.append("=");
      sb.append(String.valueOf(this.Campaign));

      sb.append(", ");

      sb.append("SalesRegion");
      sb.append("=");
      sb.append(String.valueOf(this.SalesRegion));

      sb.append(", ");

      sb.append("DebitAmount");
      sb.append("=");
      sb.append(String.valueOf(this.DebitAmount));

      sb.append(", ");

      sb.append("CreditAmount");
      sb.append("=");
      sb.append(String.valueOf(this.CreditAmount));

      sb.append(", ");

      sb.append("Tax");
      sb.append("=");
      sb.append(String.valueOf(this.Tax));

      sb.append(", ");

      sb.append("Withholding");
      sb.append("=");
      sb.append(String.valueOf(this.Withholding));

      sb.append(", ");

      sb.append("Activity");
      sb.append("=");
      sb.append(String.valueOf(this.Activity));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String TransactionalOrganization;
    String JournalName;
    String JournalLineDescription;
    String Currency;
    String AcctSchema;
    String GLCategory;
    String AccountingDate;
    String Opening;
    String Alias;
    String Account;
    String Product;
    String BusinessPartner;
    String Project;
    String Campaign;
    String SalesRegion;
    String DebitAmount;
    String CreditAmount;
    String Tax;
    String Withholding;
    String Activity;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TransactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TransactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.JournalName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.JournalName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.JournalLineDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.JournalLineDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AcctSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AcctSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.GLCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.GLCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Opening = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Opening = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Alias = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Alias = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Account = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Account = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Project = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Project = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Campaign = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Campaign = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SalesRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SalesRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DebitAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DebitAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CreditAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CreditAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Tax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Tax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Withholding = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Withholding = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Activity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Activity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TransactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TransactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.JournalName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.JournalName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.JournalLineDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.JournalLineDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AcctSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AcctSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.GLCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.GLCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Opening == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Opening.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Alias == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Alias.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Account == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Account.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Project == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Project.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Campaign == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Campaign.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SalesRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SalesRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DebitAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DebitAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CreditAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CreditAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Tax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Tax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Withholding == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Withholding.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Activity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Activity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("TransactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.TransactionalOrganization));

      sb.append(", ");

      sb.append("JournalName");
      sb.append("=");
      sb.append(String.valueOf(this.JournalName));

      sb.append(", ");

      sb.append("JournalLineDescription");
      sb.append("=");
      sb.append(String.valueOf(this.JournalLineDescription));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("AcctSchema");
      sb.append("=");
      sb.append(String.valueOf(this.AcctSchema));

      sb.append(", ");

      sb.append("GLCategory");
      sb.append("=");
      sb.append(String.valueOf(this.GLCategory));

      sb.append(", ");

      sb.append("AccountingDate");
      sb.append("=");
      sb.append(String.valueOf(this.AccountingDate));

      sb.append(", ");

      sb.append("Opening");
      sb.append("=");
      sb.append(String.valueOf(this.Opening));

      sb.append(", ");

      sb.append("Alias");
      sb.append("=");
      sb.append(String.valueOf(this.Alias));

      sb.append(", ");

      sb.append("Account");
      sb.append("=");
      sb.append(String.valueOf(this.Account));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("Project");
      sb.append("=");
      sb.append(String.valueOf(this.Project));

      sb.append(", ");

      sb.append("Campaign");
      sb.append("=");
      sb.append(String.valueOf(this.Campaign));

      sb.append(", ");

      sb.append("SalesRegion");
      sb.append("=");
      sb.append(String.valueOf(this.SalesRegion));

      sb.append(", ");

      sb.append("DebitAmount");
      sb.append("=");
      sb.append(String.valueOf(this.DebitAmount));

      sb.append(", ");

      sb.append("CreditAmount");
      sb.append("=");
      sb.append(String.valueOf(this.CreditAmount));

      sb.append(", ");

      sb.append("Tax");
      sb.append("=");
      sb.append(String.valueOf(this.Tax));

      sb.append(", ");

      sb.append("Withholding");
      sb.append("=");
      sb.append(String.valueOf(this.Withholding));

      sb.append(", ");

      sb.append("Activity");
      sb.append("=");
      sb.append(String.valueOf(this.Activity));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String TransactionalOrganization;
    String JournalName;
    String JournalLineDescription;
    String Currency;
    String AcctSchema;
    String GLCategory;
    String AccountingDate;
    String Opening;
    String Alias;
    String Account;
    String Product;
    String BusinessPartner;
    String Project;
    String Campaign;
    String SalesRegion;
    String DebitAmount;
    String CreditAmount;
    String Tax;
    String Withholding;
    String Activity;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TransactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TransactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.JournalName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.JournalName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.JournalLineDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.JournalLineDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AcctSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AcctSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.GLCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.GLCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Opening = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Opening = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Alias = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Alias = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Account = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Account = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Project = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Project = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Campaign = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Campaign = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SalesRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SalesRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DebitAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DebitAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CreditAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CreditAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Tax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Tax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Withholding = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Withholding = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Activity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Activity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TransactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TransactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.JournalName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.JournalName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.JournalLineDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.JournalLineDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AcctSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AcctSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.GLCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.GLCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Opening == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Opening.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Alias == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Alias.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Account == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Account.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Project == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Project.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Campaign == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Campaign.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SalesRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SalesRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DebitAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DebitAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CreditAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CreditAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Tax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Tax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Withholding == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Withholding.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Activity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Activity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("TransactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.TransactionalOrganization));

      sb.append(", ");

      sb.append("JournalName");
      sb.append("=");
      sb.append(String.valueOf(this.JournalName));

      sb.append(", ");

      sb.append("JournalLineDescription");
      sb.append("=");
      sb.append(String.valueOf(this.JournalLineDescription));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("AcctSchema");
      sb.append("=");
      sb.append(String.valueOf(this.AcctSchema));

      sb.append(", ");

      sb.append("GLCategory");
      sb.append("=");
      sb.append(String.valueOf(this.GLCategory));

      sb.append(", ");

      sb.append("AccountingDate");
      sb.append("=");
      sb.append(String.valueOf(this.AccountingDate));

      sb.append(", ");

      sb.append("Opening");
      sb.append("=");
      sb.append(String.valueOf(this.Opening));

      sb.append(", ");

      sb.append("Alias");
      sb.append("=");
      sb.append(String.valueOf(this.Alias));

      sb.append(", ");

      sb.append("Account");
      sb.append("=");
      sb.append(String.valueOf(this.Account));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("Project");
      sb.append("=");
      sb.append(String.valueOf(this.Project));

      sb.append(", ");

      sb.append("Campaign");
      sb.append("=");
      sb.append(String.valueOf(this.Campaign));

      sb.append(", ");

      sb.append("SalesRegion");
      sb.append("=");
      sb.append(String.valueOf(this.SalesRegion));

      sb.append(", ");

      sb.append("DebitAmount");
      sb.append("=");
      sb.append(String.valueOf(this.DebitAmount));

      sb.append(", ");

      sb.append("CreditAmount");
      sb.append("=");
      sb.append(String.valueOf(this.CreditAmount));

      sb.append(", ");

      sb.append("Tax");
      sb.append("=");
      sb.append(String.valueOf(this.Tax));

      sb.append(", ");

      sb.append("Withholding");
      sb.append("=");
      sb.append(String.valueOf(this.Withholding));

      sb.append(", ");

      sb.append("Activity");
      sb.append("=");
      sb.append(String.valueOf(this.Activity));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String TransactionalOrganization;
    String JournalName;
    String JournalLineDescription;
    String Currency;
    String AcctSchema;
    String GLCategory;
    String AccountingDate;
    String Opening;
    String Alias;
    String Account;
    String Product;
    String BusinessPartner;
    String Project;
    String Campaign;
    String SalesRegion;
    String DebitAmount;
    String CreditAmount;
    String Tax;
    String Withholding;
    String Activity;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TransactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TransactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.JournalName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.JournalName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.JournalLineDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.JournalLineDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AcctSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AcctSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.GLCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.GLCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Opening = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Opening = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Alias = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Alias = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Account = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Account = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Project = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Project = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Campaign = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Campaign = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SalesRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SalesRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DebitAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DebitAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CreditAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CreditAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Tax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Tax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Withholding = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Withholding = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Activity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Activity = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TransactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TransactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.JournalName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.JournalName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.JournalLineDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.JournalLineDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AcctSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AcctSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.GLCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.GLCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Opening == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Opening.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Alias == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Alias.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Account == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Account.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Project == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Project.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Campaign == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Campaign.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SalesRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SalesRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DebitAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DebitAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CreditAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CreditAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Tax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Tax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Withholding == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Withholding.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Activity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Activity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("TransactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.TransactionalOrganization));

      sb.append(", ");

      sb.append("JournalName");
      sb.append("=");
      sb.append(String.valueOf(this.JournalName));

      sb.append(", ");

      sb.append("JournalLineDescription");
      sb.append("=");
      sb.append(String.valueOf(this.JournalLineDescription));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("AcctSchema");
      sb.append("=");
      sb.append(String.valueOf(this.AcctSchema));

      sb.append(", ");

      sb.append("GLCategory");
      sb.append("=");
      sb.append(String.valueOf(this.GLCategory));

      sb.append(", ");

      sb.append("AccountingDate");
      sb.append("=");
      sb.append(String.valueOf(this.AccountingDate));

      sb.append(", ");

      sb.append("Opening");
      sb.append("=");
      sb.append(String.valueOf(this.Opening));

      sb.append(", ");

      sb.append("Alias");
      sb.append("=");
      sb.append(String.valueOf(this.Alias));

      sb.append(", ");

      sb.append("Account");
      sb.append("=");
      sb.append(String.valueOf(this.Account));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("Project");
      sb.append("=");
      sb.append(String.valueOf(this.Project));

      sb.append(", ");

      sb.append("Campaign");
      sb.append("=");
      sb.append(String.valueOf(this.Campaign));

      sb.append(", ");

      sb.append("SalesRegion");
      sb.append("=");
      sb.append(String.valueOf(this.SalesRegion));

      sb.append(", ");

      sb.append("DebitAmount");
      sb.append("=");
      sb.append(String.valueOf(this.DebitAmount));

      sb.append(", ");

      sb.append("CreditAmount");
      sb.append("=");
      sb.append(String.valueOf(this.CreditAmount));

      sb.append(", ");

      sb.append("Tax");
      sb.append("=");
      sb.append(String.valueOf(this.Tax));

      sb.append(", ");

      sb.append("Withholding");
      sb.append("=");
      sb.append(String.valueOf(this.Withholding));

      sb.append(", ");

      sb.append("Activity");
      sb.append("=");
      sb.append(String.valueOf(this.Activity));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap)
      throws TalendException {
    globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

    String currentComponent = "";

    try {

      row1Struct row1 = new row1Struct();
      row2Struct row2 = new row2Struct();
      row4Struct row4 = new row4Struct();
      row5Struct row5 = new row5Struct();
      row6Struct row6 = new row6Struct();
      row29Struct row29 = new row29Struct();
      row3Struct row3 = new row3Struct();

      /**
       * [tJavaRow_16 begin ] start
       */

      ok_Hash.put("tJavaRow_16", false);
      start_Hash.put("tJavaRow_16", System.currentTimeMillis());
      currentComponent = "tJavaRow_16";

      int nb_line_tJavaRow_16 = 0;

      /**
       * [tJavaRow_16 begin ] stop
       */

      /**
       * [tJavaRow_18 begin ] start
       */

      ok_Hash.put("tJavaRow_18", false);
      start_Hash.put("tJavaRow_18", System.currentTimeMillis());
      currentComponent = "tJavaRow_18";

      int nb_line_tJavaRow_18 = 0;

      /**
       * [tJavaRow_18 begin ] stop
       */

      /**
       * [tFilterRow_9 begin ] start
       */

      ok_Hash.put("tFilterRow_9", false);
      start_Hash.put("tFilterRow_9", System.currentTimeMillis());
      currentComponent = "tFilterRow_9";

      int nb_line_tFilterRow_9 = 0;
      int nb_line_ok_tFilterRow_9 = 0;
      int nb_line_reject_tFilterRow_9 = 0;

      /**
       * [tFilterRow_9 begin ] stop
       */

      /**
       * [tJavaRow_3 begin ] start
       */

      ok_Hash.put("tJavaRow_3", false);
      start_Hash.put("tJavaRow_3", System.currentTimeMillis());
      currentComponent = "tJavaRow_3";

      int nb_line_tJavaRow_3 = 0;

      /**
       * [tJavaRow_3 begin ] stop
       */

      /**
       * [tJavaRow_2 begin ] start
       */

      ok_Hash.put("tJavaRow_2", false);
      start_Hash.put("tJavaRow_2", System.currentTimeMillis());
      currentComponent = "tJavaRow_2";

      int nb_line_tJavaRow_2 = 0;

      /**
       * [tJavaRow_2 begin ] stop
       */

      /**
       * [tFilterRow_1 begin ] start
       */

      ok_Hash.put("tFilterRow_1", false);
      start_Hash.put("tFilterRow_1", System.currentTimeMillis());
      currentComponent = "tFilterRow_1";

      int nb_line_tFilterRow_1 = 0;
      int nb_line_ok_tFilterRow_1 = 0;
      int nb_line_reject_tFilterRow_1 = 0;

      /**
       * [tFilterRow_1 begin ] stop
       */

      /**
       * [tJavaRow_1 begin ] start
       */

      ok_Hash.put("tJavaRow_1", false);
      start_Hash.put("tJavaRow_1", System.currentTimeMillis());
      currentComponent = "tJavaRow_1";

      int nb_line_tJavaRow_1 = 0;

      /**
       * [tJavaRow_1 begin ] stop
       */

      /**
       * [tFileInputDelimited_1 begin ] start
       */

      ok_Hash.put("tFileInputDelimited_1", false);
      start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
      currentComponent = "tFileInputDelimited_1";

      int nb_line_tFileInputDelimited_1 = 0;
      int footer_tFileInputDelimited_1 = 0;
      int totalLinetFileInputDelimited_1 = 0;
      int limittFileInputDelimited_1 = -1;
      int lastLinetFileInputDelimited_1 = -1;

      char fieldSeparator_tFileInputDelimited_1[] = null;

      // support passing value (property: Field Separator) by 'context.fs'
      // or 'globalMap.get("fs")'.
      if (((String) ",").length() > 0) {
        fieldSeparator_tFileInputDelimited_1 = ((String) ",").toCharArray();
      } else {
        throw new IllegalArgumentException("Field Separator must be assigned a char.");
      }

      char rowSeparator_tFileInputDelimited_1[] = null;

      // support passing value (property: Row Separator) by 'context.rs'
      // or 'globalMap.get("rs")'.
      if (((String) "\n").length() > 0) {
        rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
      } else {
        throw new IllegalArgumentException("Row Separator must be assigned a char.");
      }

      com.csvreader.CsvReader csvReadertFileInputDelimited_1 = new com.csvreader.CsvReader(
          new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(/**
           * 
           * Start field tFileInputDelimited_1:FILENAME
           */
          context.getProperty("filename")/**
           * End field tFileInputDelimited_1:FILENAME
           */
          ), "UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);

      if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
          && (rowSeparator_tFileInputDelimited_1[0] != '\r'))
        csvReadertFileInputDelimited_1.setRecordDelimiter(rowSeparator_tFileInputDelimited_1[0]);

      csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
      csvReadertFileInputDelimited_1.setTextQualifier('"');

      csvReadertFileInputDelimited_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      String[] rowtFileInputDelimited_1 = null;

      if (footer_tFileInputDelimited_1 > 0) {

        while (csvReadertFileInputDelimited_1.readRecord()) {
          rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();
          if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
              .equals(rowtFileInputDelimited_1[0]))) {// empty
                                                      // line when
                                                      // row
                                                      // separator
                                                      // is '\n'

            totalLinetFileInputDelimited_1++;

          }

        }
        int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
            - footer_tFileInputDelimited_1 < 0 ? 0 : totalLinetFileInputDelimited_1
            - footer_tFileInputDelimited_1;
        if (lastLinetFileInputDelimited_1 > 0) {
          lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
              : lastLineTemptFileInputDelimited_1;
        } else {
          lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
        }

        csvReadertFileInputDelimited_1.close();

        csvReadertFileInputDelimited_1 = new com.csvreader.CsvReader(new java.io.BufferedReader(
            new java.io.InputStreamReader(new java.io.FileInputStream(/**
             * Start field
             * tFileInputDelimited_1:FILENAME
             */
            context.getProperty("filename")/**
             * End field tFileInputDelimited_1:FILENAME
             */
            ), "UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);

        if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
            && (rowSeparator_tFileInputDelimited_1[0] != '\r'))
          csvReadertFileInputDelimited_1.setRecordDelimiter(rowSeparator_tFileInputDelimited_1[0]);
        csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
        csvReadertFileInputDelimited_1.setTextQualifier('"');
        csvReadertFileInputDelimited_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      }

      int currentLinetFileInputDelimited_1 = 0;
      int outputLinetFileInputDelimited_1 = 0;

      while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1.readRecord()) {

        rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

        if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
                                                                                                   // line
                                                                                                   // when
                                                                                                   // row
                                                                                                   // separator
                                                                                                   // is
                                                                                                   // '\n'
          continue;
        }

        currentLinetFileInputDelimited_1++;
        if (currentLinetFileInputDelimited_1 < 1 + 1) {
          continue;
        }

        if (lastLinetFileInputDelimited_1 > -1
            && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
          break;
        }
        outputLinetFileInputDelimited_1++;
        if (limittFileInputDelimited_1 > 0
            && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
          break;
        }

        row1 = null;
        row1 = new row1Struct();
        try {

          if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
                                                                                                     // line
                                                                                                     // when
                                                                                                     // row
                                                                                                     // separator
                                                                                                     // is
                                                                                                     // '\n'

            row1.Organization = null;

            row1.TransactionalOrganization = null;

            row1.JournalName = null;

            row1.JournalLineDescription = null;

            row1.Currency = null;

            row1.AcctSchema = null;

            row1.GLCategory = null;

            row1.AccountingDate = null;

            row1.Opening = null;

            row1.Alias = null;

            row1.Account = null;

            row1.Product = null;

            row1.BusinessPartner = null;

            row1.Project = null;

            row1.Campaign = null;

            row1.SalesRegion = null;

            row1.DebitAmount = null;

            row1.CreditAmount = null;

            row1.Tax = null;

            row1.Withholding = null;

            row1.Activity = null;

          } else {

            if (0 < rowtFileInputDelimited_1.length) {
              row1.Organization = rowtFileInputDelimited_1[0].trim();

            } else {
              row1.Organization = null;
            }

            if (1 < rowtFileInputDelimited_1.length) {
              row1.TransactionalOrganization = rowtFileInputDelimited_1[1].trim();

            } else {
              row1.TransactionalOrganization = null;
            }

            if (2 < rowtFileInputDelimited_1.length) {
              row1.JournalName = rowtFileInputDelimited_1[2].trim();

            } else {
              row1.JournalName = null;
            }

            if (3 < rowtFileInputDelimited_1.length) {
              row1.JournalLineDescription = rowtFileInputDelimited_1[3].trim();

            } else {
              row1.JournalLineDescription = null;
            }

            if (4 < rowtFileInputDelimited_1.length) {
              row1.Currency = rowtFileInputDelimited_1[4].trim();

            } else {
              row1.Currency = null;
            }

            if (5 < rowtFileInputDelimited_1.length) {
              row1.AcctSchema = rowtFileInputDelimited_1[5].trim();

            } else {
              row1.AcctSchema = null;
            }

            if (6 < rowtFileInputDelimited_1.length) {
              row1.GLCategory = rowtFileInputDelimited_1[6].trim();

            } else {
              row1.GLCategory = null;
            }

            if (7 < rowtFileInputDelimited_1.length) {
              row1.AccountingDate = rowtFileInputDelimited_1[7].trim();

            } else {
              row1.AccountingDate = null;
            }

            if (8 < rowtFileInputDelimited_1.length) {
              row1.Opening = rowtFileInputDelimited_1[8].trim();

            } else {
              row1.Opening = null;
            }

            if (9 < rowtFileInputDelimited_1.length) {
              row1.Alias = rowtFileInputDelimited_1[9].trim();

            } else {
              row1.Alias = null;
            }

            if (10 < rowtFileInputDelimited_1.length) {
              row1.Account = rowtFileInputDelimited_1[10].trim();

            } else {
              row1.Account = null;
            }

            if (11 < rowtFileInputDelimited_1.length) {
              row1.Product = rowtFileInputDelimited_1[11].trim();

            } else {
              row1.Product = null;
            }

            if (12 < rowtFileInputDelimited_1.length) {
              row1.BusinessPartner = rowtFileInputDelimited_1[12].trim();

            } else {
              row1.BusinessPartner = null;
            }

            if (13 < rowtFileInputDelimited_1.length) {
              row1.Project = rowtFileInputDelimited_1[13].trim();

            } else {
              row1.Project = null;
            }

            if (14 < rowtFileInputDelimited_1.length) {
              row1.Campaign = rowtFileInputDelimited_1[14].trim();

            } else {
              row1.Campaign = null;
            }

            if (15 < rowtFileInputDelimited_1.length) {
              row1.SalesRegion = rowtFileInputDelimited_1[15].trim();

            } else {
              row1.SalesRegion = null;
            }

            if (16 < rowtFileInputDelimited_1.length) {
              row1.DebitAmount = rowtFileInputDelimited_1[16].trim();

            } else {
              row1.DebitAmount = null;
            }

            if (17 < rowtFileInputDelimited_1.length) {
              row1.CreditAmount = rowtFileInputDelimited_1[17].trim();

            } else {
              row1.CreditAmount = null;
            }

            if (18 < rowtFileInputDelimited_1.length) {
              row1.Tax = rowtFileInputDelimited_1[18].trim();

            } else {
              row1.Tax = null;
            }

            if (19 < rowtFileInputDelimited_1.length) {
              row1.Withholding = rowtFileInputDelimited_1[19].trim();

            } else {
              row1.Withholding = null;
            }

            if (20 < rowtFileInputDelimited_1.length) {
              row1.Activity = rowtFileInputDelimited_1[20].trim();

            } else {
              row1.Activity = null;
            }

          }

        } catch (Exception e) {
          System.err.println(e.getMessage());
          row1 = null;
        }

        /**
         * [tFileInputDelimited_1 begin ] stop
         */
        /**
         * [tFileInputDelimited_1 main ] start
         */

        currentComponent = "tFileInputDelimited_1";

        /**
         * [tFileInputDelimited_1 main ] stop
         */
        // Start of branch "row1"
        if (row1 != null) {

          /**
           * [tJavaRow_1 main ] start
           */

          currentComponent = "tJavaRow_1";

          org.openbravo.idl.proc.IdlService service = org.openbravo.idl.proc.IdlIntService
              .getInstance().getService("JournalEntry");
          org.openbravo.idl.proc.Validator validator = service.getValidator("JournalEntry");

          row2.flag = "0";
          row2.whyError = "";

          // VALIDATION
          row2.Organization = validator.checkOrganization(row1.Organization);

          row2.TransactionalOrganization = validator
              .checkTransactionalOrganization(row1.TransactionalOrganization);

          row2.JournalName = validator.checkNotNull(validator.checkString(row1.JournalName, 255),
              "JournalName");

          row2.JournalLineDescription = validator.checkNotNull(
              validator.checkString(row1.JournalLineDescription, 255), "JournalLineDescription");

          row2.Currency = validator.checkNotNull(
              validator.checkString(row1.Currency, 3, "Currency"), "Currency");

          row2.AcctSchema = validator.checkNotNull(
              validator.checkString(row1.AcctSchema, 60, "AccountingSchema"), "AcctSchema");

          row2.GLCategory = validator.checkNotNull(
              validator.checkString(row1.GLCategory, 60, "GLCategory"), "GLCategory");

          row2.AccountingDate = validator.checkNotNull(validator.checkDate(row1.AccountingDate),
              "AccountingDate");

          row2.Opening = validator.checkBoolean(row1.Opening);

          row2.Alias = validator.checkString(row1.Alias, 40);

          row2.Account = validator.checkNotNull(validator.checkString(row1.Account, 40), "Account");

          row2.Product = validator.checkString(row1.Product, 40);

          row2.BusinessPartner = validator.checkString(row1.BusinessPartner, 40);

          row2.Project = validator.checkString(row1.Project, 40);

          row2.Campaign = validator.checkString(row1.Campaign, 40);

          row2.SalesRegion = validator.checkString(row1.SalesRegion, 40);

          row2.DebitAmount = validator.checkBigDecimal(row1.DebitAmount);

          row2.CreditAmount = validator.checkBigDecimal(row1.CreditAmount);

          row2.Tax = validator.checkString(row1.Tax, 125);

          row2.Withholding = validator.checkString(row1.Withholding, 60);

          row2.Activity = validator.checkString(row1.Activity, 40);

          row2.flag = validator.getErrorCode();
          row2.whyError = validator.getErrorMessage();

          nb_line_tJavaRow_1++;

          /**
           * [tJavaRow_1 main ] stop
           */

          /**
           * [tFilterRow_1 main ] start
           */

          currentComponent = "tFilterRow_1";

          row4 = null;
          row3 = null;

          if (

          (row2.flag == null ? false : row2.flag.toLowerCase().compareTo("0") == 0)

          )

          {
            if (row4 == null) {
              row4 = new row4Struct();
            }
            row4.Organization = row2.Organization;
            row4.TransactionalOrganization = row2.TransactionalOrganization;
            row4.JournalName = row2.JournalName;
            row4.JournalLineDescription = row2.JournalLineDescription;
            row4.Currency = row2.Currency;
            row4.AcctSchema = row2.AcctSchema;
            row4.GLCategory = row2.GLCategory;
            row4.AccountingDate = row2.AccountingDate;
            row4.Opening = row2.Opening;
            row4.Alias = row2.Alias;
            row4.Account = row2.Account;
            row4.Product = row2.Product;
            row4.BusinessPartner = row2.BusinessPartner;
            row4.Project = row2.Project;
            row4.Campaign = row2.Campaign;
            row4.SalesRegion = row2.SalesRegion;
            row4.DebitAmount = row2.DebitAmount;
            row4.CreditAmount = row2.CreditAmount;
            row4.Tax = row2.Tax;
            row4.Withholding = row2.Withholding;
            row4.Activity = row2.Activity;
            row4.flag = row2.flag;
            row4.whyError = row2.whyError;
            nb_line_ok_tFilterRow_1++;
          } else {
            if (row3 == null) {
              row3 = new row3Struct();
            }
            row3.Organization = row2.Organization;
            row3.TransactionalOrganization = row2.TransactionalOrganization;
            row3.JournalName = row2.JournalName;
            row3.JournalLineDescription = row2.JournalLineDescription;
            row3.Currency = row2.Currency;
            row3.AcctSchema = row2.AcctSchema;
            row3.GLCategory = row2.GLCategory;
            row3.AccountingDate = row2.AccountingDate;
            row3.Opening = row2.Opening;
            row3.Alias = row2.Alias;
            row3.Account = row2.Account;
            row3.Product = row2.Product;
            row3.BusinessPartner = row2.BusinessPartner;
            row3.Project = row2.Project;
            row3.Campaign = row2.Campaign;
            row3.SalesRegion = row2.SalesRegion;
            row3.DebitAmount = row2.DebitAmount;
            row3.CreditAmount = row2.CreditAmount;
            row3.Tax = row2.Tax;
            row3.Withholding = row2.Withholding;
            row3.Activity = row2.Activity;
            row3.flag = row2.flag;
            row3.whyError = row2.whyError;
            nb_line_reject_tFilterRow_1++;
          }
          nb_line_tFilterRow_1++;

          /**
           * [tFilterRow_1 main ] stop
           */
          // Start of branch "row4"
          if (row4 != null) {

            /**
             * [tJavaRow_3 main ] start
             */

            currentComponent = "tJavaRow_3";

            row5.flag = "0";
            row5.whyError = "";

            row5.Organization = row4.Organization;
            row5.TransactionalOrganization = row4.TransactionalOrganization;
            row5.JournalName = row4.JournalName;
            row5.JournalLineDescription = row4.JournalLineDescription;

            row5.Currency = row4.Currency;
            Currency cur = service.findDALInstance(true, Currency.class, new Value(
                Currency.PROPERTY_ISOCODE, row4.Currency));
            if (cur == null) {
              row5.flag = "-1";
              row5.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.Currency
                  + "\n";
            }

            row5.AcctSchema = row4.AcctSchema;
            AcctSchema as = service.findDALInstance(true, AcctSchema.class, new Value(
                AcctSchema.PROPERTY_NAME, row4.AcctSchema));
            if (as == null) {
              row5.flag = "-1";
              row5.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.AcctSchema
                  + "\n";
            }

            row5.GLCategory = row4.GLCategory;
            GLCategory glCat = service.findDALInstance(true, GLCategory.class, new Value(
                GLCategory.PROPERTY_NAME, row4.GLCategory));
            if (glCat == null) {
              row5.flag = "-1";
              row5.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.GLCategory
                  + "\n";
            }

            row5.AccountingDate = row4.AccountingDate;
            row5.Opening = row4.Opening;
            row5.Alias = row4.Alias;

            row5.Account = row4.Account;
            if (row4.Account != null) {
              ElementValue eleVal = service.findDALInstance(true, ElementValue.class, new Value(
                  ElementValue.PROPERTY_SEARCHKEY, row4.Account), new Value(
                  ElementValue.PROPERTY_ELEMENTLEVEL, "S"));
              if (eleVal == null) {
                row5.flag = "-1";
                row5.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.Account
                    + "\n";
              }
            }

            row5.Product = row4.Product;
            if (row4.Product != null) {
              Product pro = service.findDALInstance(true, Product.class, new Value(
                  Product.PROPERTY_SEARCHKEY, row4.Product));
              if (pro == null) {
                row5.flag = "-1";
                row5.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.Product
                    + "\n";
              }
            }

            row5.BusinessPartner = row4.BusinessPartner;
            if (row4.BusinessPartner != null) {
              BusinessPartner bp = service.findDALInstance(true, BusinessPartner.class, new Value(
                  BusinessPartner.PROPERTY_SEARCHKEY, row4.BusinessPartner));
              if (bp == null) {
                row5.flag = "-1";
                row5.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE")
                    + row4.BusinessPartner + "\n";
              }
            }

            row5.Project = row4.Project;
            if (row4.Project != null) {
              Project project = service.findDALInstance(true, Project.class, new Value(
                  Project.PROPERTY_SEARCHKEY, row4.Project));
              if (project == null) {
                row5.flag = "-1";
                row5.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.Project
                    + "\n";
              }
            }

            row5.Campaign = row4.Campaign;
            if (row4.Campaign != null) {
              Campaign camp = service.findDALInstance(true, Campaign.class, new Value(
                  Campaign.PROPERTY_SEARCHKEY, row4.Campaign));
              if (camp == null) {
                row5.flag = "-1";
                row5.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.Campaign
                    + "\n";
              }
            }

            row5.SalesRegion = row4.SalesRegion;
            if (row4.SalesRegion != null) {
              SalesRegion sr = service.findDALInstance(true, SalesRegion.class, new Value(
                  SalesRegion.PROPERTY_SEARCHKEY, row4.SalesRegion));
              if (sr == null) {
                row5.flag = "-1";
                row5.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.SalesRegion
                    + "\n";
              }
            }

            row5.DebitAmount = row4.DebitAmount;
            row5.CreditAmount = row4.CreditAmount;

            row5.Tax = row4.Tax;
            if (row4.Tax != null) {
              TaxRate tr = service.findDALInstance(true, TaxRate.class, new Value(
                  TaxRate.PROPERTY_NAME, row4.Tax));
              if (tr == null) {
                row5.flag = "-1";
                row5.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.Tax + "\n";
              }
            }

            row5.Withholding = row4.Withholding;
            if (row4.Withholding != null) {
              Withholding with = service.findDALInstance(true, Withholding.class, new Value(
                  Withholding.PROPERTY_NAME, row4.Withholding));
              if (with == null) {
                row5.flag = "-1";
                row5.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.Withholding
                    + "\n";
              }
            }

            row5.Activity = row4.Activity;
            if (row4.Activity != null) {
              ABCActivity activity = service.findDALInstance(true, ABCActivity.class, new Value(
                  ABCActivity.PROPERTY_SEARCHKEY, row4.Activity));
              if (activity == null) {
                row5.flag = "-1";
                row5.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.Activity
                    + "\n";
              }
            }

            nb_line_tJavaRow_3++;

            /**
             * [tJavaRow_3 main ] stop
             */

            /**
             * [tFilterRow_9 main ] start
             */

            currentComponent = "tFilterRow_9";

            row6 = null;
            row29 = null;

            if (

            (row5.flag == null ? false : row5.flag.toLowerCase().compareTo("0") == 0)

            )

            {
              if (row6 == null) {
                row6 = new row6Struct();
              }
              row6.Organization = row5.Organization;
              row6.TransactionalOrganization = row5.TransactionalOrganization;
              row6.JournalName = row5.JournalName;
              row6.JournalLineDescription = row5.JournalLineDescription;
              row6.Currency = row5.Currency;
              row6.AcctSchema = row5.AcctSchema;
              row6.GLCategory = row5.GLCategory;
              row6.AccountingDate = row5.AccountingDate;
              row6.Opening = row5.Opening;
              row6.Alias = row5.Alias;
              row6.Account = row5.Account;
              row6.Product = row5.Product;
              row6.BusinessPartner = row5.BusinessPartner;
              row6.Project = row5.Project;
              row6.Campaign = row5.Campaign;
              row6.SalesRegion = row5.SalesRegion;
              row6.DebitAmount = row5.DebitAmount;
              row6.CreditAmount = row5.CreditAmount;
              row6.Tax = row5.Tax;
              row6.Withholding = row5.Withholding;
              row6.Activity = row5.Activity;
              row6.flag = row5.flag;
              row6.whyError = row5.whyError;
              nb_line_ok_tFilterRow_9++;
            } else {
              if (row29 == null) {
                row29 = new row29Struct();
              }
              row29.Organization = row5.Organization;
              row29.TransactionalOrganization = row5.TransactionalOrganization;
              row29.JournalName = row5.JournalName;
              row29.JournalLineDescription = row5.JournalLineDescription;
              row29.Currency = row5.Currency;
              row29.AcctSchema = row5.AcctSchema;
              row29.GLCategory = row5.GLCategory;
              row29.AccountingDate = row5.AccountingDate;
              row29.Opening = row5.Opening;
              row29.Alias = row5.Alias;
              row29.Account = row5.Account;
              row29.Product = row5.Product;
              row29.BusinessPartner = row5.BusinessPartner;
              row29.Project = row5.Project;
              row29.Campaign = row5.Campaign;
              row29.SalesRegion = row5.SalesRegion;
              row29.DebitAmount = row5.DebitAmount;
              row29.CreditAmount = row5.CreditAmount;
              row29.Tax = row5.Tax;
              row29.Withholding = row5.Withholding;
              row29.Activity = row5.Activity;
              row29.flag = row5.flag;
              row29.whyError = row5.whyError;
              nb_line_reject_tFilterRow_9++;
            }
            nb_line_tFilterRow_9++;

            /**
             * [tFilterRow_9 main ] stop
             */
            // Start of branch "row6"
            if (row6 != null) {

              /**
               * [tJavaRow_16 main ] start
               */

              currentComponent = "tJavaRow_16";

              service.finishRecordProcess(row6.Organization, row6.TransactionalOrganization,
                  row6.JournalName, row6.JournalLineDescription, row6.Currency, row6.AcctSchema,
                  row6.GLCategory, row6.AccountingDate, row6.Opening, row6.Alias, row6.Account,
                  row6.Product, row6.BusinessPartner, row6.Project, row6.Campaign,
                  row6.SalesRegion, row6.DebitAmount, row6.CreditAmount, row6.Tax,
                  row6.Withholding, row6.Activity);
              nb_line_tJavaRow_16++;

              /**
               * [tJavaRow_16 main ] stop
               */

            } // End of branch "row6"

            // Start of branch "row29"
            if (row29 != null) {

              /**
               * [tJavaRow_18 main ] start
               */

              currentComponent = "tJavaRow_18";

              service.logRecordError(row29.whyError, row29.Organization,
                  row29.TransactionalOrganization, row29.JournalName, row29.JournalLineDescription,
                  row29.Currency, row29.AcctSchema, row29.GLCategory, row29.AccountingDate,
                  row29.Opening, row29.Alias, row29.Account, row29.Product, row29.BusinessPartner,
                  row29.Project, row29.Campaign, row29.SalesRegion, row29.DebitAmount,
                  row29.CreditAmount, row29.Tax, row29.Withholding, row29.Activity);

              nb_line_tJavaRow_18++;

              /**
               * [tJavaRow_18 main ] stop
               */

            } // End of branch "row29"

          } // End of branch "row4"

          // Start of branch "row3"
          if (row3 != null) {

            /**
             * [tJavaRow_2 main ] start
             */

            currentComponent = "tJavaRow_2";

            service.logRecordError(row3.whyError, row3.Organization,
                row3.TransactionalOrganization, row3.JournalName, row3.JournalLineDescription,
                row3.Currency, row3.AcctSchema, row3.GLCategory, row3.AccountingDate, row3.Opening,
                row3.Alias, row3.Account, row3.Product, row3.BusinessPartner, row3.Project,
                row3.Campaign, row3.SalesRegion, row3.DebitAmount, row3.CreditAmount, row3.Tax,
                row3.Withholding, row3.Activity);
            nb_line_tJavaRow_2++;

            /**
             * [tJavaRow_2 main ] stop
             */

          } // End of branch "row3"

        } // End of branch "row1"

        /**
         * [tFileInputDelimited_1 end ] start
         */

        currentComponent = "tFileInputDelimited_1";

        nb_line_tFileInputDelimited_1++;
      }
      csvReadertFileInputDelimited_1.close();
      globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);

      ok_Hash.put("tFileInputDelimited_1", true);
      end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

      /**
       * [tFileInputDelimited_1 end ] stop
       */

      /**
       * [tJavaRow_1 end ] start
       */

      currentComponent = "tJavaRow_1";

      globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

      ok_Hash.put("tJavaRow_1", true);
      end_Hash.put("tJavaRow_1", System.currentTimeMillis());

      /**
       * [tJavaRow_1 end ] stop
       */

      /**
       * [tFilterRow_1 end ] start
       */

      currentComponent = "tFilterRow_1";

      globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
      globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
      globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

      ok_Hash.put("tFilterRow_1", true);
      end_Hash.put("tFilterRow_1", System.currentTimeMillis());

      /**
       * [tFilterRow_1 end ] stop
       */

      /**
       * [tJavaRow_3 end ] start
       */

      currentComponent = "tJavaRow_3";

      globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

      ok_Hash.put("tJavaRow_3", true);
      end_Hash.put("tJavaRow_3", System.currentTimeMillis());

      /**
       * [tJavaRow_3 end ] stop
       */

      /**
       * [tFilterRow_9 end ] start
       */

      currentComponent = "tFilterRow_9";

      globalMap.put("tFilterRow_9_NB_LINE", nb_line_tFilterRow_9);
      globalMap.put("tFilterRow_9_NB_LINE_OK", nb_line_ok_tFilterRow_9);
      globalMap.put("tFilterRow_9_NB_LINE_REJECT", nb_line_reject_tFilterRow_9);

      ok_Hash.put("tFilterRow_9", true);
      end_Hash.put("tFilterRow_9", System.currentTimeMillis());

      /**
       * [tFilterRow_9 end ] stop
       */

      /**
       * [tJavaRow_16 end ] start
       */

      currentComponent = "tJavaRow_16";

      globalMap.put("tJavaRow_16_NB_LINE", nb_line_tJavaRow_16);

      ok_Hash.put("tJavaRow_16", true);
      end_Hash.put("tJavaRow_16", System.currentTimeMillis());

      /**
       * [tJavaRow_16 end ] stop
       */

      /**
       * [tJavaRow_18 end ] start
       */

      currentComponent = "tJavaRow_18";

      globalMap.put("tJavaRow_18_NB_LINE", nb_line_tJavaRow_18);

      ok_Hash.put("tJavaRow_18", true);
      end_Hash.put("tJavaRow_18", System.currentTimeMillis());

      /**
       * [tJavaRow_18 end ] stop
       */

      /**
       * [tJavaRow_2 end ] start
       */

      currentComponent = "tJavaRow_2";

      globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

      ok_Hash.put("tJavaRow_2", true);
      end_Hash.put("tJavaRow_2", System.currentTimeMillis());

      /**
       * [tJavaRow_2 end ] stop
       */

    } catch (Exception e) {

      throw new TalendException(e, currentComponent, globalMap);

    }

    globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
  }

  public boolean watch = false;
  public int portStats = 3334;
  public int portTraces = 4334;
  public String clientHost;
  public String defaultClientHost = "localhost";
  public String contextStr = "Default";
  public String pid = "0";
  public String rootPid = null;
  public String fatherPid = null;
  public long startTime = 0;
  public boolean isChildJob = false;

  private ThreadLocal threadLocal = new ThreadLocal();
  {
    java.util.Map threadRunResultMap = new java.util.HashMap();
    threadRunResultMap.put("errorCode", null);
    threadRunResultMap.put("status", "");
    threadLocal.set(threadRunResultMap);
  }

  private java.util.Properties context_param = new java.util.Properties();

  public String status = "";

  public static void main(String[] args) {
    final JournalEntryJob JournalEntryJobClass = new JournalEntryJob();

    int exitCode = JournalEntryJobClass.runJobInTOS(args);

    System.exit(exitCode);
  }

  public String[][] runJob(String[] args) {

    int exitCode = runJobInTOS(args);
    String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

    return bufferValue;
  }

  private int runJobInTOS(String[] args) {

    String lastStr = "";
    for (String arg : args) {
      if (arg.equalsIgnoreCase("--context_param")) {
        lastStr = arg;
      } else if (lastStr.equals("")) {
        evalParam(arg);
      } else {
        evalParam(lastStr + " " + arg);
        lastStr = "";
      }
    }

    if (clientHost == null) {
      clientHost = defaultClientHost;
    }

    if (pid == null || "0".equals(pid)) {
      pid = TalendString.getAsciiRandomString(6);
    }

    if (rootPid == null) {
      rootPid = pid;
    }
    if (fatherPid == null) {
      fatherPid = pid;
    } else {
      isChildJob = true;
    }

    try {
      java.io.InputStream inContext = JournalEntryJob.class.getClassLoader().getResourceAsStream(
          "initial_data_load/journalentryjob_0_1/contexts/Default.properties");
      if (inContext != null) {
        defaultProps.load(inContext);
        inContext.close();
        context = new ContextProperties(defaultProps);
      }

      if (contextStr.compareTo("Default") != 0) {
        inContext = JournalEntryJob.class.getClassLoader().getResourceAsStream(
            "initial_data_load/journalentryjob_0_1/contexts/" + contextStr + ".properties");
        if (inContext != null) {
          context.load(inContext);
          inContext.close();
        }
      }

      if (!context_param.isEmpty()) {
        context.putAll(context_param);
      }

      context.executeInsert = (String) context.getProperty("executeInsert");

      context.filename = (String) context.getProperty("filename");

    } catch (java.io.IOException ie) {
      System.err.println("Could not load context " + contextStr);
      ie.printStackTrace();
    }

    long end = 0;

    startTime = System.currentTimeMillis();

    try {
      errorCode = null;
      tFileInputDelimited_1Process(globalMap);
      status = "end";
    } catch (TalendException e_tFileInputDelimited_1) {
      status = "failure";
      e_tFileInputDelimited_1.printStackTrace();
      globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

    } finally {
    }

    end = System.currentTimeMillis();

    if (watch) {
      System.out.println((end - startTime) + " milliseconds");
    }

    if (errorCode == null) {
      return status != null && status.equals("failure") ? 1 : 0;
    } else {
      return errorCode.intValue();
    }
  }

  private void evalParam(String arg) {
    if (arg.startsWith("--watch")) {
      watch = true;
    } else if (arg.startsWith("--stat_port=")) {
      portStats = Integer.parseInt(arg.substring(12));
    } else if (arg.startsWith("--trace_port=")) {
      portTraces = Integer.parseInt(arg.substring(13));
    } else if (arg.startsWith("--client_host=")) {
      clientHost = arg.substring(14);
    } else if (arg.startsWith("--context=")) {
      contextStr = arg.substring(10);
    } else if (arg.startsWith("--father_pid=")) {
      fatherPid = arg.substring(13);
    } else if (arg.startsWith("--root_pid=")) {
      rootPid = arg.substring(11);
    } else if (arg.startsWith("--pid=")) {
      pid = arg.substring(6);
    } else if (arg.startsWith("--context_param")) {
      String keyValue = arg.substring(16);
      int index = -1;
      if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
        context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
      }
    }

  }

  public Integer getErrorCode() {
    return errorCode;
  }

  public String getStatus() {
    return status;
  }
}
/************************************************************************************************
 * 224580 characters generated by Talend Open Studio on the July 18, 2011 1:42:26 PM CEST
 ************************************************************************************************/
