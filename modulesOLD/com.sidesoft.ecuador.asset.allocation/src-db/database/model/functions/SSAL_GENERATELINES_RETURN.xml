<?xml version="1.0"?>
  <database name="FUNCTION SSAL_GENERATELINES_RETURN">
    <function name="SSAL_GENERATELINES_RETURN" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[TYPE RECORD IS REF CURSOR;
Cur_Parameter RECORD;  
  CUR_ACTIVE RECORD;
  Cur_Concept RECORD;
  Cur_Validar0 RECORD;
  CUR_PROCESSPAYROOLL RECORD;

  v_Client_ID VARCHAR2(32);
  v_Org_ID VARCHAR2(32);
  v_User_ID VARCHAR2(32) ;
  
  v_ResultStr VARCHAR2(2000) := '';
  V_ASSET_RETURN_ID VARCHAR2(32);
  v_Processed VARCHAR2(60);
  v_Ticket_ID VARCHAR2(32); 
  v_Period_ID VARCHAR2(32);   
  v_Concept_ID VARCHAR2(32);
  V_BPARTNER_ID VARCHAR2(60);
  v_payroll_type VARCHAR2(32);   
  
  v_n_insertions NUMBER;
  v_Message VARCHAR2(2000):='';

--  --valornull_exception  Exception;
  v_amount NUMBER;
  V_AMOUNT_CONCEP NUMBER;
  
  v_value NUMBER;

  v_isliquidation CHARACTER(1);       --OBTG:VARCHAR2--
  v_c_partner_id_payroll VARCHAR2(32);
BEGIN
  --  Update AD_PInstance
  DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || PInstance_ID) ;
  v_ResultStr := 'PInstanceNotFound';
  AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;

  BEGIN --BODY

    -- Get Parameters
    v_ResultStr := 'ReadingParameters';
    v_n_insertions := 0;
    
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID, 
        i.AD_Client_ID,
        i.AD_Org_ID                    
      FROM AD_PInstance i      
      WHERE i.AD_PInstance_ID = PInstance_ID      
      )
    LOOP

      V_ASSET_RETURN_ID := Cur_Parameter.Record_ID;	  
     /* v_Client_ID := Cur_Parameter.AD_Client_ID;
      v_Org_ID := Cur_Parameter.AD_Org_ID;
      v_User_ID := Cur_Parameter.AD_User_ID;  */   
      
    END LOOP; -- Get Parameter

    --ELIMINO DATOS EXISTENTES 
    DELETE FROM ssal_asset_returnline WHERE SSAL_ASSET_RETURN_ID = V_ASSET_RETURN_ID;
    
    --OBTENGO DATOS GENERALES 
    SELECT AD_CLIENT_ID INTO v_Client_ID FROM SSAL_ASSET_RETURN WHERE SSAL_ASSET_RETURN_ID = V_ASSET_RETURN_ID;
    SELECT AD_ORG_ID INTO v_Org_ID FROM SSAL_ASSET_RETURN WHERE SSAL_ASSET_RETURN_ID = V_ASSET_RETURN_ID;
    SELECT CREATEDBY INTO v_User_ID FROM SSAL_ASSET_RETURN WHERE SSAL_ASSET_RETURN_ID = V_ASSET_RETURN_ID;
    SELECT C_BPARTNER_ID INTO V_BPARTNER_ID FROM SSAL_ASSET_RETURN WHERE SSAL_ASSET_RETURN_ID = V_ASSET_RETURN_ID;
    
    --OBTENGO DATOS DEL ACTIVO
    FOR CUR_ACTIVE IN 
    (
	SELECT SSAL_APPL_ACTIVE_ID, ssal_building_id, ssal_unit_id, ssal_department_id, c_costcenter_id, user1_id, user2_id,
	a_asset_group_id,a_asset_cod_id,a_asset_upc_id,a_asset_description_id
	FROM SSAL_APPL_ACTIVE
	WHERE ISACTIVE = 'Y' AND STATE='3' AND PROCESSED = 'Y'
	AND ENDDATE IS NULL AND IS_RETURN='N' 
	AND C_CUSTODIAN_ID = V_BPARTNER_ID  --'8BD636D3BF7047F3A1ADA430D69EC033';
    )
    LOOP
             --raise exception '%','funcion2 '||V_BPARTNER_ID||' '||v_Client_ID||' '|| v_Org_ID||' '||v_User_ID;
	INSERT INTO ssal_asset_returnline(
            ssal_asset_returnline_id, ad_client_id, ad_org_id, created, createdby, 
            updated, updatedby, isactive, ssal_asset_return_id, ssal_appl_active_id, 
            tranfer, ssal_building_id, ssal_unit_id, ssal_department_id, 
            c_costcenter_id, user1_id, user2_id,
            a_asset_group_id,a_asset_cod_id,a_asset_upc_id,a_asset_description_id)
	VALUES (GET_UUID(), v_Client_ID, v_Org_ID, now(), v_User_ID, 
            now(), v_User_ID, 'Y', V_ASSET_RETURN_ID, CUR_ACTIVE.SSAL_APPL_ACTIVE_ID, 
            'N', CUR_ACTIVE.ssal_building_id, CUR_ACTIVE.ssal_unit_id, CUR_ACTIVE.ssal_department_id, 
            CUR_ACTIVE.c_costcenter_id, CUR_ACTIVE.user1_id, CUR_ACTIVE.user2_id,
            CUR_ACTIVE.a_asset_group_id,CUR_ACTIVE.a_asset_cod_id,CUR_ACTIVE.a_asset_upc_id,CUR_ACTIVE.a_asset_description_id);
            --raise exception '%','funcion3';

       v_n_insertions:= v_n_insertions +1;
    END LOOP;

    
    v_Message := '@RowsInserted@: ' || v_n_insertions || '.';
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
    
  END; --BODY
  EXCEPTION
  WHEN OTHERS THEN
    v_ResultStr:= '@ERROR=' || SQLERRM;

    DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
    RETURN;
END SSAL_GENERATELINES_RETURN
]]></body>
    </function>
  </database>
