<?xml version="1.0"?>
  <database name="FUNCTION SFB_GETLOGLINES">
    <function name="SFB_GETLOGLINES" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[TYPE RECORD IS REF CURSOR;
  Cur_Parameter RECORD;

  v_Client_ID VARCHAR2(32);
  v_Org_ID VARCHAR2(32);
  v_User_ID VARCHAR2(32) ;
  v_Record_Id  Varchar2(32);
  
  v_ResultStr VARCHAR2(2000) := '';  

  v_n_insertions NUMBER;
  v_Message VARCHAR2(2000):='';
  
  v_GetLines SFB_BUDGET_LOG.GetLines%TYPE;
  v_LogOrg_ID VARCHAR2(32);
  v_Type SFB_BUDGET_LOG.Type%TYPE;
  v_TypeOfBudget SFB_BUDGET_LOG.Type_Of_Budget%TYPE;
  v_Year_ID VARCHAR2(32);
  v_CostCenterFrom_ID VARCHAR2(32);
  v_CostCenterTo_ID VARCHAR2(32);
  v_User1From_ID VARCHAR2(32);
  v_User1To_ID VARCHAR2(32);
  v_BudgetAreaFrom_ID VARCHAR2(32);
  v_BudgetAreaTo_ID VARCHAR2(32);
  v_BudgetItemFrom_ID VARCHAR2(32);
  v_BudgetItemTo_ID VARCHAR2(32);

  v_BudgetLineFrom_ID VARCHAR2(32) := NULL;
  v_BudgetLineTo_ID VARCHAR2(32);

BEGIN
  --  Update AD_PInstance
  DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || PInstance_ID) ;
  v_ResultStr := 'PInstanceNotFound';
  AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;

  BEGIN --BODY

    -- Get Parameters
    v_ResultStr := 'ReadingParameters';
    v_n_insertions := 0;  

    FOR Cur_Parameter IN
    (
      SELECT  i.Record_ID,
              i.AD_User_ID,
              i.AD_Client_ID,
              i.AD_Org_ID
      FROM  AD_PInstance i      
      WHERE i.AD_PInstance_ID = PInstance_ID      
    )
    LOOP
    
      v_Record_ID := Cur_Parameter.Record_ID;      
      v_Client_ID := Cur_Parameter.AD_Client_ID;
      v_Org_ID := Cur_Parameter.AD_Org_ID;
      v_User_ID := Cur_Parameter.AD_User_ID;     
      
    END LOOP; -- End Get Parameter

    -- Get Log Data
    SELECT  blg.getlines,
            blg.ad_org_id,
            blg.type,
            blg.type_of_budget,
            blg.c_year_id,
            blg.c_costcenter_id,
            blg.c_costcenter_to_id,
            blg.user1_id,
            blg.user1_to_id,
            blg.sfb_budget_area_id,
            blg.sfb_budget_area_to_id,
            blg.budget_item_from_id,
            blg.budget_item_to_id
    INTO  v_GetLines,
          v_LogOrg_ID,
          v_Type,
          v_TypeOfBudget,
          v_Year_ID,
          v_CostCenterFrom_ID,
          v_CostCenterTo_ID,
          v_User1From_ID,
          v_User1To_ID,
          v_BudgetAreaFrom_ID,
          v_BudgetAreaTo_ID,
          v_BudgetItemFrom_ID,
          v_BudgetItemTo_ID
    FROM  sfb_budget_log blg
    WHERE blg.sfb_budget_log_id = v_Record_ID;
    
    IF v_GetLines = 'Y' THEN
      --Delete lines
      DELETE FROM sfb_budget_log_line blln
      WHERE blln.sfb_budget_log_id = v_Record_ID;
      --Set unloaded
      UPDATE sfb_budget_log blg SET getlines = 'N' WHERE blg.sfb_budget_log_id = v_Record_ID;
    ELSIF v_GetLines = 'N' THEN
      -- Get budget line from data only on movement or adjustment
      IF v_Type = 'M' OR v_Type = 'A' THEN
        BEGIN
          SELECT  bln.sfb_budget_line_id
          INTO  v_BudgetLineFrom_ID
          FROM  sfb_budget_line bln
          JOIN  sfb_budget_version bv ON bln.sfb_budget_version_id = bv.sfb_budget_version_id
          JOIN  sfb_budget b ON bv.sfb_budget_id = b.sfb_budget_id
          WHERE bln.ad_org_id = v_LogOrg_ID
            AND bln.ad_client_id = v_Client_ID
            AND bln.c_costcenter_id = v_CostCenterFrom_ID
            AND bln.user1_id = v_User1From_ID
            AND bln.sfb_budget_area_id = v_BudgetAreaFrom_ID
            AND bln.sfb_budget_item_id = v_BudgetItemFrom_ID
            AND b.type_of_budget = v_TypeOfBudget
            AND b.c_year_id = v_Year_ID
            AND bv.version_status = 'AP';
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
          v_BudgetLineFrom_ID := NULL;
        END;
        IF v_BudgetLineFrom_ID IS NULL THEN
          RAISE_APPLICATION_ERROR(-20000, '@SFB_NoFromBudgetItem@');
        END IF;
      END IF;
  
      -- Get budget line to data
      BEGIN
        SELECT  bln.sfb_budget_line_id
        INTO  v_BudgetLineTo_ID
        FROM  sfb_budget_line bln
        JOIN  sfb_budget_version bv ON bln.sfb_budget_version_id = bv.sfb_budget_version_id
        JOIN  sfb_budget b ON bv.sfb_budget_id = b.sfb_budget_id
        WHERE bln.ad_org_id = v_LogOrg_ID
          AND bln.ad_client_id = v_Client_ID
          AND bln.c_costcenter_id = (
            CASE v_Type 
              WHEN 'A' THEN v_CostCenterTo_ID 
              WHEN 'M' THEN v_CostCenterFrom_ID 
              WHEN 'S' THEN v_CostCenterFrom_ID 
              ELSE NULL 
            END
          )
          AND bln.user1_id = (
            CASE v_Type 
              WHEN 'A' THEN v_User1To_ID 
              WHEN 'M' THEN v_User1From_ID 
              WHEN 'S' THEN v_User1From_ID 
              ELSE NULL 
            END
          )
          AND bln.sfb_budget_area_id = (
            CASE v_Type 
              WHEN 'A' THEN v_BudgetAreaTo_ID 
              WHEN 'M' THEN v_BudgetAreaFrom_ID 
              WHEN 'S' THEN v_BudgetAreaFrom_ID 
              ELSE NULL 
            END
          )
          AND bln.sfb_budget_item_id = v_BudgetItemTo_ID
          AND b.type_of_budget = v_TypeOfBudget
          AND b.c_year_id = v_Year_ID
          AND bv.version_status = 'AP';
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
        v_BudgetLineTo_ID := NULL;
      END;
      IF v_BudgetLineTo_ID IS NULL THEN
        RAISE_APPLICATION_ERROR(-20000, '@SFB_NoToBudgetItem@');
      END IF;
  
      -- Insert line from
      IF v_BudgetLineFrom_ID IS NOT NULL THEN
        v_n_insertions := v_n_insertions + 1;
        INSERT INTO sfb_budget_log_line (
          sfb_budget_log_line_id, ad_client_id, ad_org_id, isactive,
          created, createdby, updated, updatedby,
          sfb_budget_line_id, line, jan_newadjusted_value, feb_newadjusted_value,
          mar_newadjusted_value, apr_newadjusted_value, may_newadjusted_value, jun_newadjusted_value,
          jul_newadjusted_value, aug_newadjusted_value, sep_newadjusted_value, oct_newadjusted_value,
          nov_newadjusted_value, dec_newadjusted_value, jan_adjusted_value, feb_adjusted_value,
          mar_adjusted_value, apr_adjusted_value, may_adjusted_value, jun_adjusted_value,
          jul_adjusted_value, aug_adjusted_value, sep_adjusted_value, oct_adjusted_value,
          nov_adjusted_value, dec_adjusted_value, sfb_budget_log_id, direction
        )
        SELECT  get_uuid(), v_Client_ID, v_Org_ID, 'Y',
                now(), v_User_ID, now(), v_User_ID,
                v_BudgetLineFrom_ID, v_n_insertions * 10, bln.jan_adjusted_value, bln.feb_adjusted_value,
                bln.mar_adjusted_value, bln.apr_adjusted_value, bln.may_adjusted_value, bln.jun_adjusted_value,
                bln.jul_adjusted_value, bln.aug_adjusted_value, bln.sep_adjusted_value, bln.oct_adjusted_value,
                bln.nov_adjusted_value, bln.dec_adjusted_value, bln.jan_adjusted_value, bln.feb_adjusted_value,
                bln.mar_adjusted_value, bln.apr_adjusted_value, bln.may_adjusted_value, bln.jun_adjusted_value,
                bln.jul_adjusted_value, bln.aug_adjusted_value, bln.sep_adjusted_value, bln.oct_adjusted_value,
                bln.nov_adjusted_value, bln.dec_adjusted_value, v_Record_ID, 'F'
        FROM sfb_budget_line bln
        WHERE bln.sfb_budget_line_id = v_BudgetLineFrom_ID;
      END IF;
  
      -- Insert line to
      v_n_insertions := v_n_insertions + 1;
      INSERT INTO sfb_budget_log_line (
        sfb_budget_log_line_id, ad_client_id, ad_org_id, isactive,
        created, createdby, updated, updatedby,
        sfb_budget_line_id, line, jan_newadjusted_value, feb_newadjusted_value,
        mar_newadjusted_value, apr_newadjusted_value, may_newadjusted_value, jun_newadjusted_value,
        jul_newadjusted_value, aug_newadjusted_value, sep_newadjusted_value, oct_newadjusted_value,
        nov_newadjusted_value, dec_newadjusted_value, jan_adjusted_value, feb_adjusted_value,
        mar_adjusted_value, apr_adjusted_value, may_adjusted_value, jun_adjusted_value,
        jul_adjusted_value, aug_adjusted_value, sep_adjusted_value, oct_adjusted_value,
        nov_adjusted_value, dec_adjusted_value, sfb_budget_log_id, direction
      )
      SELECT  get_uuid(), v_Client_ID, v_Org_ID, 'Y',
              now(), v_User_ID, now(), v_User_ID,
              v_BudgetLineTo_ID, v_n_insertions * 10, bln.jan_adjusted_value, bln.feb_adjusted_value,
              bln.mar_adjusted_value, bln.apr_adjusted_value, bln.may_adjusted_value, bln.jun_adjusted_value,
              bln.jul_adjusted_value, bln.aug_adjusted_value, bln.sep_adjusted_value, bln.oct_adjusted_value,
              bln.nov_adjusted_value, bln.dec_adjusted_value, bln.jan_adjusted_value, bln.feb_adjusted_value,
              bln.mar_adjusted_value, bln.apr_adjusted_value, bln.may_adjusted_value, bln.jun_adjusted_value,
              bln.jul_adjusted_value, bln.aug_adjusted_value, bln.sep_adjusted_value, bln.oct_adjusted_value,
              bln.nov_adjusted_value, bln.dec_adjusted_value, v_Record_ID, 'T'
      FROM sfb_budget_line bln
      WHERE bln.sfb_budget_line_id = v_BudgetLineTo_ID;
      --Set loaded
      UPDATE sfb_budget_log blg SET getlines = 'Y' WHERE blg.sfb_budget_log_id = v_Record_ID;
    END IF;

    v_Message := '@RowsInserted@';
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
    
  END; --BODY
  EXCEPTION
  WHEN OTHERS THEN
    v_ResultStr:= '@ERROR=' || SQLERRM;
    DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
    RETURN;
END SFB_GETLOGLINES
]]></body>
    </function>
  </database>
