<?xml version="1.0"?>
  <database name="FUNCTION SFB_JOURNAL_BUDGET">
    <function name="SFB_JOURNAL_BUDGET" type="NULL">
      <parameter name="p_journal_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_oldstatus" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_newstatus" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_datedoc" type="TIMESTAMP" mode="in">
        <default/>
      </parameter>
      <parameter name="p_currency_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_doctype_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_client_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_org_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_user_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_isbudgetable" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[P_MESSAGE           VARCHAR2(2000);    
P_RECORD_ID         VARCHAR2(60);      
P_DOCACTION         VARCHAR2(60);      
P_USER              VARCHAR2(60);      
P_RESULT            NUMBER;
--DQ INSERT VALIDACIóN ANULACIóN
P_DOCSTATUS         VARCHAR2(60);
P_ISSOTRX           VARCHAR2(60);

V_RESULTSTR         VARCHAR2(2000):='';
V_CURRENCY_ID       VARCHAR2(32);      
V_BUDGET_LINE_ID    VARCHAR2(32);      
V_EXCHANGE_LINE_ID  VARCHAR2(32);      
V_HASHCODE          VARCHAR2(32);      
V_SQL               VARCHAR2(4000):='';
V_SQL2              VARCHAR2(4000):='';
V_CONVERTED         NUMBER;
V_CERT_CONVERTED    NUMBER;
V_MONTH             NUMBER;
V_AMT NUMBER:= -1;      -- REVENUE (-)
V_COUNT             INTEGER;
V_COUNT_DOCTYPE     INTEGER;
V_BUDGETED          CHAR(1);
V_BACCOUNT_LINES    VARCHAR2(2000):='';
V_NBACCOUNT_LINES   VARCHAR2(2000):='';
V_BAMOUNT_LINES     VARCHAR2(2000):='';
--PROCESO NC
V_DOCTYPE_ID        VARCHAR2(32);      
V_ISREVERSAL	    CHAR(1);
V_DOCBASETYPE	    VARCHAR2(60);      
--VARIABLES PARA PARAMETROS
V_CURRENCYP_ID 	    VARCHAR(32); 
V_DATEDOC 	    DATE;
V_CLIENT_ID	    VARCHAR(32);
V_ORG_ID 	    VARCHAR(32);
HEADER_ISBUDGETABLE VARCHAR(1);


TYPE RECORD IS REF CURSOR;
CUR_PARAMS          RECORD;
CUR_LINES           RECORD;

BEGIN

  P_DOCACTION := P_NEWSTATUS;
  P_RECORD_ID := P_JOURNAL_ID;
  V_DOCTYPE_ID := P_DOCTYPE_ID;
  V_CURRENCYP_ID := P_CURRENCY_ID;
  V_DATEDOC := P_DATEDOC;
  V_CLIENT_ID := P_CLIENT_ID;
  V_ORG_ID := P_ORG_ID;
  HEADER_ISBUDGETABLE := P_ISBUDGETABLE;  
 
  P_MESSAGE := '';
  P_RESULT := 0;

  /*SELECT  DOCSTATUS, C_DOCTYPE_ID,CREATEDBY
  INTO P_DOCSTATUS, V_DOCTYPE_ID,P_USER
  FROM GL_JOURNAL WHERE GL_JOURNAL_ID = P_RECORD_ID;
  */--COMENTTADO POR ERROR DE MUTACION

   --OBTENGO CONFIGURACION DE TIPO DOCUMENTO NC - (FI)
  SELECT ISREVERSAL,DOCBASETYPE
  INTO V_ISREVERSAL,V_DOCBASETYPE
  FROM C_DOCTYPE 
  WHERE C_DOCTYPE_ID = V_DOCTYPE_ID;
  
  
 --RAISE_APPLICATION_ERROR(-20000, P_JOURNAL_ID);
  IF (P_DOCACTION = 'CO') THEN

    --VALIDA SI TIPO DE DOC ESTA ACTIVADO EN EL PRESUPUESTO
    -- IS A DOCUMENT TYPE THAT HAS BEEN ENABLED FOR THE BUDGET.
    /*SELECT COUNT(*) INTO V_COUNT_DOCTYPE
         FROM GL_JOURNAL CI, SFB_BUDGET_DOCTYPE BDT
         WHERE AD_ISORGINCLUDED(CI.AD_ORG_ID, BDT.AD_ORG_ID, CI.AD_CLIENT_ID) <> -1  
         AND BDT.C_DOCTYPE_ID = CI.C_DOCTYPE_ID 
         AND BDT.ISACTIVE = 'Y'
         AND CI.GL_JOURNAL_ID = P_RECORD_ID;
     */--COMENTTADO POR ERROR DE MUTACION

    /*SELECT COUNT(*) INTO V_COUNT_DOCTYPE
    FROM SFB_BUDGET_DOCTYPE BDT
    WHERE AD_ISORGINCLUDED(V_ORG_ID, BDT.AD_ORG_ID, V_CLIENT_ID) <> -1  
          AND BDT.C_DOCTYPE_ID = V_DOCTYPE_ID 
          AND BDT.ISACTIVE = 'Y'; 
    */

    --IF (V_COUNT_DOCTYPE > 0) THEN

      V_RESULTSTR := 'UPDATE BUDGET (EXECUTED CERTIFICATE VALUE).';

      FOR CUR_LINES IN (
        SELECT (CASE WHEN EXTRACT(YEAR FROM TO_DATE(V_DATEDOC)) = EXTRACT(YEAR FROM TO_DATE(BC.DATE_ISSUE)) THEN 1 ELSE 0 END) AS SAMEYEAR,
               (CASE WHEN V_CURRENCYP_ID = BC.C_CURRENCY_ID THEN 1 ELSE 0 END) AS SAMECURRENCY,
               --(CASE WHEN COALESCE(CIL.EM_SFB_HASHCODE, CI.EM_SFB_HASHCODE) = BC.HASH_CODE THEN 1 ELSE 0 END) AS SAMEHASHCODE,
               1 AS SAMEHASHCODE,
               (CASE WHEN CIL.AD_ORG_ID = BCL.AD_ORG_ID THEN 1 ELSE 0 END) AS SAMEORG,
               (CASE WHEN ((BCL.ACTUAL_VALUE >= (COALESCE(AMTSOURCEDR,(AMTSOURCECR*(-1))))) AND
                          (BCL.ACTUAL_VALUE >= 
                          (SELECT SUM(COALESCE(AMTSOURCEDR,(AMTSOURCECR*(-1)))) 
                           FROM GL_JOURNALLINE 
                           WHERE EM_SFB_BUDGET_CERT_LINE_ID = CIL.EM_SFB_BUDGET_CERT_LINE_ID AND GL_JOURNAL_ID = P_RECORD_ID)))
               THEN 1 ELSE 0 END) AS ENOUGHAMOUNT,
               --CI.AD_CLIENT_ID, CI.AD_ORG_ID, CI.C_DOCTYPE_ID, CI.DATEDOC, CI.C_CURRENCY_ID, 
               CIL.AD_CLIENT_ID, CIL.AD_ORG_ID, --CI.C_DOCTYPE_ID, CI.DATEDOC, CI.C_CURRENCY_ID, CI.EM_SFB_AFFECTBUDGET AS HEADER_ISBUDGETABLE, -- VALIDAR CUANDO SEA Y 
               CIL.LINE, CASE WHEN AMTSOURCEDR = 0 THEN AMTSOURCECR*(-1) ELSE AMTSOURCEDR END AS LINETOTALAMT, CIL.EM_SFB_BUDGET_CERT_LINE_ID AS LINECERTIFICATE, 
               CIL.EM_SFB_AFFECTBUDGET AS LINES_ISBUDGETABLE,
               CIL.M_PRODUCT_ID, NULL AS C_CHARGE_ID, VC.ACCOUNT_ID,
               BCL.C_COSTCENTER_ID, BCL.USER1_ID, BCL.SFB_BUDGET_CERT_LINE_ID, BCL.SFB_BUDGET_ITEM_ID,
               BC.TYPE_OF_BUDGET, BC.C_YEAR_ID, BC.DATE_ISSUE
               ,coalesce(bcl.executed_value,0) as ejecutado
               ,coalesce(AMTSOURCECR,0) as haber
        FROM GL_JOURNALLINE CIL
             LEFT JOIN SFB_BUDGET_CERT_LINE BCL ON CIL.EM_SFB_BUDGET_CERT_LINE_ID = BCL.SFB_BUDGET_CERT_LINE_ID
             LEFT JOIN SFB_BUDGET_CERTIFICATE BC ON BCL.SFB_BUDGET_CERTIFICATE_ID = BC.SFB_BUDGET_CERTIFICATE_ID
             LEFT JOIN C_VALIDCOMBINATION VC ON CIL.C_VALIDCOMBINATION_ID = VC.C_VALIDCOMBINATION_ID 
        WHERE CIL.GL_JOURNAL_ID = P_RECORD_ID  AND CIL.EM_SFB_AFFECTBUDGET = 'Y'
        --WHERE CI.GL_JOURNAL_ID = 'A6665B5B2F4941C6BC3E3C8101DBE871'-- AND CI.ISSOTRX = 'N'
        ORDER BY CIL.LINE
      )
      LOOP

      IF ( (CUR_LINES.haber >0 and CUR_LINES.haber >CUR_LINES.ejecutado)) THEN
            
            RAISE_APPLICATION_ERROR(-20000, '@El valor del Asiento  debe ser menor o igual al ejecutado@');
            
          END IF;
	  
        -- GET ACCOUNT
      
        SELECT COUNT(*) INTO V_COUNT
        FROM C_DOCTYPE
        WHERE C_DOCTYPE_ID = V_DOCTYPE_ID ;--AND DOCBASETYPE LIKE '%AP%';

        IF (V_COUNT = 1) THEN

          V_AMT := 1; -- EXPENSE (+)

        END IF;

        IF (CUR_LINES.LINES_ISBUDGETABLE = 'Y' AND HEADER_ISBUDGETABLE = 'Y') THEN

         -- IF (CUR_LINES.LINETOTALAMT <> 0) THEN

            IF (CUR_LINES.LINECERTIFICATE IS NULL AND CUR_LINES.LINES_ISBUDGETABLE = 'Y') THEN
              RAISE_APPLICATION_ERROR(-20000, '@SFB_NOCERTIFICATELINE@');
            ELSIF (CUR_LINES.SAMEORG = 0) THEN
              RAISE_APPLICATION_ERROR(-20000, '@SFB_NOCERTIFICATEORGANIZATION@');
            ELSIF(CUR_LINES.SAMECURRENCY = 0) THEN
              RAISE_APPLICATION_ERROR(-20000, '@SFB_NOCERTIFICATECURRENCY@');
            ELSIF(CUR_LINES.SAMEHASHCODE = 0) THEN
              RAISE_APPLICATION_ERROR(-20000, '@SFB_NOCERTIFICATEHASHCODE@');
            ELSIF(CUR_LINES.SAMEYEAR = 0) THEN
              RAISE_APPLICATION_ERROR(-20000, '@SFB_NODATEWITHINYEAR@');
            ELSIF(CUR_LINES.ENOUGHAMOUNT = 0) THEN
              IF (COALESCE(V_BAMOUNT_LINES, '0') <> COALESCE('', '0')) THEN
                V_BAMOUNT_LINES := V_BAMOUNT_LINES || ', ';
              END IF;


              V_BAMOUNT_LINES := V_BAMOUNT_LINES || CUR_LINES.LINE;
              -- IF THERE ARE SOME AMOUNT ERRORS THEN SAVE ERROR LINES ONLY 
              IF (COALESCE(V_BAMOUNT_LINES, '0') <> COALESCE('', '0')) THEN
                CONTINUE;
              END IF;

            ELSE

              -- CHARGE ACCOUNT
              --IF (CUR_LINES.M_PRODUCT_ID IS NULL AND CUR_LINES.ACCOUNT_ID IS NOT NULL) THEN
		IF (CUR_LINES.ACCOUNT_ID IS NOT NULL) THEN

                --VALIDA CUENTA PARA PRESUPUESTO
                SELECT COUNT(*) INTO V_COUNT
                FROM SFB_BUDGET_ITEM_ACCOUNT
                WHERE SFB_BUDGET_ITEM_ID = CUR_LINES.SFB_BUDGET_ITEM_ID AND ACCOUNT_ID = CUR_LINES.ACCOUNT_ID;

              ELSE

                SELECT COUNT(*) INTO V_COUNT
                FROM SFB_BUDGET_ITEM_ACCOUNT
                WHERE SFB_BUDGET_ITEM_ID = CUR_LINES.SFB_BUDGET_ITEM_ID AND ACCOUNT_ID = CUR_LINES.ACCOUNT_ID;



              END IF;

              -- ACCOUNT CHECKS
              IF (V_COUNT = 0) THEN

                IF (COALESCE(V_BACCOUNT_LINES, '0') <> COALESCE('', '0')) THEN
                  V_BACCOUNT_LINES := V_BACCOUNT_LINES || ', ';
                END IF;
                V_BACCOUNT_LINES := V_BACCOUNT_LINES || CUR_LINES.LINE;

              END IF;

              -- IF THERE ARE SOME NATURE OF ACCOUNT ERRORS THEN SAVE ERROR LINES ONLY 
              IF (COALESCE(V_BACCOUNT_LINES, '0') <> COALESCE('', '0')) THEN
                CONTINUE;
              END IF;

              -- GET BUDGET CURRENCY
              SELECT B.C_CURRENCY_ID, BL.SFB_BUDGET_LINE_ID INTO V_CURRENCY_ID, V_BUDGET_LINE_ID
              FROM SFB_BUDGET_LINE BL 
                   LEFT JOIN SFB_BUDGET_VERSION BV ON BL.SFB_BUDGET_VERSION_ID = BV.SFB_BUDGET_VERSION_ID 
                   LEFT JOIN SFB_BUDGET B ON BV.SFB_BUDGET_ID = B.SFB_BUDGET_ID 
              WHERE BL.AD_CLIENT_ID = CUR_LINES.AD_CLIENT_ID AND BL.AD_ORG_ID = CUR_LINES.AD_ORG_ID 
              AND BL.C_COSTCENTER_ID = CUR_LINES.C_COSTCENTER_ID AND BL.USER1_ID = CUR_LINES.USER1_ID AND BL.SFB_BUDGET_ITEM_ID = CUR_LINES.SFB_BUDGET_ITEM_ID
              AND BV.VERSION_STATUS = 'AP' AND B.TYPE_OF_BUDGET = CUR_LINES.TYPE_OF_BUDGET AND B.C_YEAR_ID = CUR_LINES.C_YEAR_ID;

              IF (V_CURRENCYP_ID = V_CURRENCY_ID) THEN

                V_CONVERTED := CUR_LINES.LINETOTALAMT;
                V_CERT_CONVERTED := CUR_LINES.LINETOTALAMT;

              ELSE

                V_CONVERTED := C_CURRENCY_ROUND(C_CURRENCY_CONVERT(CUR_LINES.LINETOTALAMT, V_CURRENCYP_ID, V_CURRENCY_ID, V_DATEDOC, NULL, CUR_LINES.AD_CLIENT_ID, CUR_LINES.AD_ORG_ID), V_CURRENCY_ID, NULL);
                V_CERT_CONVERTED := C_CURRENCY_ROUND(C_CURRENCY_CONVERT(CUR_LINES.LINETOTALAMT, V_CURRENCYP_ID, V_CURRENCY_ID, CUR_LINES.DATE_ISSUE, NULL, CUR_LINES.AD_CLIENT_ID, CUR_LINES.AD_ORG_ID), V_CURRENCY_ID, NULL);

              END IF;

              IF (V_CONVERTED IS NULL OR V_CERT_CONVERTED IS NULL) THEN
                RAISE_APPLICATION_ERROR(-20000, '@NOCONVERSIONRATEHEADER@');
              END IF;

              V_RESULTSTR := 'ADD AMOUNT TO EXECUTED VALUE';
              UPDATE SFB_BUDGET_CERT_LINE 
              SET EXECUTED_VALUE = EXECUTED_VALUE + CUR_LINES.LINETOTALAMT, 
              BUDGET_EXECUTED_VALUE = BUDGET_EXECUTED_VALUE + V_CONVERTED,
	      COMMITTED_VALUE = COMMITTED_VALUE + CUR_LINES.LINETOTALAMT, 
              BUDGET_COMMITTED_VALUE = BUDGET_COMMITTED_VALUE + V_CONVERTED,
	      ACTUAL_VALUE = ACTUAL_VALUE + CUR_LINES.LINETOTALAMT,
	      AVAILABLE_BALANCE = AVAILABLE_BALANCE + CUR_LINES.LINETOTALAMT
              WHERE SFB_BUDGET_CERT_LINE_ID = CUR_LINES.SFB_BUDGET_CERT_LINE_ID;  

--select *from SFB_BUDGET_CERT_LINE where SFB_BUDGET_CERT_LINE_ID='B5B4A91E551D4DCC8F1F58BB5714AE5B'

              V_SQL := 'UPDATE SFB_BUDGET_LINE SET ';

              SELECT
              CASE EXTRACT(MONTH FROM TO_DATE(V_DATEDOC))
                WHEN 1  THEN V_SQL || 'JAN_EXECUTED_VALUE = JAN_EXECUTED_VALUE + '
                WHEN 2  THEN V_SQL || 'FEB_EXECUTED_VALUE = FEB_EXECUTED_VALUE + '
                WHEN 3  THEN V_SQL || 'MAR_EXECUTED_VALUE = MAR_EXECUTED_VALUE + '
                WHEN 4  THEN V_SQL || 'APR_EXECUTED_VALUE = APR_EXECUTED_VALUE + '
                WHEN 5  THEN V_SQL || 'MAY_EXECUTED_VALUE = MAY_EXECUTED_VALUE + '
                WHEN 6  THEN V_SQL || 'JUN_EXECUTED_VALUE = JUN_EXECUTED_VALUE + '
                WHEN 7  THEN V_SQL || 'JUL_EXECUTED_VALUE = JUL_EXECUTED_VALUE + '
                WHEN 8  THEN V_SQL || 'AUG_EXECUTED_VALUE = AUG_EXECUTED_VALUE + '
                WHEN 9  THEN V_SQL || 'SEP_EXECUTED_VALUE = SEP_EXECUTED_VALUE + '
                WHEN 10 THEN V_SQL || 'OCT_EXECUTED_VALUE = OCT_EXECUTED_VALUE + '
                WHEN 11 THEN V_SQL || 'NOV_EXECUTED_VALUE = NOV_EXECUTED_VALUE + '
                WHEN 12 THEN V_SQL || 'DEC_EXECUTED_VALUE = DEC_EXECUTED_VALUE + '
              END INTO V_SQL
              FROM DUAL;

              V_SQL := V_SQL || V_CERT_CONVERTED || ' WHERE SFB_BUDGET_LINE_ID = ''' || V_BUDGET_LINE_ID || '''';
	      EXECUTE IMMEDIATE V_SQL;

              IF ( V_CERT_CONVERTED <> V_CONVERTED) THEN

                -- GET EXCHANGE DIFFERENCE BUDGET LINE
                SELECT SFB_BUDGET_LINE_ID INTO V_EXCHANGE_LINE_ID
                FROM SFB_BUDGET_LINE BL
                LEFT JOIN SFB_BUDGET_VERSION BV ON BL.SFB_BUDGET_VERSION_ID = BV.SFB_BUDGET_VERSION_ID 
                LEFT JOIN SFB_BUDGET B ON BV.SFB_BUDGET_ID = B.SFB_BUDGET_ID 
                WHERE BL.ISEXCHANGE = 'Y' AND BL.AD_CLIENT_ID = CUR_LINES.AD_CLIENT_ID AND
                      BL.AD_ORG_ID = CUR_LINES.AD_ORG_ID AND 
                      B.TYPE_OF_BUDGET = CUR_LINES.TYPE_OF_BUDGET AND 
                      B.C_YEAR_ID = CUR_LINES.C_YEAR_ID;

	        V_SQL2 := 'UPDATE SFB_BUDGET_LINE SET ';

                SELECT
                CASE EXTRACT(MONTH FROM TO_DATE(V_DATEDOC))
                  WHEN 1  THEN V_SQL2 || 'JAN_EXECUTED_VALUE = JAN_EXECUTED_VALUE + '
                  WHEN 2  THEN V_SQL2 || 'FEB_EXECUTED_VALUE = FEB_EXECUTED_VALUE + '
                  WHEN 3  THEN V_SQL2 || 'MAR_EXECUTED_VALUE = MAR_EXECUTED_VALUE + '
                  WHEN 4  THEN V_SQL2 || 'APR_EXECUTED_VALUE = APR_EXECUTED_VALUE + '
                  WHEN 5  THEN V_SQL2 || 'MAY_EXECUTED_VALUE = MAY_EXECUTED_VALUE + '
                  WHEN 6  THEN V_SQL2 || 'JUN_EXECUTED_VALUE = JUN_EXECUTED_VALUE + '
                  WHEN 7  THEN V_SQL2 || 'JUL_EXECUTED_VALUE = JUL_EXECUTED_VALUE + '
                  WHEN 8  THEN V_SQL2 || 'AUG_EXECUTED_VALUE = AUG_EXECUTED_VALUE + '
                  WHEN 9  THEN V_SQL2 || 'SEP_EXECUTED_VALUE = SEP_EXECUTED_VALUE + '
                  WHEN 10 THEN V_SQL2 || 'OCT_EXECUTED_VALUE = OCT_EXECUTED_VALUE + '
                  WHEN 11 THEN V_SQL2 || 'NOV_EXECUTED_VALUE = NOV_EXECUTED_VALUE + '
                  WHEN 12 THEN V_SQL2 || 'DEC_EXECUTED_VALUE = DEC_EXECUTED_VALUE + '
                END INTO V_SQL2
                FROM DUAL;

                V_SQL2 := V_SQL2 || TO_CHAR(V_CONVERTED + V_CERT_CONVERTED) || ' WHERE SFB_BUDGET_LINE_ID = ''' || V_EXCHANGE_LINE_ID || '''';
                EXECUTE IMMEDIATE V_SQL2; 

              END IF;
           --END IF;
          END IF;

      
        ELSE 
                          
	    IF (CUR_LINES.ACCOUNT_ID IS NOT NULL) THEN

            SELECT COUNT(*) INTO V_COUNT
            FROM SFB_BUDGET_ITEM_ACCOUNT BIA LEFT JOIN SFB_BUDGET_ITEM BI ON BIA.SFB_BUDGET_ITEM_ID = BI.SFB_BUDGET_ITEM_ID
                                             LEFT JOIN SFB_BUDGET_LINE BL ON BL.SFB_BUDGET_ITEM_ID = BI.SFB_BUDGET_ITEM_ID 
                                             LEFT JOIN SFB_BUDGET_VERSION BV ON BL.SFB_BUDGET_VERSION_ID = BV.SFB_BUDGET_VERSION_ID 
                                             LEFT JOIN SFB_BUDGET B ON BV.SFB_BUDGET_ID = B.SFB_BUDGET_ID
                                             LEFT JOIN C_YEAR CY ON B.C_YEAR_ID = CY.C_YEAR_ID
            WHERE BV.VERSION_STATUS = 'AP' AND CAST(CY.YEAR AS DOUBLE PRECISION) = EXTRACT(YEAR FROM TO_DATE(V_DATEDOC)) AND BIA.ACCOUNT_ID IN (

              SELECT CASE WHEN V_AMT = 1 THEN CVC1.ACCOUNT_ID ELSE CVC2.ACCOUNT_ID END AS ACCOUNT_ID
              FROM C_GLITEM_ACCT GLI LEFT JOIN C_VALIDCOMBINATION CVC1 ON GLI.GLITEM_DEBIT_ACCT  = CVC1.C_VALIDCOMBINATION_ID
                                     LEFT JOIN C_VALIDCOMBINATION CVC2 ON GLI.GLITEM_CREDIT_ACCT = CVC2.C_VALIDCOMBINATION_ID
              WHERE C_GLITEM_ID = CUR_LINES.ACCOUNT_ID AND GLI.C_ACCTSCHEMA_ID IN (
                
                SELECT DISTINCT AD_ORG_ACCTSCHEMA.C_ACCTSCHEMA_ID
                FROM AD_ORG_ACCTSCHEMA, C_ACCTSCHEMA
                WHERE AD_ORG_ACCTSCHEMA.C_ACCTSCHEMA_ID = C_ACCTSCHEMA.C_ACCTSCHEMA_ID
      		  AND AD_ORG_ACCTSCHEMA.AD_CLIENT_ID = CUR_LINES.AD_CLIENT_ID
      		  AND (AD_ISORGINCLUDED(CUR_LINES.AD_ORG_ID, AD_ORG_ACCTSCHEMA.AD_ORG_ID, AD_ORG_ACCTSCHEMA.AD_CLIENT_ID) <> -1 OR CUR_LINES.AD_ORG_ID = '0')
      		  AND C_ACCTSCHEMA.ISACTIVE = 'Y'
      		  AND AD_ORG_ACCTSCHEMA.ISACTIVE = 'Y')
            );    

          ELSE

            SELECT COUNT(*) INTO V_COUNT
            FROM SFB_BUDGET_ITEM_ACCOUNT BIA LEFT JOIN SFB_BUDGET_ITEM BI ON BIA.SFB_BUDGET_ITEM_ID = BI.SFB_BUDGET_ITEM_ID
                                             LEFT JOIN SFB_BUDGET_LINE BL ON BL.SFB_BUDGET_ITEM_ID = BI.SFB_BUDGET_ITEM_ID 
                                             LEFT JOIN SFB_BUDGET_VERSION BV ON BL.SFB_BUDGET_VERSION_ID = BV.SFB_BUDGET_VERSION_ID 
                                             LEFT JOIN SFB_BUDGET B ON BV.SFB_BUDGET_ID = B.SFB_BUDGET_ID
                                             LEFT JOIN C_YEAR CY ON B.C_YEAR_ID = CY.C_YEAR_ID
            WHERE BV.VERSION_STATUS = 'AP' AND CAST(CY.YEAR AS DOUBLE PRECISION) = EXTRACT(YEAR FROM TO_DATE(V_DATEDOC)) AND BIA.ACCOUNT_ID = CUR_LINES.ACCOUNT_ID;

          END IF;
            
          -- ACCOUNT CHEKCKS

          IF (V_COUNT > 0) THEN
            IF (COALESCE(V_NBACCOUNT_LINES, '0') <> COALESCE('', '0')) THEN
              V_NBACCOUNT_LINES := V_NBACCOUNT_LINES || ', ';
            END IF;
            V_NBACCOUNT_LINES := V_NBACCOUNT_LINES || CUR_LINES.LINE;
          END IF;
        END IF;
      END LOOP;
    --  RAISE_APPLICATION_ERROR(-20000, 'ingrso validacion 0sss '||V_BACCOUNT_LINES);

      IF (COALESCE(V_BACCOUNT_LINES, '0') <> COALESCE('', '0')) THEN
        RAISE_APPLICATION_ERROR(-20000, '@SFB_NOBUDGETABLEACCOUNTLINES@' || ' (' || V_BACCOUNT_LINES || ')');
      ELSIF (COALESCE(V_NBACCOUNT_LINES, '0') <> COALESCE('', '0')) THEN
        RAISE_APPLICATION_ERROR(-20000, '@SFB_NONOTBUDGETACCOUNTLINES@' || ' (' || V_NBACCOUNT_LINES || ')');
      ELSIF (COALESCE(V_BAMOUNT_LINES, '0') <> COALESCE('', '0')) THEN
        RAISE_APPLICATION_ERROR(-20000, '@SFB_NOENOUGHAMOUNT@' || ' (' || V_BAMOUNT_LINES || ')');
      END IF;
     -- UPDATE C_INVOICE SET EM_SFB_ISBUDGETED = 'Y' WHERE C_INVOICE_ID = P_RECORD_ID;
    --END IF;

  
    
  ELSIF (P_DOCACTION = 'DR') THEN


      V_RESULTSTR := 'UPDATE BUDGET (EXECUTED CERTIFICATE VALUE).';
    
      FOR CUR_LINES IN (
        SELECT CIL.AD_CLIENT_ID, CIL.AD_ORG_ID, --CI.DATEDOC, CIL.C_CURRENCY_ID, CIL.EM_SFB_AFFECTBUDGET AS HEADER_ISBUDGETABLE,
               CASE WHEN AMTSOURCEDR = 0 THEN AMTSOURCECR*(-1) ELSE AMTSOURCEDR END AS LINETOTALAMT, CIL.EM_SFB_AFFECTBUDGET AS LINES_ISBUDGETABLE, 
               BCL.C_COSTCENTER_ID, BCL.USER1_ID, BCL.SFB_BUDGET_CERT_LINE_ID, BCL.SFB_BUDGET_ITEM_ID,
               BC.TYPE_OF_BUDGET, BC.C_YEAR_ID, BC.DATE_ISSUE
        FROM GL_JOURNALLINE CIL 
             LEFT JOIN SFB_BUDGET_CERT_LINE BCL ON CIL.EM_SFB_BUDGET_CERT_LINE_ID = BCL.SFB_BUDGET_CERT_LINE_ID
             LEFT JOIN SFB_BUDGET_CERTIFICATE BC ON BCL.SFB_BUDGET_CERTIFICATE_ID = BC.SFB_BUDGET_CERTIFICATE_ID
        WHERE CIL.GL_JOURNAL_ID = P_RECORD_ID AND CIL.EM_SFB_AFFECTBUDGET = 'Y'
	--WHERE CI.GL_JOURNAL_ID = 'A6665B5B2F4941C6BC3E3C8101DBE871' AND CIL.EM_SFB_AFFECTBUDGET = 'Y'
      )
      LOOP
        IF (CUR_LINES.LINES_ISBUDGETABLE = 'Y' AND HEADER_ISBUDGETABLE = 'Y' AND CUR_LINES.LINETOTALAMT <> 0) THEN

          -- GET BUDGET CURRENCY
          SELECT B.C_CURRENCY_ID, BL.SFB_BUDGET_LINE_ID INTO V_CURRENCY_ID, V_BUDGET_LINE_ID
          FROM SFB_BUDGET_LINE BL 
               LEFT JOIN SFB_BUDGET_VERSION BV ON BL.SFB_BUDGET_VERSION_ID = BV.SFB_BUDGET_VERSION_ID 
               LEFT JOIN SFB_BUDGET B ON BV.SFB_BUDGET_ID = B.SFB_BUDGET_ID 
          WHERE BL.AD_CLIENT_ID = CUR_LINES.AD_CLIENT_ID AND BL.AD_ORG_ID = CUR_LINES.AD_ORG_ID 
          AND BL.C_COSTCENTER_ID = CUR_LINES.C_COSTCENTER_ID AND BL.USER1_ID = CUR_LINES.USER1_ID AND BL.SFB_BUDGET_ITEM_ID = CUR_LINES.SFB_BUDGET_ITEM_ID
          AND BV.VERSION_STATUS = 'AP' AND B.TYPE_OF_BUDGET = CUR_LINES.TYPE_OF_BUDGET AND B.C_YEAR_ID = CUR_LINES.C_YEAR_ID;


          IF (V_CURRENCYP_ID = V_CURRENCY_ID) THEN

            V_CONVERTED := CUR_LINES.LINETOTALAMT;
            V_CERT_CONVERTED := CUR_LINES.LINETOTALAMT;

          ELSE  

            V_CONVERTED := C_CURRENCY_ROUND(C_CURRENCY_CONVERT(CUR_LINES.LINETOTALAMT, V_CURRENCYP_ID, V_CURRENCY_ID, V_DATEDOC, NULL, CUR_LINES.AD_CLIENT_ID, CUR_LINES.AD_ORG_ID), V_CURRENCY_ID, NULL);
            V_CERT_CONVERTED := C_CURRENCY_ROUND(C_CURRENCY_CONVERT(CUR_LINES.LINETOTALAMT, V_CURRENCYP_ID, V_CURRENCY_ID, CUR_LINES.DATE_ISSUE, NULL, CUR_LINES.AD_CLIENT_ID, CUR_LINES.AD_ORG_ID), V_CURRENCY_ID, NULL);

          END IF;

          IF (V_CONVERTED IS NULL OR V_CERT_CONVERTED IS NULL) THEN

            RAISE_APPLICATION_ERROR(-20000, '@NOCONVERSIONRATEHEADER@');

          END IF;

          V_RESULTSTR := 'SUBTRACT AMOUNT TO EXECUTED VALUE';
         UPDATE SFB_BUDGET_CERT_LINE 
              SET EXECUTED_VALUE = EXECUTED_VALUE - CUR_LINES.LINETOTALAMT, 
              BUDGET_EXECUTED_VALUE = BUDGET_EXECUTED_VALUE - V_CONVERTED,
	      COMMITTED_VALUE = COMMITTED_VALUE - CUR_LINES.LINETOTALAMT, 
              BUDGET_COMMITTED_VALUE = BUDGET_COMMITTED_VALUE - V_CONVERTED,
	      ACTUAL_VALUE = ACTUAL_VALUE - CUR_LINES.LINETOTALAMT,
	      AVAILABLE_BALANCE = AVAILABLE_BALANCE - CUR_LINES.LINETOTALAMT
              WHERE SFB_BUDGET_CERT_LINE_ID = CUR_LINES.SFB_BUDGET_CERT_LINE_ID; 

          V_SQL := 'UPDATE SFB_BUDGET_LINE SET ';

          SELECT
          CASE EXTRACT(MONTH FROM TO_DATE(V_DATEDOC))
            WHEN 1  THEN V_SQL || 'JAN_EXECUTED_VALUE = JAN_EXECUTED_VALUE - '
            WHEN 2  THEN V_SQL || 'FEB_EXECUTED_VALUE = FEB_EXECUTED_VALUE - '
            WHEN 3  THEN V_SQL || 'MAR_EXECUTED_VALUE = MAR_EXECUTED_VALUE - '
            WHEN 4  THEN V_SQL || 'APR_EXECUTED_VALUE = APR_EXECUTED_VALUE - '
            WHEN 5  THEN V_SQL || 'MAY_EXECUTED_VALUE = MAY_EXECUTED_VALUE - '
            WHEN 6  THEN V_SQL || 'JUN_EXECUTED_VALUE = JUN_EXECUTED_VALUE - '
            WHEN 7  THEN V_SQL || 'JUL_EXECUTED_VALUE = JUL_EXECUTED_VALUE - '
            WHEN 8  THEN V_SQL || 'AUG_EXECUTED_VALUE = AUG_EXECUTED_VALUE - '
            WHEN 9  THEN V_SQL || 'SEP_EXECUTED_VALUE = SEP_EXECUTED_VALUE - '
            WHEN 10 THEN V_SQL || 'OCT_EXECUTED_VALUE = OCT_EXECUTED_VALUE - '
            WHEN 11 THEN V_SQL || 'NOV_EXECUTED_VALUE = NOV_EXECUTED_VALUE - '
            WHEN 12 THEN V_SQL || 'DEC_EXECUTED_VALUE = DEC_EXECUTED_VALUE - '
          END INTO V_SQL
          FROM DUAL;

          V_SQL := V_SQL || V_CERT_CONVERTED || ' WHERE SFB_BUDGET_LINE_ID = ''' || V_BUDGET_LINE_ID || '''';
          EXECUTE IMMEDIATE V_SQL;

          IF (V_CERT_CONVERTED <> V_CONVERTED) THEN

            -- GET EXCHANGE DIFFERENCE BUDGET LINE
            SELECT SFB_BUDGET_LINE_ID INTO V_EXCHANGE_LINE_ID
            FROM SFB_BUDGET_LINE BL
            LEFT JOIN SFB_BUDGET_VERSION BV ON BL.SFB_BUDGET_VERSION_ID = BV.SFB_BUDGET_VERSION_ID 
            LEFT JOIN SFB_BUDGET B ON BV.SFB_BUDGET_ID = B.SFB_BUDGET_ID 
            WHERE BL.ISEXCHANGE = 'Y' AND BL.AD_CLIENT_ID = CUR_LINES.AD_CLIENT_ID AND
                  BL.AD_ORG_ID = CUR_LINES.AD_ORG_ID AND 
                  B.TYPE_OF_BUDGET = CUR_LINES.TYPE_OF_BUDGET AND 
                  B.C_YEAR_ID = CUR_LINES.C_YEAR_ID;

	    V_SQL2 := 'UPDATE SFB_BUDGET_LINE SET ';

            SELECT
            CASE EXTRACT(MONTH FROM TO_DATE(V_DATEDOC))
              WHEN 1  THEN V_SQL2 || 'JAN_EXECUTED_VALUE = JAN_EXECUTED_VALUE - '
              WHEN 2  THEN V_SQL2 || 'FEB_EXECUTED_VALUE = FEB_EXECUTED_VALUE - '
              WHEN 3  THEN V_SQL2 || 'MAR_EXECUTED_VALUE = MAR_EXECUTED_VALUE - '
              WHEN 4  THEN V_SQL2 || 'APR_EXECUTED_VALUE = APR_EXECUTED_VALUE - '
              WHEN 5  THEN V_SQL2 || 'MAY_EXECUTED_VALUE = MAY_EXECUTED_VALUE - '
              WHEN 6  THEN V_SQL2 || 'JUN_EXECUTED_VALUE = JUN_EXECUTED_VALUE - '
              WHEN 7  THEN V_SQL2 || 'JUL_EXECUTED_VALUE = JUL_EXECUTED_VALUE - '
              WHEN 8  THEN V_SQL2 || 'AUG_EXECUTED_VALUE = AUG_EXECUTED_VALUE - '
              WHEN 9  THEN V_SQL2 || 'SEP_EXECUTED_VALUE = SEP_EXECUTED_VALUE - '
              WHEN 10 THEN V_SQL2 || 'OCT_EXECUTED_VALUE = OCT_EXECUTED_VALUE - '
              WHEN 11 THEN V_SQL2 || 'NOV_EXECUTED_VALUE = NOV_EXECUTED_VALUE - '
              WHEN 12 THEN V_SQL2 || 'DEC_EXECUTED_VALUE = DEC_EXECUTED_VALUE - '
            END INTO V_SQL2
            FROM DUAL;

            V_SQL2 := V_SQL2 || TO_CHAR(V_CONVERTED - V_CERT_CONVERTED) || ' WHERE SFB_BUDGET_LINE_ID = ''' || V_EXCHANGE_LINE_ID || '''';
            EXECUTE IMMEDIATE V_SQL2; 

          END IF;

        END IF; 

      END LOOP;


  END IF;
EXCEPTION
WHEN OTHERS THEN
  DBMS_OUTPUT.PUT_LINE('SFB_BUDGET_CHECK EXCEPTION: '|| V_RESULTSTR);
  RAISE;
END SFB_JOURNAL_BUDGET
]]></body>
    </function>
  </database>
