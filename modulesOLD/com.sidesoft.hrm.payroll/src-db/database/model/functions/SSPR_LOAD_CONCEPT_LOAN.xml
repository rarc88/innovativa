<?xml version="1.0"?>
  <database name="FUNCTION SSPR_LOAD_CONCEPT_LOAN">
    <function name="SSPR_LOAD_CONCEPT_LOAN" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[TYPE RECORD IS REF CURSOR;
  Cur_Period RECORD;
  Cur_Employee RECORD;
  Cur_Concept RECORD;
  Cur_LINELOANS RECORD;
  Cur_Parameter RECORD;
  Cur_loans RECORD;

  v_Client_ID VARCHAR2(32);
  v_Org_ID VARCHAR2(32);
  v_User_ID VARCHAR2(32) ;
  V_COUNT NUMBER;

  
  v_ResultStr VARCHAR2(2000) := '';  
  v_StartPeriod DATE; --OBTG:VARCHAR2--
  v_EndPeriod DATE; --OBTG:VARCHAR2--
  v_BPartner_ID VARCHAR2(32);  
  v_SSconcept_ID VARCHAR2(32);  

  v_StartPeriod_StartDate DATE;
  v_StartPeriod_EndDate DATE;
  v_EndPeriod_StartDate DATE;
  v_EndPeriod_EndDate DATE;
  v_sspr_line_loans_id VARCHAR(32);
  v_fechapago DATE;
  v_monto NUMBER;
  v_status VARCHAR(32);
  v_Period_ID VARCHAR(32);  --v_monto-OBTG:VARCHAR2--
  v_n_insertions NUMBER;
  v_Message VARCHAR2(2000):='';
  v_number NUMBER;

BEGIN
 --  Update AD_PInstance
  DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || PInstance_ID) ;
  v_ResultStr := 'PInstanceNotFound';
  AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;

BEGIN --BODY

    -- Get Parameters
    v_ResultStr := 'ReadingParameters';
    v_n_insertions := 0;    
    
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date,
        p.AD_Client_ID,
        p.AD_Org_ID,
        p.CreatedBy        
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
           ON i.AD_PInstance_ID = p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID = PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP      	  
		
		IF (Cur_Parameter.ParameterName = 'Period') THEN
			v_Period_ID := Cur_Parameter.P_String;      
			v_Client_ID := Cur_Parameter.AD_Client_ID;
			v_Org_ID := Cur_Parameter.AD_Org_ID;
			v_User_ID := Cur_Parameter.CreatedBy;
	     
		ELSIF (Cur_Parameter.ParameterName = 'C_BPartner_ID') THEN
			v_BPartner_ID := Cur_Parameter.P_String;      
		ELSIF (Cur_Parameter.ParameterName = 'SSPR_Concept_ID') THEN
			v_SSconcept_ID := Cur_Parameter.P_String;    
		ELSE  
			DBMS_OUTPUT.PUT_LINE('*** Unknown Parameter=' || Cur_Parameter.ParameterName) ;
		END IF;     
	      
	END LOOP; -- Get Parameter
	
				select startdate, enddate
				into v_StartPeriod,v_EndPeriod
				from C_period
				where C_period_ID = v_Period_ID;

				V_COUNT := 0;
			
				If(v_BPartner_ID IS NULL) 
				Then 
				   For Cur_Employee IN
					(					
						select *
						from c_bpartner where isemployee = 'Y'
						and em_sspr_status = 'A'
					)
				   Loop
						
						delete 
						from sspr_concept_amount
						where c_bpartner_id = Cur_Employee.c_bpartner_id 
						and c_period_id = v_Period_ID 
						and sspr_concept_id =  v_ssconcept_id;

						For Cur_LINELOANS IN 
							   (	
								select *
								from sspr_loans 
								where c_bpartner_id = Cur_Employee.c_bpartner_id 
								and sspr_concept_id = v_ssconcept_id
								and status ='ap'
								
							   ) 
						Loop
								
								If(Cur_LINELOANS.sspr_loans_id is not null ) then

									For Cur_loans In(
										select sspr_line_loans_id, paydate, total_balance,status
										from sspr_line_loans
										where sspr_loans_id = Cur_LINELOANS.sspr_loans_id
										and paydate >= v_StartPeriod and paydate <= v_EndPeriod
										and status = 'Pending')
									Loop

										 v_sspr_line_loans_id := Cur_loans.sspr_line_loans_id;
										 v_fechapago := Cur_loans.paydate;
										 v_monto := Cur_loans.total_balance;
										 v_status := Cur_loans.status;

									if v_sspr_line_loans_id is not null then

									v_number := 0;

									select coalesce(to_number((SELECT to_number(count(*))
									from sspr_concept_amount
									where c_bpartner_id = Cur_Employee.c_bpartner_id --'08769664D0914559A40C5C4904970173'
									and c_period_id = v_Period_ID --'D19726D85271496284A5B1DA1A9E729B'
									and sspr_concept_id =  v_ssconcept_id
									)),0) INTO v_number
									from dual;

									If(v_number = 0) Then
									
										Insert into sspr_concept_amount(SSPR_CONCEPT_AMOUNT_ID,AD_CLIENT_ID,AD_ORG_ID,ISACTIVE,CREATED,CREATEDBY,
														UPDATED,UPDATEDBY,SSPR_CONCEPT_ID,C_BPARTNER_ID,C_PERIOD_ID,AMOUNT,ISMODIFIED) 
										values(get_uuid(), Cur_Employee.ad_client_id, Cur_Employee.ad_org_id, Cur_Employee.isactive,
											now(),Cur_Employee.createdby, now(), Cur_Employee.updatedby,
											v_SSconcept_ID ,Cur_Employee.c_bpartner_id,v_Period_ID, v_monto,'N');   

										update sspr_line_loans
										set status='Cancel'
										where sspr_line_loans_id = v_sspr_line_loans_id;
										V_COUNT := V_COUNT + 1;
									Else

										Update sspr_concept_amount
										set amount = amount + v_monto
										where c_bpartner_id = Cur_Employee.c_bpartner_id 
										and c_period_id = v_Period_ID
										and sspr_concept_id = v_SSconcept_ID ;

										update sspr_line_loans
										set status='Cancel'
										where sspr_line_loans_id = v_sspr_line_loans_id;

									End If;
									end if;
									

									End Loop;

										/*select sspr_line_loans_id, paydate, total_balance,status
										into v_sspr_line_loans_id, v_fechapago, v_monto, v_status
										from sspr_line_loans
										where sspr_loans_id = Cur_LINELOANS.sspr_loans_id
										and paydate  >= v_StartPeriod and paydate <= v_EndPeriod
										and status = 'Pending'; */
									


									
								end if;
						 End Loop;
					End Loop;
				  
				End If;
  
  
  				IF (v_BPartner_ID IS not NULL) 
				THEN 
						delete 
						from sspr_concept_amount
						where c_bpartner_id = v_BPartner_ID 
						and c_period_id = v_Period_ID 
						and sspr_concept_id =  v_ssconcept_id;
        
					FOR Cur_LINELOANS IN 
							   (	
								SELECT * FROM sspr_loans 
								where c_bpartner_id=v_BPartner_ID and 
								sspr_concept_ID= v_SSconcept_ID
								and status ='ap'
								
							   ) 
							   LOOP
								--RAISE NO_DATA_FOUND||Cur_LINELOANS.sshr_loans_id;
                 
						
								if (Cur_LINELOANS.sspr_loans_id is not null ) then
										
									/*SELECT sspr_line_loans_id, paydate, amount,status
									INTO v_sspr_line_loans_id,v_fechapago,v_monto,v_status
									FROM sspr_line_loans
									WHERE sspr_loans_id = Cur_LINELOANS.sspr_loans_id
									and paydate  >= v_StartPeriod AND paydate <= v_EndPeriod
									and status='Pending';*/--COMENTADO POR SINTAXIS DE ORACLE

									select coalesce(to_char((SELECT to_char(sspr_line_loans_id)
									FROM sspr_line_loans
									WHERE sspr_loans_id = Cur_LINELOANS.sspr_loans_id
									and paydate  >= v_StartPeriod AND paydate <= v_EndPeriod
									and status='Pending')),null) INTO v_sspr_line_loans_id
									from dual; 
										  
									select coalesce(to_char((SELECT to_char(paydate)
									FROM sspr_line_loans
									WHERE sspr_loans_id = Cur_LINELOANS.sspr_loans_id
									and paydate  >= v_StartPeriod AND paydate <= v_EndPeriod
									and status='Pending')),null) INTO v_fechapago
									from dual;
										  
									select coalesce(to_number((SELECT to_number(total_balance)
									FROM sspr_line_loans
									WHERE sspr_loans_id = Cur_LINELOANS.sspr_loans_id
									and paydate  >= v_StartPeriod AND paydate <= v_EndPeriod
									and status='Pending')),0) INTO v_monto
									from dual;
										  
									select coalesce(to_char((SELECT to_char(status)
									FROM sspr_line_loans
									WHERE sspr_loans_id = Cur_LINELOANS.sspr_loans_id
									and paydate  >= v_StartPeriod AND paydate <= v_EndPeriod
									and status='Pending')),null) INTO v_status
									from dual;
									
									if v_sspr_line_loans_id is not null then

									v_number := 0;

									select coalesce(to_number((SELECT to_number(count(*))
									from sspr_concept_amount
									where c_bpartner_id = v_BPartner_ID 
									and c_period_id = v_Period_ID 
									and sspr_concept_id =  v_ssconcept_id
									)),0) INTO v_number
									from dual;

									If(v_number = 0) Then
									
										Insert into sspr_concept_amount (sspr_concept_amount_id, ad_client_id, ad_org_id, isactive, created, 
											createdby, updated, updatedby, sspr_concept_id, c_bpartner_id, 
											c_period_id, amount, ismodified)
										values(get_uuid(), Cur_LINELOANS.ad_client_id, Cur_LINELOANS.ad_org_id, Cur_LINELOANS.isactive, 
										Cur_LINELOANS.created,Cur_LINELOANS.createdby, Cur_LINELOANS.updated, Cur_LINELOANS.updatedby, v_SSconcept_ID ,
										v_BPartner_ID,v_Period_ID, v_monto,'N');  

										UPDATE sspr_line_loans
										SET status='Cancel'
										WHERE sspr_line_loans_id = v_sspr_line_loans_id;       
										V_COUNT := V_COUNT + 1;
									Else
										Update sspr_concept_amount
										set amount = amount + v_monto
										where c_bpartner_id = v_BPartner_ID 
										and c_period_id = v_Period_ID
										and sspr_concept_id = v_SSconcept_ID;
										
										UPDATE sspr_line_loans
										SET status='Cancel'
										WHERE sspr_line_loans_id = v_sspr_line_loans_id;
									End If;
									end if;
								end if;
						 END LOOP;
				  --RETURN;
				END IF;	 
				v_Message := '@RowsInserted@: ' || V_COUNT || '.';
				DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
			 AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, v_Message) ;
				 RETURN;
END; --BODY
  EXCEPTION
  WHEN OTHERS THEN
    v_ResultStr:= '@ERROR=' || SQLERRM;
    DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
    RETURN;
END SSPR_LOAD_CONCEPT_LOAN
]]></body>
    </function>
  </database>
