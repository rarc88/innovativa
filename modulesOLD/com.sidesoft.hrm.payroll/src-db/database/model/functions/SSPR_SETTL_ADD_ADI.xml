<?xml version="1.0"?>
  <database name="FUNCTION SSPR_SETTL_ADD_ADI">
    <function name="SSPR_SETTL_ADD_ADI" type="NUMERIC">
      <parameter name="p_settlementconfig_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_sspr_contract_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_user_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_c_bpartner_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_sspr_settlement_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_client_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <parameter name="p_org_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2010-2012 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  TYPE RECORD IS REF CURSOR;
    Cur_benefit_dismissal RECORD;
    Cur_last_payroll RECORD;
  -- Logistice
  v_line NUMBER:=0 ;
  v_amount_vacations NUMBER;
  v_nodays_vacations NUMBER;
  v_amount_loans NUMBER;
  v_nocuotas_loans NUMBER;
  v_rate NUMBER;
  v_startdate DATE;
  v_enddate DATE;
  v_ReasonEndPeriod sspr_settlementconfig.reasonendperiod%TYPE := null;
  v_year NUMBER:=0;
  v_fullyear NUMBER:=0;
  v_yearmultiplier NUMBER:=1;
  v_year_noceiling NUMBER:=0;

  v_n_insertions NUMBER:=0 ;
  v_ResultStr VARCHAR2(2000):='';

/*
  FINISH_PROCESS BOOLEAN:=false;
  
  v_Message VARCHAR2(2000):='';
  v_Result NUMBER:=1; -- 0=failure
  v_IsSummary C_TAX.ISSUMMARY%TYPE;
  v_Cascade C_TAX.CASCADE%TYPE;
  v_TaxBaseAmount NUMBER;
  v_BaseAmount C_TAX.BASEAMOUNT%TYPE;
  v_AlreadyExists NUMBER;
  v_C_TaxBase_ID C_TAX.C_TAXBASE_ID%TYPE;
  v_LineNet NUMBER;
  v_AlternateTaxBaseAmt NUMBER;
  v_LineNo C_INVOICETAX.LINE%TYPE;
  v_Rate C_TAX.RATE%TYPE;
  p_client_id VARCHAR2(32) ;
  v_istaxincluded CHAR(1);
*/
BEGIN --BODY
/*
  select  con.reasonendperiod, con.startdate, con.enddate
  into  v_ReasonEndPeriod, v_startdate, v_enddate
  from  sspr_contract con
  where con.sspr_contract_id = p_sspr_contract_id;
*/
  IF (p_sspr_settlement_id IS NOT NULL) THEN
    SELECT max(sl.line)
    INTO v_line
    FROM sspr_settlementline sl
    WHERE sl.sspr_settlement_id = p_sspr_settlement_id;
  ELSE
    RAISE_APPLICATION_ERROR(-20000,'@SSPR_NoSettlement@');
  END IF;
      
  v_line := coalesce(v_line, 0) + 10;

  FOR Cur_benefit_dismissal IN(
    SELECT sspr_benefit_dismissal.rate, sspr_benefit_dismissal.sspr_concept_id, sspr_benefit_dismissal.value, sspr_concept.concepttype, sspr_benefit_dismissal.description,
    sspr_concept.isincomecalculated,sspr_concept.iscumulative,sspr_concept.isprojected,sspr_concept.isiess
    FROM sspr_settlementconfigline
    JOIN sspr_benefit_dismissal on sspr_benefit_dismissal.sspr_benefit_dismissal_id = sspr_settlementconfigline.sspr_benefit_dismissal_id
    LEFT JOIN sspr_concept on sspr_concept.sspr_concept_id = sspr_benefit_dismissal.sspr_concept_id
    WHERE sspr_settlementconfigline.sspr_settlementconfig_id = p_settlementconfig_id
          AND (sspr_benefit_dismissal.value = 'VAC' OR sspr_benefit_dismissal.value = 'LOA' OR  sspr_benefit_dismissal.value = 'IT')
          AND sspr_benefit_dismissal.isactive = 'Y'
    ORDER BY line)
  LOOP
       
    v_rate := 0;
    v_rate := coalesce(Cur_benefit_dismissal.rate, 1);

/*    --OBTENGO EL NUMERO DE DIAS DEL CONTRATO
    v_year := to_number(v_enddate - v_startdate) + 1;
    v_year := v_year / 365;
    v_year_noceiling := v_year;

    i:=0;
    v_tempstartdate:=CAST(v_startdate AS DATE);
    v_tempenddate:=CAST(v_enddate AS DATE) + INTERVAL '1' DAY;
    WHILE (v_tempstartdate < v_tempenddate) LOOP
      i:=i+1;
      v_tempstartdate := CAST(v_startdate AS DATE) + INTERVAL '1' YEAR * i;
    END LOOP;
    IF (v_tempstartdate = v_tempenddate) THEN
      v_year:=i;
    ELSE
      v_year:=i-0.5;
    END IF;

    v_fullyear := ceil (v_year);
    IF v_fullyear <> v_year AND Cur_benefit_dismissal.fullyear = 'Y' THEN
      v_fullyear := ceil (v_year) - 1;
    END IF;
    IF v_fullyear > 25 THEN
      v_fullyear := 25;
    END IF;  
    IF Cur_benefit_dismissal.peryear = 'Y' THEN
      v_yearmultiplier := v_fullyear;
    END IF;
    
    If(v_year > 1)Then 
      v_year := ceil (v_year);
    End If;
*/

    --DESARROLLO VACACIONES
    IF (Cur_benefit_dismissal.value = 'VAC') THEN
                             
      v_amount_vacations := 0;
      v_nodays_vacations := 0;
                      
     -- select coalesce((select round(sum(totalvalue),2)
      select coalesce((
        select round(sum(nodaystotal * dayvalue),2)
        from sspr_vacations 
        where c_bpartner_id = p_c_bpartner_id
              and sspr_contract_id = p_sspr_contract_id
      ),0.00),
      coalesce((
        select round(sum(nodaystotal),2)
        from sspr_vacations 
        where c_bpartner_id = p_c_bpartner_id 
              and sspr_contract_id = p_sspr_contract_id
      ),0.00)
      into v_amount_vacations, v_nodays_vacations
      from dual;
                                                    
      INSERT INTO sspr_settlementline(
        sspr_settlementline_id, sspr_settlement_id, AD_Client_ID, AD_Org_ID, IsActive, Created, 
        CreatedBy, Updated, UpdatedBy, line, sspr_concept_id, amount, qty, totalnet,
        isincomecalculated, iscumulative, isprojected, isiess
      )
      VALUES (
        get_uuid(), p_sspr_settlement_id, p_client_id, p_org_id, 'Y', now(), p_user_id, now(), p_user_id,
        v_line, Cur_benefit_dismissal.sspr_concept_id, v_amount_vacations * v_rate * v_yearmultiplier, v_nodays_vacations, v_amount_vacations * v_rate * v_yearmultiplier,
        Cur_benefit_dismissal.isincomecalculated, Cur_benefit_dismissal.iscumulative, Cur_benefit_dismissal.isprojected, Cur_benefit_dismissal.isiess
      );
                                                
      v_n_insertions := v_n_insertions + 1;
      v_line := v_line + 10;
                            
    END IF;
                      
    IF (Cur_benefit_dismissal.value = 'LOA') THEN
                             
      v_amount_loans := 0;
      v_nocuotas_loans := 0;
                      
      select coalesce(sum(sumatoria),0.00)
      into v_amount_loans
      from (
        select 
          case 
            when b.loan_advance + b.total_balance = to_number(b.amount,'999999999.99') and b.status = 'Cancel'  then 0.00
            when  b.loan_advance + b.total_balance = 0 and b.status = 'Cancel' then 0.00
            when  b.loan_advance + b.total_balance  = to_number(b.amount,'999999999.99') and b.status = 'Pending'  then b.total_balance
            when b.loan_advance = b.total_balance and b.status = 'Pending' then b.total_balance
          end as sumatoria
        from sspr_loans a
        left join sspr_line_loans  b on b.sspr_loans_id = a.sspr_loans_id
        where a.c_bpartner_id =p_c_bpartner_id
        and a.status = 'ap'
      ) loans;
                            
      INSERT INTO sspr_settlementline(
        sspr_settlementline_id, sspr_settlement_id, AD_Client_ID, AD_Org_ID, IsActive, Created, 
        CreatedBy, Updated, UpdatedBy, line, sspr_concept_id, amount, qty, totalnet,
        isincomecalculated, iscumulative, isprojected, isiess
      )
      VALUES (
        get_uuid(), p_sspr_settlement_id, p_client_id,p_org_id, 'Y', now(), p_user_id, now(), p_user_id,
        v_line, Cur_benefit_dismissal.sspr_concept_id, v_amount_loans*(-1),  v_rate * v_yearmultiplier, (v_amount_loans * v_rate * v_yearmultiplier)*(-1),
        Cur_benefit_dismissal.isincomecalculated, Cur_benefit_dismissal.iscumulative, Cur_benefit_dismissal.isprojected, Cur_benefit_dismissal.isiess
      );
                                                
      v_n_insertions := v_n_insertions + 1;
      v_line := v_line + 10;
                            
    END IF;

    --IMPUESTO A LA RENTA

    IF (Cur_benefit_dismissal.value = 'IT') THEN

      --LLAMADO A LA FUNCION ACUMULATIVE CONCEPT
      SSPR_ACUMULATIVECONCEPTS_LIQ(p_sspr_settlement_id);

      --LLAMADO A LA FUCNION 
      SSPR_INCOMETOTALS_LIQ(Null, p_sspr_settlement_id, v_line, Cur_benefit_dismissal.sspr_concept_id, p_user_id);

    END IF;
                      
  END LOOP;

  RETURN v_n_insertions;

EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  --ROLLBACK;
  RAISE;
END SSPR_SETTL_ADD_ADI
]]></body>
    </function>
  </database>
