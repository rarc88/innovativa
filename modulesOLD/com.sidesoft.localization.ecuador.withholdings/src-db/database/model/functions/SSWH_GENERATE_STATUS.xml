<?xml version="1.0"?>
  <database name="FUNCTION SSWH_GENERATE_STATUS">
    <function name="SSWH_GENERATE_STATUS" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  v_Client_ID             varchar(32); 
  v_Org_ID                varchar(32); 
  v_resultado VARCHAR(2000) := '';
  -- Parameter
 	 TYPE RECORD IS REF CURSOR;
  Cur_Parameter RECORD;
  -- Parameter Variables
  v_M_Locator_ID VARCHAR2(32);
    --
  v_DocStatus VARCHAR2(60) ;
  v_InOut_ID VARCHAR2(32);
  FINISH_PROCESS BOOLEAN:=false;

  
  --var   
    
  v_doc_status varchar(60);

  
  BEGIN
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
       i.ad_client_id, 
          i.ad_org_id,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=p_PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
      v_Client_ID := Cur_Parameter.ad_client_id;
        v_Org_ID    := Cur_Parameter.ad_org_id;
    END LOOP; -- Get Parameter
    
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;
    -- Read Information from Record
    v_ResultStr:='Reading Record';



    
  --insert into temp values(v_Record_ID,'aromero');
  
  select sswh_checkbookline.doc_line_status
  into v_doc_status
  from sswh_checkbookline
  where sswh_checkbookline_id=v_Record_ID;
  
    UPDATE sswh_checkbookline 
  	SET doc_line_status='A',generate_status='Y'
  	where sswh_checkbookline_id=v_Record_ID and v_doc_status='P';
  
/*
  
  UPDATE sswh_checkbookline 
  SET doc_line_status='A',generate_status='Y'
  where sswh_checkbookline_id=v_Record_ID and v_doc_status='P';
  
  */
  
 


  
  
  


  
  
/*
    -- Check, if we have a Shipment already
    IF(NOT FINISH_PROCESS) THEN
      DECLARE
        v_DocumentNo VARCHAR2(60) ;
        Cur_MInOut RECORD;
      BEGIN
        v_ResultStr:='Check Receipt exists';
        FOR Cur_MInOut IN
          (SELECT M_InOut_ID, DocumentNo  FROM M_InOut  WHERE C_Invoice_ID=v_Record_ID)
        LOOP
          v_DocumentNo:=Cur_MInOut.DocumentNo;
          v_Message:='@InvoiceCreateDocAlreadyExists@ = ' || v_DocumentNo;
          RAISE_APPLICATION_ERROR(-20000, v_Message);
          EXIT;
        END LOOP;
      EXCEPTION
      WHEN OTHERS THEN
        NULL;
      END;
    END IF;--FINISH_PROCESS
    */
    
    IF(NOT FINISH_PROCESS) THEN
      -- Create (and post) the shipment
      v_ResultStr:='Create Shipment';
     /*
     M_InOut_Create(NULL, v_InOut_ID, NULL, v_Record_ID, 'Y', v_M_Locator_ID) ;
      DBMS_OUTPUT.PUT_LINE('  Shipment - ' || v_InOut_ID) ;
      M_GENERATE_AVERAGE_COSTS(p_pinstance_id);
      */
      
  
       v_resultado :='Cheque anulado';

      
      if (v_resultado is not null or v_resultado <> '')then
--      v_Message := v_Message || 'Datos = ' || v_resultado;
	      v_Message := v_Message || v_resultado;
      end if;

    END IF; --FINISH_PROCESS
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  ROLLBACK;
  AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END SSWH_GENERATE_STATUS
]]></body>
    </function>
  </database>
