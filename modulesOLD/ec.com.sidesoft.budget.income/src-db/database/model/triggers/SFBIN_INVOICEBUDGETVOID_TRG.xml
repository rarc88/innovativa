<?xml version="1.0"?>
  <database name="TRIGGER SFBIN_INVOICEBUDGETVOID_TRG">
    <trigger name="SFBIN_INVOICEBUDGETVOID_TRG" table="C_INVOICE" fires="before" insert="true" update="true" delete="false" foreach="row">
      <body><![CDATA[

  v_doctype_id        	VARCHAR2(32);      
  v_isreversal	    	CHAR(1);
  v_docbasetype	    	VARCHAR2(60);      
  p_docstatus         	VARCHAR2(60);
  p_issotrx           	VARCHAR2(60);
  v_isreturn            CHAR(1);
  v_nc_or_re NUMBER:= -1;
  v_CostCenterID 	VARCHAR2(32):=''; 
  v_User1ID 		VARCHAR2(32):='';
  v_User2ID 		VARCHAR2(32):='';
  v_BuddgetitemID 	VARCHAR2(32):='';
  v_BudgetLineID 	VARCHAR2(32):='';
  v_BudgetAreaID 	VARCHAR2(32):='';
  v_sql                 VARCHAR2(4000):=''; 
  v_converted           NUMBER;
  v_isdeferred		CHAR(1);
  
  TYPE RECORD IS REF CURSOR;
  cur_lines           RECORD;
BEGIN
    
  IF AD_isTriggerEnabled()='N' THEN RETURN;
  END IF; 

  IF (UPDATING and :NEW.DocStatus = 'VO' and :OLD.docstatus = 'CO') THEN
	SELECT issotrx, docstatus, c_doctype_id, em_sfb_isdeferred
	INTO p_issotrx, p_docstatus, v_doctype_id, v_isdeferred
	from c_invoice where c_invoice_id = :NEW.c_invoice_id;

	--OBTENGO CONFIGURACION DE TIPO DOCUMENTO NC - (FI)
	SELECT isreversal, isreturn, docbasetype
	INTO v_isreversal, v_isreturn, v_docbasetype
	FROM c_doctype 
	WHERE c_doctype_id = v_doctype_id;

	IF v_isdeferred = 'Y' THEN 
		RAISE_APPLICATION_ERROR(-20000, 'ERROR: NO ES POSIBLE ANULAR TRANSACCION CON DIFERIDOS');
	END IF;
	
	IF (v_isreversal = 'Y' OR v_isreturn = 'Y' OR v_docbasetype = 'ARC') THEN
		v_nc_or_re := v_nc_or_re * -1;
	END IF;
	IF p_issotrx = 'Y' THEN 
		FOR cur_lines IN (
			SELECT  i.ad_client_id, i.ad_org_id, i.c_doctypetarget_id, i.dateinvoiced,
			      i.c_currency_id, i.em_sfb_isnotbudgetable AS header_isnotbudgetable, il.line, (il.linenetamt * v_nc_or_re) AS linetotalamt,
			      il.em_sfb_budget_cert_line_id AS linecertificate, il.m_product_id, il.c_charge_id, il.account_id,
			      bln.c_costcenter_id, bln.user1_id, bln.sfb_budget_item_id, bln.sfb_budget_line_id,
			      b.c_currency_id as budget_currency_id, bln.sfb_budget_area_id
			      ,il.c_invoiceline_id, il.em_sfb_isbudgeted as isbudgeted
			FROM c_invoice i 
			JOIN c_invoiceline il ON i.c_invoice_id = il.c_invoice_id
			LEFT JOIN (
			m_product_acct pa
			JOIN c_validcombination vc ON vc.c_validcombination_id = pa.p_revenue_acct
			) ON il.m_product_id = pa.m_product_id
			LEFT JOIN (
			sfb_budget b
			JOIN c_year y on y.c_year_id = b.c_year_id
			JOIN sfb_budget_version bv ON bv.sfb_budget_id = b.sfb_budget_id AND bv.version_status = 'AP'
			JOIN sfb_budget_line bln ON bln.sfb_budget_version_id = bv.sfb_budget_version_id
			JOIN sfb_budget_item_account bia ON bia.sfb_budget_item_id = bln.sfb_budget_item_id 
			) ON  bln.c_costcenter_id = COALESCE(il.c_costcenter_id, i.c_costcenter_id)
			AND bln.user1_id = COALESCE(il.user1_id, i.user1_id)
			AND bln.sfb_budget_area_id = COALESCE(il.em_sfbin_budget_area_id, i.em_sfb_budget_area_id)
			AND bia.isactive = 'Y'
			AND bia.account_id = vc.account_id
			AND CAST(y.year AS NUMBER(10,0)) = CAST(EXTRACT(YEAR FROM i.dateinvoiced) AS NUMBER(10,0))        
			   LEFT JOIN sfb_budget_cert_line bcl ON il.em_sfb_budget_cert_line_id = bcl.sfb_budget_cert_line_id
			   LEFT JOIN sfb_budget_certificate bc ON bcl.sfb_budget_certificate_id = bc.sfb_budget_certificate_id
			WHERE i.c_invoice_id = :NEW.c_invoice_id
			AND i.issotrx = 'Y'
			AND b.type_of_budget = 'N'
			and il.em_sfb_isbudgeted='Y'
			ORDER BY il.line
		      )
	      LOOP
			IF cur_lines.isbudgeted = 'Y' THEN

			    IF cur_lines.c_currency_id <> cur_lines.budget_currency_id THEN
				    v_converted := C_Currency_Round(C_Currency_Convert(cur_lines.linetotalamt, cur_lines.c_currency_id, cur_lines.budget_currency_id, cur_lines.dateinvoiced, null, cur_lines.ad_client_id, cur_lines.ad_org_id), cur_lines.budget_currency_id, null);
			    ELSE
				    v_converted := cur_lines.linetotalamt;
			    END IF;

			    v_sql := 'UPDATE SFB_BUDGET_LINE SET ';

			    SELECT
			    CASE EXTRACT(MONTH FROM TO_DATE(cur_lines.dateinvoiced))
			      WHEN 1  THEN v_sql || 'jan_executed_value = jan_executed_value + '
			      WHEN 2  THEN v_sql || 'feb_executed_value = feb_executed_value + '
			      WHEN 3  THEN v_sql || 'mar_executed_value = mar_executed_value + '
			      WHEN 4  THEN v_sql || 'apr_executed_value = apr_executed_value + '
			      WHEN 5  THEN v_sql || 'may_executed_value = may_executed_value + '
			      WHEN 6  THEN v_sql || 'jun_executed_value = jun_executed_value + '
			      WHEN 7  THEN v_sql || 'jul_executed_value = jul_executed_value + '
			      WHEN 8  THEN v_sql || 'aug_executed_value = aug_executed_value + '
			      WHEN 9  THEN v_sql || 'sep_executed_value = sep_executed_value + '
			      WHEN 10 THEN v_sql || 'oct_executed_value = oct_executed_value + '
			      WHEN 11 THEN v_sql || 'nov_executed_value = nov_executed_value + '
			      WHEN 12 THEN v_sql || 'dec_executed_value = dec_executed_value + '
			    END INTO v_sql
			    FROM DUAL;

			    v_sql := v_sql || v_converted || ' WHERE SFB_BUDGET_LINE_ID = ''' || cur_lines.sfb_budget_line_id || '''';
			    EXECUTE IMMEDIATE v_sql;   

			    UPDATE C_INVOICELINE SET em_sfb_isbudgeted = 'N' WHERE c_invoiceline_id = cur_lines.sfb_budget_line_id;
			
			END IF;
	      END LOOP;
	      
	      delete from SFB_BUDGET_SALES_LOG where c_invoiceline_id in (select c_invoiceline_id from c_invoiceline where c_invoice_id = :OLD.c_invoice_id);
	      
	END IF;
  END IF;

  END SFBIN_INVOICEBUDGETVOID_TRG
]]></body>
    </trigger>
  </database>
