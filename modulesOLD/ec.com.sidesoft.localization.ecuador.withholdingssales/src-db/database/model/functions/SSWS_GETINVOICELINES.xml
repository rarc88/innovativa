<?xml version="1.0"?>
  <database name="FUNCTION SSWS_GETINVOICELINES">
    <function name="SSWS_GETINVOICELINES" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[TYPE RECORD IS REF CURSOR;
Cur_Parameter RECORD;
Cur_InvoiceLine RECORD;
--Cur_Tax RECORD;

  v_Client_ID VARCHAR2(32);
  v_Org_ID VARCHAR2(32);
  v_User_ID VARCHAR2(32) ;
  
  v_ResultStr VARCHAR2(2000) := '';  

  v_n_insertions NUMBER;
  v_Message VARCHAR2(2000):='';
  V_C_BPartner_ID VARCHAR2(32); 
  V_C_Invoice_ID VARCHAR2(32); 
  V_Partner_Taxpayer_ID VARCHAR2(32); 
  V_Org_Taxpayer_ID VARCHAR2(32); 
  V_Origing_Taxpayer_ID VARCHAR2(32); 
  V_Destiny_Taxpayer_ID VARCHAR2(32); 
  V_C_Tax_Good_ID VARCHAR2(32); 
  V_C_Tax_Service_ID VARCHAR2(32); 
  V_M_Product_ID VARCHAR2(32); 
  V_C_InvoiceLine_ID VARCHAR2(32); 
  V_ProductType VARCHAR2(60);
  V_WithholdingType VARCHAR2(60);
  V_LineAmt NUMBER;
  V_RentalTaxRate NUMBER;
  V_WHRental NUMBER;
  V_TaxAmt NUMBER;
  V_IVATaxRate NUMBER;
  V_WHIVA NUMBER;
  V_C_RentalTax_ID VARCHAR2(32); 
  V_C_IVATax_ID VARCHAR2(32); 
  V_Record_Id  Varchar2(32);
  V_Description  VARCHAR2(2000);
BEGIN
  --  Update AD_PInstance
  DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || PInstance_ID) ;
  v_ResultStr := 'PInstanceNotFound';
  AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;

  BEGIN --BODY

    -- Get Parameters
    v_ResultStr := 'ReadingParameters';
    v_n_insertions := 0;  

    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        i.AD_User_ID,
        i.AD_Client_ID,
        i.AD_Org_ID 
                          
      FROM AD_PInstance i      
      WHERE i.AD_PInstance_ID = PInstance_ID      
      )
    LOOP
    
      v_Record_ID := Cur_Parameter.Record_ID;      
      v_Client_ID := Cur_Parameter.AD_Client_ID;
      v_User_ID := Cur_Parameter.AD_User_ID;     
      
    END LOOP; -- End Get Parameter

    -- Get Partner and Invoice
    select whs.c_bpartner_id, whs.c_invoice_id, whs.ad_org_id into V_C_BPartner_ID, V_C_Invoice_ID, V_Org_ID from ssws_withholdingsale whs where whs.ssws_withholdingsale_id = v_Record_ID;
    
    -- Get Partner data
    select bp.EM_SSWH_Taxpayer_ID into V_Partner_Taxpayer_ID from c_bpartner bp where bp.c_bpartner_id = V_C_BPartner_ID;
    
    -- Get Org data
    select orgi.EM_SSWH_Taxpayer_ID into V_Org_Taxpayer_ID from ad_orginfo orgi where orgi.ad_org_id = v_Org_ID;
    
    -- Get Withholding data
    select whs.withholdingtype into V_WithholdingType from ssws_withholdingsale whs where whs.ssws_withholdingsale_id = v_Record_ID;

    -- Zero to the fields Amount Withholdings Sales
    update ssws_withholdingsale set totalwhivaamt=0, totalwhrentalamt=0 where  ssws_withholdingsale_id = v_Record_ID;
    
    
    -- Get origin and destiny taxpayer
    if V_WithholdingType = 'WS' then
      V_Origing_Taxpayer_ID := V_Partner_Taxpayer_ID;    -- V_Org_Taxpayer_ID
      V_Destiny_Taxpayer_ID := V_Org_Taxpayer_ID;-- V_Partner_Taxpayer_ID
    elsif V_WithholdingType = 'WP' then
      V_Origing_Taxpayer_ID := V_Org_Taxpayer_ID;-- V_Partner_Taxpayer_ID
      V_Destiny_Taxpayer_ID := V_Partner_Taxpayer_ID; -- V_Org_Taxpayer_ID
    else
      RAISE_APPLICATION_ERROR(-20000, '@SSWS_WithholdingConfigError@');
    end if;
    
    -- Get IVA Tax for service and good
    select wh.c_tax_goods_id, wh.c_tax_services_id 
    into V_C_Tax_Good_ID, V_C_Tax_Service_ID 
    from sswh_withholding wh 
    where wh.sswh_taxpayer_id = V_Origing_Taxpayer_ID and wh.sswh_taxpayer_ref_id = V_Destiny_Taxpayer_ID;
    if V_C_Tax_Good_ID is null or V_C_Tax_Service_ID is null then
      RAISE_APPLICATION_ERROR(-20000, '@SSWS_WithholdingConfigError@');
    end if;
    
    -- Get lines from invoice
    FOR Cur_InvoiceLine IN
    (
      Select P.M_Product_Id, P.Producttype, Tax.Rate, Tax.C_Tax_Id, Il.C_Tax_Id as IVA_Tax_Id, Ilt.Taxamt As Ivataxamt, Il.C_Invoiceline_Id, Il.Linenetamt, Il.Description --, Il.Taxamt
      FROM c_invoice i
      Join C_Invoiceline Il On I.C_Invoice_Id = Il.C_Invoice_Id
      Join C_Invoicelinetax Ilt On (Ilt.C_Invoiceline_Id = Il.C_Invoiceline_Id)
      JOIN m_product p on p.m_product_id = il.m_product_id
      JOIN sswh_source src on p.em_sswh_withholding_source_id = src.sswh_withholding_source_id
      JOIN c_tax tax on src.c_tax_id = tax.c_tax_id
      WHERE i.c_invoice_id = V_C_Invoice_ID
    )
    LOOP

      -- Get all necesary data 
      V_M_Product_ID := Cur_InvoiceLine.m_product_id;
      V_RentalTaxRate := Cur_InvoiceLine.rate;
      V_ProductType := Cur_InvoiceLine.producttype;
      V_C_InvoiceLine_ID := Cur_InvoiceLine.c_invoiceline_id;
      V_LineAmt := Cur_InvoiceLine.linenetamt;
      V_C_RentalTax_ID := Cur_InvoiceLine.c_tax_id;
      V_TaxAmt := Cur_InvoiceLine.Ivataxamt;
      V_Description := Cur_Invoiceline.Description;
      
      -- Determine IVA tax rate according of product type
      if V_ProductType = 'I' then
        V_C_IVATax_ID := V_C_Tax_Good_ID;
      elsif V_ProductType = 'S' then
        V_C_IVATax_ID := V_C_Tax_Service_ID;
      end if;
      select t.rate into V_IVATaxRate from c_tax t where t.c_tax_id = V_C_IVATax_ID;
      
      -- Calculate withholdings
      V_Whrental := Abs(V_Lineamt * (V_Rentaltaxrate)) / 100;
      V_WHIVA := Abs(V_TaxAmt * (V_IVATaxRate)) / 100;
      
      -- Set line number
      V_N_Insertions := V_N_Insertions + 10;
      
      -- Insert lines into withholdingsaleline
      -- Insert rental line
      insert into ssws_withholdingsaleline 
      (SSWS_WITHHOLDINGSALELINE_ID, AD_CLIENT_ID, AD_ORG_ID, ISACTIVE, CREATED, CREATEDBY, UPDATED, UPDATEDBY, 
      DESCRIPTION, SSWS_WITHHOLDINGSALE_ID, LINE, M_PRODUCT_ID, LINENETAMT, LINEIVAAMT, WHRENTALAMT, WHIVAAMT, 
      C_TAX_ID, C_INVOICELINE_ID, ISRENTAL)
      Values
      (get_uuid(), v_Client_ID, v_Org_ID, 'Y', now(), v_User_ID, now(), v_User_ID, 
      Substr(V_Description,0,255), v_Record_ID, v_n_insertions, V_M_Product_ID, round(V_LineAmt,4), 0, round(V_WHRental,4), 0,
      V_C_RentalTax_ID, V_C_InvoiceLine_ID, 'Y');
      
			-- Insert IVA line
			if round(V_Taxamt,2) <> 0 then
        
        -- Set line number
        v_n_insertions := v_n_insertions + 10;
	      
        insert into ssws_withholdingsaleline 
	      (SSWS_WITHHOLDINGSALELINE_ID, AD_CLIENT_ID, AD_ORG_ID, ISACTIVE, CREATED, CREATEDBY, UPDATED, UPDATEDBY, 
	      DESCRIPTION, SSWS_WITHHOLDINGSALE_ID, LINE, M_PRODUCT_ID, LINENETAMT, LINEIVAAMT, WHRENTALAMT, WHIVAAMT, 
	      C_TAX_ID, C_INVOICELINE_ID, ISRENTAL)
	      values
	      (Get_Uuid(), V_Client_Id, V_Org_Id, 'Y', now(), V_User_Id, now(), V_User_Id, 
	      Substr(V_Description,0,255), V_Record_Id, V_N_Insertions, V_M_Product_Id, 0, round(V_Taxamt,4), 0, round(V_Whiva,4),
	      V_C_IVATax_ID, V_C_InvoiceLine_ID, 'N');
	    
      end if;
      
    END LOOP; -- Get lines from invoice
  
    v_Message := '@RowsInserted@';
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
    
  END; --BODY
  EXCEPTION
  WHEN OTHERS THEN
    v_ResultStr:= '@ERROR=' || SQLERRM;
    DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
    RETURN;
END SSWS_GETINVOICELINES
]]></body>
    </function>
  </database>
