// ============================================================================
//
// Copyright (c) 2005-2016, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 3.1.3.r26090).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package org.openbravo.idl.initial_data_load.assetjob_0_1;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.openbravo.idl.proc.Value;
import org.openbravo.model.common.currency.Currency;
import org.openbravo.model.common.plm.Product;

import routines.TalendString;
import routines.system.TDieException;

//the import part of tJavaRow_4

//the import part of tJavaRow_9

/**
 * Job: AssetJob Purpose: <br>
 * Description: <br>
 * 
 * @author mirurita
 * @version 3.1.3.r26090
 * @status
 */
@SuppressWarnings({ "rawtypes", "unchecked", "hiding" })
public class AssetJob {

  public final Object obj = new Object();
  // create and load default properties
  private java.util.Properties defaultProps = new java.util.Properties();

  // create application properties with default
  private class ContextProperties extends java.util.Properties {
    private static final long serialVersionUID = 1L;

    public ContextProperties(java.util.Properties properties) {
      super(properties);
    }

    public ContextProperties() {
      super();
    }

    @SuppressWarnings("unused")
    public void synchronizeContext() {

      if (validationFailCause != null) {

        this.setProperty("validationFailCause", validationFailCause.toString());

      }

      if (numLinesRejected != null) {

        this.setProperty("numLinesRejected", numLinesRejected.toString());

      }

      if (numLinesOk != null) {

        this.setProperty("numLinesOk", numLinesOk.toString());

      }

      if (filename != null) {

        this.setProperty("filename", filename.toString());

      }

      if (executeInsert != null) {

        this.setProperty("executeInsert", executeInsert.toString());

      }

    }

    public String validationFailCause;
    public Integer numLinesRejected;
    public Integer numLinesOk;
    public String filename;
    public String executeInsert;
  }

  private ContextProperties context = new ContextProperties();
  public Integer errorCode = null;
  private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
  private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
  public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

  private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
  private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
      new java.io.BufferedOutputStream(baos));

  public String getExceptionStackTrace() {
    errorMessagePS.flush();
    return baos.toString();
  }

  @SuppressWarnings("serial")
  private class TalendException extends Exception {
    private java.util.Map<String, Object> globalMap = null;
    private Exception e = null;
    private String currentComponent = null;

    private TalendException(Exception e, String errorComponent,
        final java.util.Map<String, Object> globalMap) {
      this.currentComponent = errorComponent;
      this.globalMap = globalMap;
      this.e = e;
    }

    @Override
    public void printStackTrace() {
      if (!(e instanceof TalendException || e instanceof TDieException)) {
        globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
        System.err.println("Exception in component " + currentComponent);
      }
      if (!(e instanceof TDieException)) {
        if (e instanceof TalendException) {
          e.printStackTrace();
        } else {
          e.printStackTrace();
          e.printStackTrace(errorMessagePS);
        }
      }
      if (!(e instanceof TalendException)) {
        try {
          for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
            if (m.getName().compareTo(currentComponent + "_error") == 0) {
              m.invoke(AssetJob.this, new Object[] { e, globalMap });
              break;
            }
          }

          if (!(e instanceof TDieException)) {
          }
        } catch (java.lang.SecurityException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalArgumentException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalAccessException e) {
          this.e.printStackTrace();
        } catch (java.lang.reflect.InvocationTargetException e) {
          this.e.printStackTrace();
        }
      }
    }
  }

  public void tFileInputDelimited_1_error(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
    end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_1_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_1_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_3_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_3", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_2_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_2", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_9_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_9", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_4_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_4", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_2_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_2", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFileInputDelimited_1_onSubJobError(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
  }

  static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String transactionalOrganization;
    String SearchKey;
    String Name;
    String Description;
    String ProductName;
    String AssetCategory;
    String Quantity;
    String CalculateType;
    String AmortizeType;
    String UsableLifeYears;
    String UsableLifeMonths;
    String AnnualDepreciation;
    String Currency;
    String PurchaseDate;
    String CancellationDate;
    String DepreciationStartDate;
    String DepreciationEndDate;
    String AssetValue;
    String ResidualAssetValue;
    String DepreciationAmount;
    String PreviouslyDepreciatedAmount;
    String DepreciatedValue;
    String DepreciatedPlan;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.SearchKey == null) ? 0 : this.SearchKey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row6Struct other = (row6Struct) obj;

      if (this.SearchKey == null) {
        if (other.SearchKey != null)
          return false;
      } else if (!this.SearchKey.equals(other.SearchKey))
        return false;

      return true;
    }

    public void copyDataTo(row6Struct other) {

      other.transactionalOrganization = this.transactionalOrganization;
      other.SearchKey = this.SearchKey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.ProductName = this.ProductName;
      other.AssetCategory = this.AssetCategory;
      other.Quantity = this.Quantity;
      other.CalculateType = this.CalculateType;
      other.AmortizeType = this.AmortizeType;
      other.UsableLifeYears = this.UsableLifeYears;
      other.UsableLifeMonths = this.UsableLifeMonths;
      other.AnnualDepreciation = this.AnnualDepreciation;
      other.Currency = this.Currency;
      other.PurchaseDate = this.PurchaseDate;
      other.CancellationDate = this.CancellationDate;
      other.DepreciationStartDate = this.DepreciationStartDate;
      other.DepreciationEndDate = this.DepreciationEndDate;
      other.AssetValue = this.AssetValue;
      other.ResidualAssetValue = this.ResidualAssetValue;
      other.DepreciationAmount = this.DepreciationAmount;
      other.PreviouslyDepreciatedAmount = this.PreviouslyDepreciatedAmount;
      other.DepreciatedValue = this.DepreciatedValue;
      other.DepreciatedPlan = this.DepreciatedPlan;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row6Struct other) {

      other.SearchKey = this.SearchKey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.transactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.transactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SearchKey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SearchKey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AssetCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AssetCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CalculateType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CalculateType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AmortizeType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AmortizeType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UsableLifeYears = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UsableLifeYears = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UsableLifeMonths = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UsableLifeMonths = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AnnualDepreciation = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AnnualDepreciation = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PurchaseDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PurchaseDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CancellationDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CancellationDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationStartDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationStartDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationEndDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationEndDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AssetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AssetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ResidualAssetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ResidualAssetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PreviouslyDepreciatedAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PreviouslyDepreciatedAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciatedValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciatedValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciatedPlan = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciatedPlan = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.transactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.transactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SearchKey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SearchKey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AssetCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AssetCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CalculateType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CalculateType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AmortizeType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AmortizeType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UsableLifeYears == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UsableLifeYears.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UsableLifeMonths == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UsableLifeMonths.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AnnualDepreciation == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AnnualDepreciation.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PurchaseDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PurchaseDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CancellationDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CancellationDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationStartDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationStartDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationEndDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationEndDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AssetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AssetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ResidualAssetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ResidualAssetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PreviouslyDepreciatedAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PreviouslyDepreciatedAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciatedValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciatedValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciatedPlan == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciatedPlan.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("transactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.transactionalOrganization));

      sb.append(", ");

      sb.append("SearchKey");
      sb.append("=");
      sb.append(String.valueOf(this.SearchKey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("AssetCategory");
      sb.append("=");
      sb.append(String.valueOf(this.AssetCategory));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("CalculateType");
      sb.append("=");
      sb.append(String.valueOf(this.CalculateType));

      sb.append(", ");

      sb.append("AmortizeType");
      sb.append("=");
      sb.append(String.valueOf(this.AmortizeType));

      sb.append(", ");

      sb.append("UsableLifeYears");
      sb.append("=");
      sb.append(String.valueOf(this.UsableLifeYears));

      sb.append(", ");

      sb.append("UsableLifeMonths");
      sb.append("=");
      sb.append(String.valueOf(this.UsableLifeMonths));

      sb.append(", ");

      sb.append("AnnualDepreciation");
      sb.append("=");
      sb.append(String.valueOf(this.AnnualDepreciation));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("PurchaseDate");
      sb.append("=");
      sb.append(String.valueOf(this.PurchaseDate));

      sb.append(", ");

      sb.append("CancellationDate");
      sb.append("=");
      sb.append(String.valueOf(this.CancellationDate));

      sb.append(", ");

      sb.append("DepreciationStartDate");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationStartDate));

      sb.append(", ");

      sb.append("DepreciationEndDate");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationEndDate));

      sb.append(", ");

      sb.append("AssetValue");
      sb.append("=");
      sb.append(String.valueOf(this.AssetValue));

      sb.append(", ");

      sb.append("ResidualAssetValue");
      sb.append("=");
      sb.append(String.valueOf(this.ResidualAssetValue));

      sb.append(", ");

      sb.append("DepreciationAmount");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationAmount));

      sb.append(", ");

      sb.append("PreviouslyDepreciatedAmount");
      sb.append("=");
      sb.append(String.valueOf(this.PreviouslyDepreciatedAmount));

      sb.append(", ");

      sb.append("DepreciatedValue");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciatedValue));

      sb.append(", ");

      sb.append("DepreciatedPlan");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciatedPlan));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.SearchKey, other.SearchKey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String transactionalOrganization;
    String SearchKey;
    String Name;
    String Description;
    String ProductName;
    String AssetCategory;
    String Quantity;
    String CalculateType;
    String AmortizeType;
    String UsableLifeYears;
    String UsableLifeMonths;
    String AnnualDepreciation;
    String Currency;
    String PurchaseDate;
    String CancellationDate;
    String DepreciationStartDate;
    String DepreciationEndDate;
    String AssetValue;
    String ResidualAssetValue;
    String DepreciationAmount;
    String PreviouslyDepreciatedAmount;
    String DepreciatedValue;
    String DepreciatedPlan;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.SearchKey == null) ? 0 : this.SearchKey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row4Struct other = (row4Struct) obj;

      if (this.SearchKey == null) {
        if (other.SearchKey != null)
          return false;
      } else if (!this.SearchKey.equals(other.SearchKey))
        return false;

      return true;
    }

    public void copyDataTo(row4Struct other) {

      other.transactionalOrganization = this.transactionalOrganization;
      other.SearchKey = this.SearchKey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.ProductName = this.ProductName;
      other.AssetCategory = this.AssetCategory;
      other.Quantity = this.Quantity;
      other.CalculateType = this.CalculateType;
      other.AmortizeType = this.AmortizeType;
      other.UsableLifeYears = this.UsableLifeYears;
      other.UsableLifeMonths = this.UsableLifeMonths;
      other.AnnualDepreciation = this.AnnualDepreciation;
      other.Currency = this.Currency;
      other.PurchaseDate = this.PurchaseDate;
      other.CancellationDate = this.CancellationDate;
      other.DepreciationStartDate = this.DepreciationStartDate;
      other.DepreciationEndDate = this.DepreciationEndDate;
      other.AssetValue = this.AssetValue;
      other.ResidualAssetValue = this.ResidualAssetValue;
      other.DepreciationAmount = this.DepreciationAmount;
      other.PreviouslyDepreciatedAmount = this.PreviouslyDepreciatedAmount;
      other.DepreciatedValue = this.DepreciatedValue;
      other.DepreciatedPlan = this.DepreciatedPlan;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row4Struct other) {

      other.SearchKey = this.SearchKey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.transactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.transactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SearchKey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SearchKey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AssetCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AssetCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CalculateType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CalculateType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AmortizeType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AmortizeType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UsableLifeYears = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UsableLifeYears = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UsableLifeMonths = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UsableLifeMonths = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AnnualDepreciation = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AnnualDepreciation = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PurchaseDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PurchaseDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CancellationDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CancellationDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationStartDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationStartDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationEndDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationEndDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AssetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AssetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ResidualAssetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ResidualAssetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PreviouslyDepreciatedAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PreviouslyDepreciatedAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciatedValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciatedValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciatedPlan = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciatedPlan = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.transactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.transactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SearchKey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SearchKey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AssetCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AssetCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CalculateType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CalculateType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AmortizeType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AmortizeType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UsableLifeYears == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UsableLifeYears.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UsableLifeMonths == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UsableLifeMonths.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AnnualDepreciation == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AnnualDepreciation.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PurchaseDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PurchaseDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CancellationDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CancellationDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationStartDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationStartDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationEndDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationEndDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AssetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AssetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ResidualAssetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ResidualAssetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PreviouslyDepreciatedAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PreviouslyDepreciatedAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciatedValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciatedValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciatedPlan == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciatedPlan.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("transactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.transactionalOrganization));

      sb.append(", ");

      sb.append("SearchKey");
      sb.append("=");
      sb.append(String.valueOf(this.SearchKey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("AssetCategory");
      sb.append("=");
      sb.append(String.valueOf(this.AssetCategory));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("CalculateType");
      sb.append("=");
      sb.append(String.valueOf(this.CalculateType));

      sb.append(", ");

      sb.append("AmortizeType");
      sb.append("=");
      sb.append(String.valueOf(this.AmortizeType));

      sb.append(", ");

      sb.append("UsableLifeYears");
      sb.append("=");
      sb.append(String.valueOf(this.UsableLifeYears));

      sb.append(", ");

      sb.append("UsableLifeMonths");
      sb.append("=");
      sb.append(String.valueOf(this.UsableLifeMonths));

      sb.append(", ");

      sb.append("AnnualDepreciation");
      sb.append("=");
      sb.append(String.valueOf(this.AnnualDepreciation));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("PurchaseDate");
      sb.append("=");
      sb.append(String.valueOf(this.PurchaseDate));

      sb.append(", ");

      sb.append("CancellationDate");
      sb.append("=");
      sb.append(String.valueOf(this.CancellationDate));

      sb.append(", ");

      sb.append("DepreciationStartDate");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationStartDate));

      sb.append(", ");

      sb.append("DepreciationEndDate");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationEndDate));

      sb.append(", ");

      sb.append("AssetValue");
      sb.append("=");
      sb.append(String.valueOf(this.AssetValue));

      sb.append(", ");

      sb.append("ResidualAssetValue");
      sb.append("=");
      sb.append(String.valueOf(this.ResidualAssetValue));

      sb.append(", ");

      sb.append("DepreciationAmount");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationAmount));

      sb.append(", ");

      sb.append("PreviouslyDepreciatedAmount");
      sb.append("=");
      sb.append(String.valueOf(this.PreviouslyDepreciatedAmount));

      sb.append(", ");

      sb.append("DepreciatedValue");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciatedValue));

      sb.append(", ");

      sb.append("DepreciatedPlan");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciatedPlan));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.SearchKey, other.SearchKey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String transactionalOrganization;
    String SearchKey;
    String Name;
    String Description;
    String ProductName;
    String AssetCategory;
    String Quantity;
    String CalculateType;
    String AmortizeType;
    String UsableLifeYears;
    String UsableLifeMonths;
    String AnnualDepreciation;
    String Currency;
    String PurchaseDate;
    String CancellationDate;
    String DepreciationStartDate;
    String DepreciationEndDate;
    String AssetValue;
    String ResidualAssetValue;
    String DepreciationAmount;
    String PreviouslyDepreciatedAmount;
    String DepreciatedValue;
    String DepreciatedPlan;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.SearchKey == null) ? 0 : this.SearchKey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row5Struct other = (row5Struct) obj;

      if (this.SearchKey == null) {
        if (other.SearchKey != null)
          return false;
      } else if (!this.SearchKey.equals(other.SearchKey))
        return false;

      return true;
    }

    public void copyDataTo(row5Struct other) {

      other.transactionalOrganization = this.transactionalOrganization;
      other.SearchKey = this.SearchKey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.ProductName = this.ProductName;
      other.AssetCategory = this.AssetCategory;
      other.Quantity = this.Quantity;
      other.CalculateType = this.CalculateType;
      other.AmortizeType = this.AmortizeType;
      other.UsableLifeYears = this.UsableLifeYears;
      other.UsableLifeMonths = this.UsableLifeMonths;
      other.AnnualDepreciation = this.AnnualDepreciation;
      other.Currency = this.Currency;
      other.PurchaseDate = this.PurchaseDate;
      other.CancellationDate = this.CancellationDate;
      other.DepreciationStartDate = this.DepreciationStartDate;
      other.DepreciationEndDate = this.DepreciationEndDate;
      other.AssetValue = this.AssetValue;
      other.ResidualAssetValue = this.ResidualAssetValue;
      other.DepreciationAmount = this.DepreciationAmount;
      other.PreviouslyDepreciatedAmount = this.PreviouslyDepreciatedAmount;
      other.DepreciatedValue = this.DepreciatedValue;
      other.DepreciatedPlan = this.DepreciatedPlan;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row5Struct other) {

      other.SearchKey = this.SearchKey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.transactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.transactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SearchKey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SearchKey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AssetCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AssetCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CalculateType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CalculateType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AmortizeType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AmortizeType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UsableLifeYears = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UsableLifeYears = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UsableLifeMonths = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UsableLifeMonths = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AnnualDepreciation = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AnnualDepreciation = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PurchaseDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PurchaseDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CancellationDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CancellationDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationStartDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationStartDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationEndDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationEndDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AssetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AssetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ResidualAssetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ResidualAssetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PreviouslyDepreciatedAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PreviouslyDepreciatedAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciatedValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciatedValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciatedPlan = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciatedPlan = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.transactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.transactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SearchKey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SearchKey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AssetCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AssetCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CalculateType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CalculateType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AmortizeType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AmortizeType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UsableLifeYears == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UsableLifeYears.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UsableLifeMonths == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UsableLifeMonths.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AnnualDepreciation == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AnnualDepreciation.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PurchaseDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PurchaseDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CancellationDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CancellationDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationStartDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationStartDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationEndDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationEndDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AssetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AssetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ResidualAssetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ResidualAssetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PreviouslyDepreciatedAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PreviouslyDepreciatedAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciatedValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciatedValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciatedPlan == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciatedPlan.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("transactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.transactionalOrganization));

      sb.append(", ");

      sb.append("SearchKey");
      sb.append("=");
      sb.append(String.valueOf(this.SearchKey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("AssetCategory");
      sb.append("=");
      sb.append(String.valueOf(this.AssetCategory));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("CalculateType");
      sb.append("=");
      sb.append(String.valueOf(this.CalculateType));

      sb.append(", ");

      sb.append("AmortizeType");
      sb.append("=");
      sb.append(String.valueOf(this.AmortizeType));

      sb.append(", ");

      sb.append("UsableLifeYears");
      sb.append("=");
      sb.append(String.valueOf(this.UsableLifeYears));

      sb.append(", ");

      sb.append("UsableLifeMonths");
      sb.append("=");
      sb.append(String.valueOf(this.UsableLifeMonths));

      sb.append(", ");

      sb.append("AnnualDepreciation");
      sb.append("=");
      sb.append(String.valueOf(this.AnnualDepreciation));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("PurchaseDate");
      sb.append("=");
      sb.append(String.valueOf(this.PurchaseDate));

      sb.append(", ");

      sb.append("CancellationDate");
      sb.append("=");
      sb.append(String.valueOf(this.CancellationDate));

      sb.append(", ");

      sb.append("DepreciationStartDate");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationStartDate));

      sb.append(", ");

      sb.append("DepreciationEndDate");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationEndDate));

      sb.append(", ");

      sb.append("AssetValue");
      sb.append("=");
      sb.append(String.valueOf(this.AssetValue));

      sb.append(", ");

      sb.append("ResidualAssetValue");
      sb.append("=");
      sb.append(String.valueOf(this.ResidualAssetValue));

      sb.append(", ");

      sb.append("DepreciationAmount");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationAmount));

      sb.append(", ");

      sb.append("PreviouslyDepreciatedAmount");
      sb.append("=");
      sb.append(String.valueOf(this.PreviouslyDepreciatedAmount));

      sb.append(", ");

      sb.append("DepreciatedValue");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciatedValue));

      sb.append(", ");

      sb.append("DepreciatedPlan");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciatedPlan));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.SearchKey, other.SearchKey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String transactionalOrganization;
    String SearchKey;
    String Name;
    String Description;
    String ProductName;
    String AssetCategory;
    String Quantity;
    String CalculateType;
    String AmortizeType;
    String UsableLifeYears;
    String UsableLifeMonths;
    String AnnualDepreciation;
    String Currency;
    String PurchaseDate;
    String CancellationDate;
    String DepreciationStartDate;
    String DepreciationEndDate;
    String AssetValue;
    String ResidualAssetValue;
    String DepreciationAmount;
    String PreviouslyDepreciatedAmount;
    String DepreciatedValue;
    String DepreciatedPlan;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.SearchKey == null) ? 0 : this.SearchKey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row3Struct other = (row3Struct) obj;

      if (this.SearchKey == null) {
        if (other.SearchKey != null)
          return false;
      } else if (!this.SearchKey.equals(other.SearchKey))
        return false;

      return true;
    }

    public void copyDataTo(row3Struct other) {

      other.transactionalOrganization = this.transactionalOrganization;
      other.SearchKey = this.SearchKey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.ProductName = this.ProductName;
      other.AssetCategory = this.AssetCategory;
      other.Quantity = this.Quantity;
      other.CalculateType = this.CalculateType;
      other.AmortizeType = this.AmortizeType;
      other.UsableLifeYears = this.UsableLifeYears;
      other.UsableLifeMonths = this.UsableLifeMonths;
      other.AnnualDepreciation = this.AnnualDepreciation;
      other.Currency = this.Currency;
      other.PurchaseDate = this.PurchaseDate;
      other.CancellationDate = this.CancellationDate;
      other.DepreciationStartDate = this.DepreciationStartDate;
      other.DepreciationEndDate = this.DepreciationEndDate;
      other.AssetValue = this.AssetValue;
      other.ResidualAssetValue = this.ResidualAssetValue;
      other.DepreciationAmount = this.DepreciationAmount;
      other.PreviouslyDepreciatedAmount = this.PreviouslyDepreciatedAmount;
      other.DepreciatedValue = this.DepreciatedValue;
      other.DepreciatedPlan = this.DepreciatedPlan;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row3Struct other) {

      other.SearchKey = this.SearchKey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.transactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.transactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SearchKey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SearchKey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AssetCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AssetCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CalculateType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CalculateType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AmortizeType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AmortizeType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UsableLifeYears = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UsableLifeYears = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UsableLifeMonths = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UsableLifeMonths = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AnnualDepreciation = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AnnualDepreciation = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PurchaseDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PurchaseDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CancellationDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CancellationDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationStartDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationStartDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationEndDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationEndDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AssetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AssetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ResidualAssetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ResidualAssetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PreviouslyDepreciatedAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PreviouslyDepreciatedAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciatedValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciatedValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciatedPlan = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciatedPlan = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.transactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.transactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SearchKey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SearchKey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AssetCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AssetCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CalculateType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CalculateType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AmortizeType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AmortizeType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UsableLifeYears == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UsableLifeYears.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UsableLifeMonths == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UsableLifeMonths.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AnnualDepreciation == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AnnualDepreciation.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PurchaseDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PurchaseDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CancellationDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CancellationDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationStartDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationStartDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationEndDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationEndDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AssetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AssetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ResidualAssetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ResidualAssetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PreviouslyDepreciatedAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PreviouslyDepreciatedAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciatedValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciatedValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciatedPlan == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciatedPlan.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("transactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.transactionalOrganization));

      sb.append(", ");

      sb.append("SearchKey");
      sb.append("=");
      sb.append(String.valueOf(this.SearchKey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("AssetCategory");
      sb.append("=");
      sb.append(String.valueOf(this.AssetCategory));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("CalculateType");
      sb.append("=");
      sb.append(String.valueOf(this.CalculateType));

      sb.append(", ");

      sb.append("AmortizeType");
      sb.append("=");
      sb.append(String.valueOf(this.AmortizeType));

      sb.append(", ");

      sb.append("UsableLifeYears");
      sb.append("=");
      sb.append(String.valueOf(this.UsableLifeYears));

      sb.append(", ");

      sb.append("UsableLifeMonths");
      sb.append("=");
      sb.append(String.valueOf(this.UsableLifeMonths));

      sb.append(", ");

      sb.append("AnnualDepreciation");
      sb.append("=");
      sb.append(String.valueOf(this.AnnualDepreciation));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("PurchaseDate");
      sb.append("=");
      sb.append(String.valueOf(this.PurchaseDate));

      sb.append(", ");

      sb.append("CancellationDate");
      sb.append("=");
      sb.append(String.valueOf(this.CancellationDate));

      sb.append(", ");

      sb.append("DepreciationStartDate");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationStartDate));

      sb.append(", ");

      sb.append("DepreciationEndDate");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationEndDate));

      sb.append(", ");

      sb.append("AssetValue");
      sb.append("=");
      sb.append(String.valueOf(this.AssetValue));

      sb.append(", ");

      sb.append("ResidualAssetValue");
      sb.append("=");
      sb.append(String.valueOf(this.ResidualAssetValue));

      sb.append(", ");

      sb.append("DepreciationAmount");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationAmount));

      sb.append(", ");

      sb.append("PreviouslyDepreciatedAmount");
      sb.append("=");
      sb.append(String.valueOf(this.PreviouslyDepreciatedAmount));

      sb.append(", ");

      sb.append("DepreciatedValue");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciatedValue));

      sb.append(", ");

      sb.append("DepreciatedPlan");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciatedPlan));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.SearchKey, other.SearchKey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String transactionalOrganization;
    String SearchKey;
    String Name;
    String Description;
    String ProductName;
    String AssetCategory;
    String Quantity;
    String CalculateType;
    String AmortizeType;
    String UsableLifeYears;
    String UsableLifeMonths;
    String AnnualDepreciation;
    String Currency;
    String PurchaseDate;
    String CancellationDate;
    String DepreciationStartDate;
    String DepreciationEndDate;
    String AssetValue;
    String ResidualAssetValue;
    String DepreciationAmount;
    String PreviouslyDepreciatedAmount;
    String DepreciatedValue;
    String DepreciatedPlan;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.SearchKey == null) ? 0 : this.SearchKey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row10Struct other = (row10Struct) obj;

      if (this.SearchKey == null) {
        if (other.SearchKey != null)
          return false;
      } else if (!this.SearchKey.equals(other.SearchKey))
        return false;

      return true;
    }

    public void copyDataTo(row10Struct other) {

      other.transactionalOrganization = this.transactionalOrganization;
      other.SearchKey = this.SearchKey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.ProductName = this.ProductName;
      other.AssetCategory = this.AssetCategory;
      other.Quantity = this.Quantity;
      other.CalculateType = this.CalculateType;
      other.AmortizeType = this.AmortizeType;
      other.UsableLifeYears = this.UsableLifeYears;
      other.UsableLifeMonths = this.UsableLifeMonths;
      other.AnnualDepreciation = this.AnnualDepreciation;
      other.Currency = this.Currency;
      other.PurchaseDate = this.PurchaseDate;
      other.CancellationDate = this.CancellationDate;
      other.DepreciationStartDate = this.DepreciationStartDate;
      other.DepreciationEndDate = this.DepreciationEndDate;
      other.AssetValue = this.AssetValue;
      other.ResidualAssetValue = this.ResidualAssetValue;
      other.DepreciationAmount = this.DepreciationAmount;
      other.PreviouslyDepreciatedAmount = this.PreviouslyDepreciatedAmount;
      other.DepreciatedValue = this.DepreciatedValue;
      other.DepreciatedPlan = this.DepreciatedPlan;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row10Struct other) {

      other.SearchKey = this.SearchKey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.transactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.transactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SearchKey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SearchKey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AssetCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AssetCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CalculateType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CalculateType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AmortizeType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AmortizeType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UsableLifeYears = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UsableLifeYears = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UsableLifeMonths = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UsableLifeMonths = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AnnualDepreciation = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AnnualDepreciation = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PurchaseDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PurchaseDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CancellationDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CancellationDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationStartDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationStartDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationEndDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationEndDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AssetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AssetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ResidualAssetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ResidualAssetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PreviouslyDepreciatedAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PreviouslyDepreciatedAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciatedValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciatedValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciatedPlan = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciatedPlan = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.transactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.transactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SearchKey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SearchKey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AssetCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AssetCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CalculateType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CalculateType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AmortizeType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AmortizeType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UsableLifeYears == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UsableLifeYears.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UsableLifeMonths == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UsableLifeMonths.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AnnualDepreciation == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AnnualDepreciation.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PurchaseDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PurchaseDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CancellationDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CancellationDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationStartDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationStartDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationEndDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationEndDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AssetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AssetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ResidualAssetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ResidualAssetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PreviouslyDepreciatedAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PreviouslyDepreciatedAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciatedValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciatedValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciatedPlan == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciatedPlan.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("transactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.transactionalOrganization));

      sb.append(", ");

      sb.append("SearchKey");
      sb.append("=");
      sb.append(String.valueOf(this.SearchKey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("AssetCategory");
      sb.append("=");
      sb.append(String.valueOf(this.AssetCategory));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("CalculateType");
      sb.append("=");
      sb.append(String.valueOf(this.CalculateType));

      sb.append(", ");

      sb.append("AmortizeType");
      sb.append("=");
      sb.append(String.valueOf(this.AmortizeType));

      sb.append(", ");

      sb.append("UsableLifeYears");
      sb.append("=");
      sb.append(String.valueOf(this.UsableLifeYears));

      sb.append(", ");

      sb.append("UsableLifeMonths");
      sb.append("=");
      sb.append(String.valueOf(this.UsableLifeMonths));

      sb.append(", ");

      sb.append("AnnualDepreciation");
      sb.append("=");
      sb.append(String.valueOf(this.AnnualDepreciation));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("PurchaseDate");
      sb.append("=");
      sb.append(String.valueOf(this.PurchaseDate));

      sb.append(", ");

      sb.append("CancellationDate");
      sb.append("=");
      sb.append(String.valueOf(this.CancellationDate));

      sb.append(", ");

      sb.append("DepreciationStartDate");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationStartDate));

      sb.append(", ");

      sb.append("DepreciationEndDate");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationEndDate));

      sb.append(", ");

      sb.append("AssetValue");
      sb.append("=");
      sb.append(String.valueOf(this.AssetValue));

      sb.append(", ");

      sb.append("ResidualAssetValue");
      sb.append("=");
      sb.append(String.valueOf(this.ResidualAssetValue));

      sb.append(", ");

      sb.append("DepreciationAmount");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationAmount));

      sb.append(", ");

      sb.append("PreviouslyDepreciatedAmount");
      sb.append("=");
      sb.append(String.valueOf(this.PreviouslyDepreciatedAmount));

      sb.append(", ");

      sb.append("DepreciatedValue");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciatedValue));

      sb.append(", ");

      sb.append("DepreciatedPlan");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciatedPlan));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.SearchKey, other.SearchKey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String transactionalOrganization;
    String SearchKey;
    String Name;
    String Description;
    String ProductName;
    String AssetCategory;
    String Quantity;
    String CalculateType;
    String AmortizeType;
    String UsableLifeYears;
    String UsableLifeMonths;
    String AnnualDepreciation;
    String Currency;
    String PurchaseDate;
    String CancellationDate;
    String DepreciationStartDate;
    String DepreciationEndDate;
    String AssetValue;
    String ResidualAssetValue;
    String DepreciationAmount;
    String PreviouslyDepreciatedAmount;
    String DepreciatedValue;
    String DepreciatedPlan;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.SearchKey == null) ? 0 : this.SearchKey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row2Struct other = (row2Struct) obj;

      if (this.SearchKey == null) {
        if (other.SearchKey != null)
          return false;
      } else if (!this.SearchKey.equals(other.SearchKey))
        return false;

      return true;
    }

    public void copyDataTo(row2Struct other) {

      other.transactionalOrganization = this.transactionalOrganization;
      other.SearchKey = this.SearchKey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.ProductName = this.ProductName;
      other.AssetCategory = this.AssetCategory;
      other.Quantity = this.Quantity;
      other.CalculateType = this.CalculateType;
      other.AmortizeType = this.AmortizeType;
      other.UsableLifeYears = this.UsableLifeYears;
      other.UsableLifeMonths = this.UsableLifeMonths;
      other.AnnualDepreciation = this.AnnualDepreciation;
      other.Currency = this.Currency;
      other.PurchaseDate = this.PurchaseDate;
      other.CancellationDate = this.CancellationDate;
      other.DepreciationStartDate = this.DepreciationStartDate;
      other.DepreciationEndDate = this.DepreciationEndDate;
      other.AssetValue = this.AssetValue;
      other.ResidualAssetValue = this.ResidualAssetValue;
      other.DepreciationAmount = this.DepreciationAmount;
      other.PreviouslyDepreciatedAmount = this.PreviouslyDepreciatedAmount;
      other.DepreciatedValue = this.DepreciatedValue;
      other.DepreciatedPlan = this.DepreciatedPlan;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row2Struct other) {

      other.SearchKey = this.SearchKey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.transactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.transactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SearchKey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SearchKey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AssetCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AssetCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CalculateType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CalculateType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AmortizeType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AmortizeType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UsableLifeYears = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UsableLifeYears = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UsableLifeMonths = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UsableLifeMonths = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AnnualDepreciation = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AnnualDepreciation = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PurchaseDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PurchaseDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CancellationDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CancellationDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationStartDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationStartDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationEndDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationEndDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AssetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AssetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ResidualAssetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ResidualAssetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PreviouslyDepreciatedAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PreviouslyDepreciatedAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciatedValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciatedValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciatedPlan = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciatedPlan = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.transactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.transactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SearchKey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SearchKey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AssetCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AssetCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CalculateType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CalculateType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AmortizeType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AmortizeType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UsableLifeYears == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UsableLifeYears.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UsableLifeMonths == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UsableLifeMonths.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AnnualDepreciation == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AnnualDepreciation.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PurchaseDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PurchaseDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CancellationDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CancellationDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationStartDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationStartDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationEndDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationEndDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AssetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AssetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ResidualAssetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ResidualAssetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PreviouslyDepreciatedAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PreviouslyDepreciatedAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciatedValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciatedValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciatedPlan == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciatedPlan.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("transactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.transactionalOrganization));

      sb.append(", ");

      sb.append("SearchKey");
      sb.append("=");
      sb.append(String.valueOf(this.SearchKey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("AssetCategory");
      sb.append("=");
      sb.append(String.valueOf(this.AssetCategory));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("CalculateType");
      sb.append("=");
      sb.append(String.valueOf(this.CalculateType));

      sb.append(", ");

      sb.append("AmortizeType");
      sb.append("=");
      sb.append(String.valueOf(this.AmortizeType));

      sb.append(", ");

      sb.append("UsableLifeYears");
      sb.append("=");
      sb.append(String.valueOf(this.UsableLifeYears));

      sb.append(", ");

      sb.append("UsableLifeMonths");
      sb.append("=");
      sb.append(String.valueOf(this.UsableLifeMonths));

      sb.append(", ");

      sb.append("AnnualDepreciation");
      sb.append("=");
      sb.append(String.valueOf(this.AnnualDepreciation));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("PurchaseDate");
      sb.append("=");
      sb.append(String.valueOf(this.PurchaseDate));

      sb.append(", ");

      sb.append("CancellationDate");
      sb.append("=");
      sb.append(String.valueOf(this.CancellationDate));

      sb.append(", ");

      sb.append("DepreciationStartDate");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationStartDate));

      sb.append(", ");

      sb.append("DepreciationEndDate");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationEndDate));

      sb.append(", ");

      sb.append("AssetValue");
      sb.append("=");
      sb.append(String.valueOf(this.AssetValue));

      sb.append(", ");

      sb.append("ResidualAssetValue");
      sb.append("=");
      sb.append(String.valueOf(this.ResidualAssetValue));

      sb.append(", ");

      sb.append("DepreciationAmount");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationAmount));

      sb.append(", ");

      sb.append("PreviouslyDepreciatedAmount");
      sb.append("=");
      sb.append(String.valueOf(this.PreviouslyDepreciatedAmount));

      sb.append(", ");

      sb.append("DepreciatedValue");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciatedValue));

      sb.append(", ");

      sb.append("DepreciatedPlan");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciatedPlan));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.SearchKey, other.SearchKey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String transactionalOrganization;
    String SearchKey;
    String Name;
    String Description;
    String ProductName;
    String AssetCategory;
    String Quantity;
    String CalculateType;
    String AmortizeType;
    String UsableLifeYears;
    String UsableLifeMonths;
    String AnnualDepreciation;
    String Currency;
    String PurchaseDate;
    String CancellationDate;
    String DepreciationStartDate;
    String DepreciationEndDate;
    String AssetValue;
    String ResidualAssetValue;
    String DepreciationAmount;
    String PreviouslyDepreciatedAmount;
    String DepreciatedValue;
    String DepreciatedPlan;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.SearchKey == null) ? 0 : this.SearchKey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row1Struct other = (row1Struct) obj;

      if (this.SearchKey == null) {
        if (other.SearchKey != null)
          return false;
      } else if (!this.SearchKey.equals(other.SearchKey))
        return false;

      return true;
    }

    public void copyDataTo(row1Struct other) {

      other.transactionalOrganization = this.transactionalOrganization;
      other.SearchKey = this.SearchKey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.ProductName = this.ProductName;
      other.AssetCategory = this.AssetCategory;
      other.Quantity = this.Quantity;
      other.CalculateType = this.CalculateType;
      other.AmortizeType = this.AmortizeType;
      other.UsableLifeYears = this.UsableLifeYears;
      other.UsableLifeMonths = this.UsableLifeMonths;
      other.AnnualDepreciation = this.AnnualDepreciation;
      other.Currency = this.Currency;
      other.PurchaseDate = this.PurchaseDate;
      other.CancellationDate = this.CancellationDate;
      other.DepreciationStartDate = this.DepreciationStartDate;
      other.DepreciationEndDate = this.DepreciationEndDate;
      other.AssetValue = this.AssetValue;
      other.ResidualAssetValue = this.ResidualAssetValue;
      other.DepreciationAmount = this.DepreciationAmount;
      other.PreviouslyDepreciatedAmount = this.PreviouslyDepreciatedAmount;
      other.DepreciatedValue = this.DepreciatedValue;
      other.DepreciatedPlan = this.DepreciatedPlan;

    }

    public void copyKeysDataTo(row1Struct other) {

      other.SearchKey = this.SearchKey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.transactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.transactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SearchKey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SearchKey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AssetCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AssetCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CalculateType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CalculateType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AmortizeType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AmortizeType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UsableLifeYears = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UsableLifeYears = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UsableLifeMonths = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UsableLifeMonths = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AnnualDepreciation = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AnnualDepreciation = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PurchaseDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PurchaseDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CancellationDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CancellationDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationStartDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationStartDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationEndDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationEndDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AssetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AssetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ResidualAssetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ResidualAssetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciationAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciationAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PreviouslyDepreciatedAmount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PreviouslyDepreciatedAmount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciatedValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciatedValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DepreciatedPlan = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DepreciatedPlan = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.transactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.transactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SearchKey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SearchKey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AssetCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AssetCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CalculateType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CalculateType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AmortizeType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AmortizeType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UsableLifeYears == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UsableLifeYears.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UsableLifeMonths == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UsableLifeMonths.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AnnualDepreciation == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AnnualDepreciation.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PurchaseDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PurchaseDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CancellationDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CancellationDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationStartDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationStartDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationEndDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationEndDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AssetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AssetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ResidualAssetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ResidualAssetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciationAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciationAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PreviouslyDepreciatedAmount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PreviouslyDepreciatedAmount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciatedValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciatedValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DepreciatedPlan == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DepreciatedPlan.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("transactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.transactionalOrganization));

      sb.append(", ");

      sb.append("SearchKey");
      sb.append("=");
      sb.append(String.valueOf(this.SearchKey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("AssetCategory");
      sb.append("=");
      sb.append(String.valueOf(this.AssetCategory));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("CalculateType");
      sb.append("=");
      sb.append(String.valueOf(this.CalculateType));

      sb.append(", ");

      sb.append("AmortizeType");
      sb.append("=");
      sb.append(String.valueOf(this.AmortizeType));

      sb.append(", ");

      sb.append("UsableLifeYears");
      sb.append("=");
      sb.append(String.valueOf(this.UsableLifeYears));

      sb.append(", ");

      sb.append("UsableLifeMonths");
      sb.append("=");
      sb.append(String.valueOf(this.UsableLifeMonths));

      sb.append(", ");

      sb.append("AnnualDepreciation");
      sb.append("=");
      sb.append(String.valueOf(this.AnnualDepreciation));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("PurchaseDate");
      sb.append("=");
      sb.append(String.valueOf(this.PurchaseDate));

      sb.append(", ");

      sb.append("CancellationDate");
      sb.append("=");
      sb.append(String.valueOf(this.CancellationDate));

      sb.append(", ");

      sb.append("DepreciationStartDate");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationStartDate));

      sb.append(", ");

      sb.append("DepreciationEndDate");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationEndDate));

      sb.append(", ");

      sb.append("AssetValue");
      sb.append("=");
      sb.append(String.valueOf(this.AssetValue));

      sb.append(", ");

      sb.append("ResidualAssetValue");
      sb.append("=");
      sb.append(String.valueOf(this.ResidualAssetValue));

      sb.append(", ");

      sb.append("DepreciationAmount");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciationAmount));

      sb.append(", ");

      sb.append("PreviouslyDepreciatedAmount");
      sb.append("=");
      sb.append(String.valueOf(this.PreviouslyDepreciatedAmount));

      sb.append(", ");

      sb.append("DepreciatedValue");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciatedValue));

      sb.append(", ");

      sb.append("DepreciatedPlan");
      sb.append("=");
      sb.append(String.valueOf(this.DepreciatedPlan));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.SearchKey, other.SearchKey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap)
      throws TalendException {
    globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

    String currentComponent = "";

    try {

      row1Struct row1 = new row1Struct();
      row2Struct row2 = new row2Struct();
      row3Struct row3 = new row3Struct();
      row5Struct row5 = new row5Struct();
      row6Struct row6 = new row6Struct();
      row4Struct row4 = new row4Struct();
      row10Struct row10 = new row10Struct();

      /**
       * [tJavaRow_9 begin ] start
       */

      ok_Hash.put("tJavaRow_9", false);
      start_Hash.put("tJavaRow_9", System.currentTimeMillis());
      currentComponent = "tJavaRow_9";

      int nb_line_tJavaRow_9 = 0;

      /**
       * [tJavaRow_9 begin ] stop
       */

      /**
       * [tJavaRow_4 begin ] start
       */

      ok_Hash.put("tJavaRow_4", false);
      start_Hash.put("tJavaRow_4", System.currentTimeMillis());
      currentComponent = "tJavaRow_4";

      int nb_line_tJavaRow_4 = 0;

      /**
       * [tJavaRow_4 begin ] stop
       */

      /**
       * [tFilterRow_2 begin ] start
       */

      ok_Hash.put("tFilterRow_2", false);
      start_Hash.put("tFilterRow_2", System.currentTimeMillis());
      currentComponent = "tFilterRow_2";

      int nb_line_tFilterRow_2 = 0;
      int nb_line_ok_tFilterRow_2 = 0;
      int nb_line_reject_tFilterRow_2 = 0;

      /**
       * [tFilterRow_2 begin ] stop
       */

      /**
       * [tJavaRow_3 begin ] start
       */

      ok_Hash.put("tJavaRow_3", false);
      start_Hash.put("tJavaRow_3", System.currentTimeMillis());
      currentComponent = "tJavaRow_3";

      int nb_line_tJavaRow_3 = 0;

      /**
       * [tJavaRow_3 begin ] stop
       */

      /**
       * [tJavaRow_2 begin ] start
       */

      ok_Hash.put("tJavaRow_2", false);
      start_Hash.put("tJavaRow_2", System.currentTimeMillis());
      currentComponent = "tJavaRow_2";

      int nb_line_tJavaRow_2 = 0;

      /**
       * [tJavaRow_2 begin ] stop
       */

      /**
       * [tFilterRow_1 begin ] start
       */

      ok_Hash.put("tFilterRow_1", false);
      start_Hash.put("tFilterRow_1", System.currentTimeMillis());
      currentComponent = "tFilterRow_1";

      int nb_line_tFilterRow_1 = 0;
      int nb_line_ok_tFilterRow_1 = 0;
      int nb_line_reject_tFilterRow_1 = 0;

      /**
       * [tFilterRow_1 begin ] stop
       */

      /**
       * [tJavaRow_1 begin ] start
       */

      ok_Hash.put("tJavaRow_1", false);
      start_Hash.put("tJavaRow_1", System.currentTimeMillis());
      currentComponent = "tJavaRow_1";

      int nb_line_tJavaRow_1 = 0;

      /**
       * [tJavaRow_1 begin ] stop
       */

      /**
       * [tFileInputDelimited_1 begin ] start
       */

      ok_Hash.put("tFileInputDelimited_1", false);
      start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
      currentComponent = "tFileInputDelimited_1";

      int nb_line_tFileInputDelimited_1 = 0;
      int footer_tFileInputDelimited_1 = 0;
      int totalLinetFileInputDelimited_1 = 0;
      int limittFileInputDelimited_1 = -1;
      int lastLinetFileInputDelimited_1 = -1;

      char fieldSeparator_tFileInputDelimited_1[] = null;

      // support passing value (property: Field Separator) by 'context.fs'
      // or 'globalMap.get("fs")'.
      if (((String) ",").length() > 0) {
        fieldSeparator_tFileInputDelimited_1 = ((String) ",").toCharArray();
      } else {
        throw new IllegalArgumentException("Field Separator must be assigned a char.");
      }

      char rowSeparator_tFileInputDelimited_1[] = null;

      // support passing value (property: Row Separator) by 'context.rs'
      // or 'globalMap.get("rs")'.
      if (((String) "\n").length() > 0) {
        rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
      } else {
        throw new IllegalArgumentException("Row Separator must be assigned a char.");
      }

      com.csvreader.CsvReader csvReadertFileInputDelimited_1 = new com.csvreader.CsvReader(
          new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(/**
           * 
           * Start field tFileInputDelimited_1:FILENAME
           */
          context.getProperty("filename")/**
           * End field tFileInputDelimited_1:FILENAME
           */
          ), "UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);

      if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
          && (rowSeparator_tFileInputDelimited_1[0] != '\r'))
        csvReadertFileInputDelimited_1.setRecordDelimiter(rowSeparator_tFileInputDelimited_1[0]);

      csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
      csvReadertFileInputDelimited_1.setTextQualifier('"');

      csvReadertFileInputDelimited_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      String[] rowtFileInputDelimited_1 = null;

      if (footer_tFileInputDelimited_1 > 0) {

        while (csvReadertFileInputDelimited_1.readRecord()) {
          rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();
          if (!(rowtFileInputDelimited_1.length == 1 && rowtFileInputDelimited_1[0].equals("\015"))) {// empty
            // line
            // when
            // row
            // separator
            // is '\n'

            totalLinetFileInputDelimited_1++;

          }

        }
        int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
            - footer_tFileInputDelimited_1 < 0 ? 0 : totalLinetFileInputDelimited_1
            - footer_tFileInputDelimited_1;
        if (lastLinetFileInputDelimited_1 > 0) {
          lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
              : lastLineTemptFileInputDelimited_1;
        } else {
          lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
        }

        csvReadertFileInputDelimited_1.close();

        csvReadertFileInputDelimited_1 = new com.csvreader.CsvReader(new java.io.BufferedReader(
            new java.io.InputStreamReader(new java.io.FileInputStream(/**
             * Start field
             * tFileInputDelimited_1:FILENAME
             */
            context.getProperty("filename")/**
             * End field tFileInputDelimited_1:FILENAME
             */
            ), "UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);

        if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
            && (rowSeparator_tFileInputDelimited_1[0] != '\r'))
          csvReadertFileInputDelimited_1.setRecordDelimiter(rowSeparator_tFileInputDelimited_1[0]);
        csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
        csvReadertFileInputDelimited_1.setTextQualifier('"');
        csvReadertFileInputDelimited_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      }

      int currentLinetFileInputDelimited_1 = 0;
      int outputLinetFileInputDelimited_1 = 0;

      while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1.readRecord()) {

        rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

        if (rowtFileInputDelimited_1.length == 1 && rowtFileInputDelimited_1[0].equals("\015")) {// empty
          // line
          // when
          // row
          // separator
          // is
          // '\n'
          continue;
        }

        currentLinetFileInputDelimited_1++;
        if (currentLinetFileInputDelimited_1 < 1 + 1) {
          continue;
        }

        if (lastLinetFileInputDelimited_1 > -1
            && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
          break;
        }
        outputLinetFileInputDelimited_1++;
        if (limittFileInputDelimited_1 > 0
            && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
          break;
        }

        row1 = null;
        row1 = new row1Struct();
        try {

          if (rowtFileInputDelimited_1.length == 1 && rowtFileInputDelimited_1[0].equals("\015")) {// empty
            // line
            // when
            // row
            // separator
            // is
            // '\n'

            row1.transactionalOrganization = null;

            row1.SearchKey = null;

            row1.Name = null;

            row1.Description = null;

            row1.ProductName = null;

            row1.AssetCategory = null;

            row1.Quantity = null;

            row1.CalculateType = null;

            row1.AmortizeType = null;

            row1.UsableLifeYears = null;

            row1.UsableLifeMonths = null;

            row1.AnnualDepreciation = null;

            row1.Currency = null;

            row1.PurchaseDate = null;

            row1.CancellationDate = null;

            row1.DepreciationStartDate = null;

            row1.DepreciationEndDate = null;

            row1.AssetValue = null;

            row1.ResidualAssetValue = null;

            row1.DepreciationAmount = null;

            row1.PreviouslyDepreciatedAmount = null;

            row1.DepreciatedValue = null;

            row1.DepreciatedPlan = null;

          } else {

            if (0 < rowtFileInputDelimited_1.length) {
              row1.transactionalOrganization = rowtFileInputDelimited_1[0].trim();

            } else {

              row1.transactionalOrganization = null;

            }

            if (1 < rowtFileInputDelimited_1.length) {
              row1.SearchKey = rowtFileInputDelimited_1[1].trim();

            } else {

              row1.SearchKey = null;

            }

            if (2 < rowtFileInputDelimited_1.length) {
              row1.Name = rowtFileInputDelimited_1[2].trim();

            } else {

              row1.Name = null;

            }

            if (3 < rowtFileInputDelimited_1.length) {
              row1.Description = rowtFileInputDelimited_1[3].trim();

            } else {

              row1.Description = null;

            }

            if (4 < rowtFileInputDelimited_1.length) {
              row1.ProductName = rowtFileInputDelimited_1[4].trim();

            } else {

              row1.ProductName = null;

            }

            if (5 < rowtFileInputDelimited_1.length) {
              row1.AssetCategory = rowtFileInputDelimited_1[5].trim();

            } else {

              row1.AssetCategory = null;

            }

            if (6 < rowtFileInputDelimited_1.length) {
              row1.Quantity = rowtFileInputDelimited_1[6].trim();

            } else {

              row1.Quantity = null;

            }

            if (7 < rowtFileInputDelimited_1.length) {
              row1.CalculateType = rowtFileInputDelimited_1[7].trim();

            } else {

              row1.CalculateType = null;

            }

            if (8 < rowtFileInputDelimited_1.length) {
              row1.AmortizeType = rowtFileInputDelimited_1[8].trim();

            } else {

              row1.AmortizeType = null;

            }

            if (9 < rowtFileInputDelimited_1.length) {
              row1.UsableLifeYears = rowtFileInputDelimited_1[9].trim();

            } else {

              row1.UsableLifeYears = null;

            }

            if (10 < rowtFileInputDelimited_1.length) {
              row1.UsableLifeMonths = rowtFileInputDelimited_1[10].trim();

            } else {

              row1.UsableLifeMonths = null;

            }

            if (11 < rowtFileInputDelimited_1.length) {
              row1.AnnualDepreciation = rowtFileInputDelimited_1[11].trim();

            } else {

              row1.AnnualDepreciation = null;

            }

            if (12 < rowtFileInputDelimited_1.length) {
              row1.Currency = rowtFileInputDelimited_1[12].trim();

            } else {

              row1.Currency = null;

            }

            if (13 < rowtFileInputDelimited_1.length) {
              row1.PurchaseDate = rowtFileInputDelimited_1[13].trim();

            } else {

              row1.PurchaseDate = null;

            }

            if (14 < rowtFileInputDelimited_1.length) {
              row1.CancellationDate = rowtFileInputDelimited_1[14].trim();

            } else {

              row1.CancellationDate = null;

            }

            if (15 < rowtFileInputDelimited_1.length) {
              row1.DepreciationStartDate = rowtFileInputDelimited_1[15].trim();

            } else {

              row1.DepreciationStartDate = null;

            }

            if (16 < rowtFileInputDelimited_1.length) {
              row1.DepreciationEndDate = rowtFileInputDelimited_1[16].trim();

            } else {

              row1.DepreciationEndDate = null;

            }

            if (17 < rowtFileInputDelimited_1.length) {
              row1.AssetValue = rowtFileInputDelimited_1[17].trim();

            } else {

              row1.AssetValue = null;

            }

            if (18 < rowtFileInputDelimited_1.length) {
              row1.ResidualAssetValue = rowtFileInputDelimited_1[18].trim();

            } else {

              row1.ResidualAssetValue = null;

            }

            if (19 < rowtFileInputDelimited_1.length) {
              row1.DepreciationAmount = rowtFileInputDelimited_1[19].trim();

            } else {

              row1.DepreciationAmount = null;

            }

            if (20 < rowtFileInputDelimited_1.length) {
              row1.PreviouslyDepreciatedAmount = rowtFileInputDelimited_1[20].trim();

            } else {

              row1.PreviouslyDepreciatedAmount = null;

            }

            if (21 < rowtFileInputDelimited_1.length) {
              row1.DepreciatedValue = rowtFileInputDelimited_1[21].trim();

            } else {

              row1.DepreciatedValue = null;

            }

            if (22 < rowtFileInputDelimited_1.length) {
              row1.DepreciatedPlan = rowtFileInputDelimited_1[22].trim();

            } else {

              row1.DepreciatedPlan = null;

            }

          }

        } catch (Exception e) {
          System.err.println(e.getMessage());
          row1 = null;
        }

        /**
         * [tFileInputDelimited_1 begin ] stop
         */
        /**
         * [tFileInputDelimited_1 main ] start
         */

        currentComponent = "tFileInputDelimited_1";

        /**
         * [tFileInputDelimited_1 main ] stop
         */
        // Start of branch "row1"
        if (row1 != null) {

          /**
           * [tJavaRow_1 main ] start
           */

          currentComponent = "tJavaRow_1";

          org.openbravo.idl.proc.IdlService service = org.openbravo.idl.proc.IdlIntService
              .getInstance().getService("Asset");

          org.openbravo.idl.proc.Validator validator = service.getValidator("Asset");

          row2.flag = "0";
          row2.whyError = "";

          // VALIDATION
          row2.transactionalOrganization = validator
              .checkTransactionalOrganization(row1.transactionalOrganization);

          row2.SearchKey = validator.checkNotNull(validator.checkString(row1.SearchKey, 40),
              "SearchKey");

          row2.Name = validator.checkNotNull(validator.checkString(row1.Name, 60), "Name");

          row2.Description = validator.checkString(row1.Description, 255);

          row2.ProductName = validator.checkString(row1.ProductName, 60);

          row2.AssetCategory = validator.checkNotNull(
              validator.checkString(row1.AssetCategory, 60, "AssetCategory"), "AssetCategory");

          row2.Quantity = validator.checkBigDecimal(row1.Quantity);

          row2.CalculateType = validator.checkNotNull(
              validator.checkString(row1.CalculateType, 60, "CalculateType"), "CalculateType");

          row2.AmortizeType = validator.checkString(row1.AmortizeType, 60, "AmortizeSchedule");

          row2.UsableLifeYears = validator.checkLong(row1.UsableLifeYears, "UsableLifeYears");

          row2.UsableLifeMonths = validator.checkLong(row1.UsableLifeMonths, "UsableLifeMonths");

          row2.AnnualDepreciation = validator.checkBigDecimal(row1.AnnualDepreciation);

          row2.Currency = validator.checkNotNull(
              validator.checkString(row1.Currency, 3, "Currency"), "Currency");

          row2.PurchaseDate = validator.checkDate(row1.PurchaseDate);

          row2.CancellationDate = validator.checkDate(row1.CancellationDate);

          row2.DepreciationStartDate = validator.checkDate(row1.DepreciationStartDate,
              "DepreciationStartDate");

          row2.DepreciationEndDate = validator.checkDate(row1.DepreciationEndDate);

          row2.AssetValue = validator.checkBigDecimal(row1.AssetValue);

          row2.ResidualAssetValue = validator.checkBigDecimal(row1.ResidualAssetValue);

          row2.DepreciationAmount = validator.checkBigDecimal(row1.DepreciationAmount);

          row2.PreviouslyDepreciatedAmount = validator
              .checkBigDecimal(row1.PreviouslyDepreciatedAmount);

          row2.DepreciatedValue = validator.checkBigDecimal(row1.DepreciatedValue);

          row2.DepreciatedPlan = validator.checkBigDecimal(row1.DepreciatedPlan);

          row2.flag = validator.getErrorCode();
          row2.whyError = validator.getErrorMessage();

          nb_line_tJavaRow_1++;

          /**
           * [tJavaRow_1 main ] stop
           */

          /**
           * [tFilterRow_1 main ] start
           */

          currentComponent = "tFilterRow_1";

          row3 = null;
          row10 = null;

          if (

          (row2.flag == null ? false : row2.flag.toLowerCase().compareTo("0") == 0)

          )

          {
            if (row3 == null) {
              row3 = new row3Struct();
            }
            row3.transactionalOrganization = row2.transactionalOrganization;
            row3.SearchKey = row2.SearchKey;
            row3.Name = row2.Name;
            row3.Description = row2.Description;
            row3.ProductName = row2.ProductName;
            row3.AssetCategory = row2.AssetCategory;
            row3.Quantity = row2.Quantity;
            row3.CalculateType = row2.CalculateType;
            row3.AmortizeType = row2.AmortizeType;
            row3.UsableLifeYears = row2.UsableLifeYears;
            row3.UsableLifeMonths = row2.UsableLifeMonths;
            row3.AnnualDepreciation = row2.AnnualDepreciation;
            row3.Currency = row2.Currency;
            row3.PurchaseDate = row2.PurchaseDate;
            row3.CancellationDate = row2.CancellationDate;
            row3.DepreciationStartDate = row2.DepreciationStartDate;
            row3.DepreciationEndDate = row2.DepreciationEndDate;
            row3.AssetValue = row2.AssetValue;
            row3.ResidualAssetValue = row2.ResidualAssetValue;
            row3.DepreciationAmount = row2.DepreciationAmount;
            row3.PreviouslyDepreciatedAmount = row2.PreviouslyDepreciatedAmount;
            row3.DepreciatedValue = row2.DepreciatedValue;
            row3.DepreciatedPlan = row2.DepreciatedPlan;
            row3.flag = row2.flag;
            row3.whyError = row2.whyError;
            nb_line_ok_tFilterRow_1++;
          } else {
            if (row10 == null) {
              row10 = new row10Struct();
            }
            row10.transactionalOrganization = row2.transactionalOrganization;
            row10.SearchKey = row2.SearchKey;
            row10.Name = row2.Name;
            row10.Description = row2.Description;
            row10.ProductName = row2.ProductName;
            row10.AssetCategory = row2.AssetCategory;
            row10.Quantity = row2.Quantity;
            row10.CalculateType = row2.CalculateType;
            row10.AmortizeType = row2.AmortizeType;
            row10.UsableLifeYears = row2.UsableLifeYears;
            row10.UsableLifeMonths = row2.UsableLifeMonths;
            row10.AnnualDepreciation = row2.AnnualDepreciation;
            row10.Currency = row2.Currency;
            row10.PurchaseDate = row2.PurchaseDate;
            row10.CancellationDate = row2.CancellationDate;
            row10.DepreciationStartDate = row2.DepreciationStartDate;
            row10.DepreciationEndDate = row2.DepreciationEndDate;
            row10.AssetValue = row2.AssetValue;
            row10.ResidualAssetValue = row2.ResidualAssetValue;
            row10.DepreciationAmount = row2.DepreciationAmount;
            row10.PreviouslyDepreciatedAmount = row2.PreviouslyDepreciatedAmount;
            row10.DepreciatedValue = row2.DepreciatedValue;
            row10.DepreciatedPlan = row2.DepreciatedPlan;
            row10.flag = row2.flag;
            row10.whyError = row2.whyError;
            nb_line_reject_tFilterRow_1++;
          }
          nb_line_tFilterRow_1++;

          /**
           * [tFilterRow_1 main ] stop
           */
          // Start of branch "row3"
          if (row3 != null) {

            /**
             * [tJavaRow_3 main ] start
             */

            currentComponent = "tJavaRow_3";

            row5.flag = "0";
            row5.whyError = "";

            row5.transactionalOrganization = row3.transactionalOrganization;
            row5.SearchKey = row3.SearchKey;
            row5.Name = row3.Name;
            row5.Description = row3.Description;

            row5.ProductName = row3.ProductName;
            if (row3.ProductName != null) {
              Product pro = service.findDALInstance(true, Product.class, new Value(
                  Product.PROPERTY_SEARCHKEY, row3.ProductName));
              if (pro == null) {
                row5.flag = "-1";
                row5.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row3.ProductName
                    + "\n";
              }
            }

            // Do not check because it will be created if it does
            // not exist
            row5.AssetCategory = row3.AssetCategory;

            row5.Quantity = row3.Quantity;

            row5.CalculateType = row3.CalculateType;
            if (service.getReferenceValue("AmortizationCalcType", row3.CalculateType) == null
                && row3.CalculateType != null) {
              row5.flag = "-1";
              row5.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row3.CalculateType
                  + "\n";
            }

            row5.AmortizeType = row3.AmortizeType;
            if (service.getReferenceValue("Amortization schedule", row3.AmortizeType) == null
                && row3.AmortizeType != null) {
              row5.flag = "-1";
              row5.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row3.AmortizeType
                  + "\n";
            }

            row5.UsableLifeYears = row3.UsableLifeYears;
            row5.UsableLifeMonths = row3.UsableLifeMonths;
            row5.AnnualDepreciation = row3.AnnualDepreciation;

            row5.Currency = row3.Currency;
            Currency cur = service.findDALInstance(true, Currency.class, new Value(
                Currency.PROPERTY_ISOCODE, row3.Currency));
            if (cur == null) {
              row5.flag = "-1";
              row5.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row3.Currency
                  + "\n";
            }

            row5.PurchaseDate = row3.PurchaseDate;
            row5.CancellationDate = row3.CancellationDate;
            row5.DepreciationStartDate = row3.DepreciationStartDate;
            row5.DepreciationEndDate = row3.DepreciationEndDate;
            row5.AssetValue = row3.AssetValue;
            row5.ResidualAssetValue = row3.ResidualAssetValue;
            row5.DepreciationAmount = row3.DepreciationAmount;
            row5.PreviouslyDepreciatedAmount = row3.PreviouslyDepreciatedAmount;
            row5.DepreciatedValue = row3.DepreciatedValue;
            row5.DepreciatedPlan = row3.DepreciatedPlan;

            nb_line_tJavaRow_3++;

            /**
             * [tJavaRow_3 main ] stop
             */

            /**
             * [tFilterRow_2 main ] start
             */

            currentComponent = "tFilterRow_2";

            row6 = null;
            row4 = null;

            if (

            (row5.flag == null ? false : row5.flag.toLowerCase().compareTo("0") == 0)

            )

            {
              if (row6 == null) {
                row6 = new row6Struct();
              }
              row6.transactionalOrganization = row5.transactionalOrganization;
              row6.SearchKey = row5.SearchKey;
              row6.Name = row5.Name;
              row6.Description = row5.Description;
              row6.ProductName = row5.ProductName;
              row6.AssetCategory = row5.AssetCategory;
              row6.Quantity = row5.Quantity;
              row6.CalculateType = row5.CalculateType;
              row6.AmortizeType = row5.AmortizeType;
              row6.UsableLifeYears = row5.UsableLifeYears;
              row6.UsableLifeMonths = row5.UsableLifeMonths;
              row6.AnnualDepreciation = row5.AnnualDepreciation;
              row6.Currency = row5.Currency;
              row6.PurchaseDate = row5.PurchaseDate;
              row6.CancellationDate = row5.CancellationDate;
              row6.DepreciationStartDate = row5.DepreciationStartDate;
              row6.DepreciationEndDate = row5.DepreciationEndDate;
              row6.AssetValue = row5.AssetValue;
              row6.ResidualAssetValue = row5.ResidualAssetValue;
              row6.DepreciationAmount = row5.DepreciationAmount;
              row6.PreviouslyDepreciatedAmount = row5.PreviouslyDepreciatedAmount;
              row6.DepreciatedValue = row5.DepreciatedValue;
              row6.DepreciatedPlan = row5.DepreciatedPlan;
              row6.flag = row5.flag;
              row6.whyError = row5.whyError;
              nb_line_ok_tFilterRow_2++;
            } else {
              if (row4 == null) {
                row4 = new row4Struct();
              }
              row4.transactionalOrganization = row5.transactionalOrganization;
              row4.SearchKey = row5.SearchKey;
              row4.Name = row5.Name;
              row4.Description = row5.Description;
              row4.ProductName = row5.ProductName;
              row4.AssetCategory = row5.AssetCategory;
              row4.Quantity = row5.Quantity;
              row4.CalculateType = row5.CalculateType;
              row4.AmortizeType = row5.AmortizeType;
              row4.UsableLifeYears = row5.UsableLifeYears;
              row4.UsableLifeMonths = row5.UsableLifeMonths;
              row4.AnnualDepreciation = row5.AnnualDepreciation;
              row4.Currency = row5.Currency;
              row4.PurchaseDate = row5.PurchaseDate;
              row4.CancellationDate = row5.CancellationDate;
              row4.DepreciationStartDate = row5.DepreciationStartDate;
              row4.DepreciationEndDate = row5.DepreciationEndDate;
              row4.AssetValue = row5.AssetValue;
              row4.ResidualAssetValue = row5.ResidualAssetValue;
              row4.DepreciationAmount = row5.DepreciationAmount;
              row4.PreviouslyDepreciatedAmount = row5.PreviouslyDepreciatedAmount;
              row4.DepreciatedValue = row5.DepreciatedValue;
              row4.DepreciatedPlan = row5.DepreciatedPlan;
              row4.flag = row5.flag;
              row4.whyError = row5.whyError;
              nb_line_reject_tFilterRow_2++;
            }
            nb_line_tFilterRow_2++;

            /**
             * [tFilterRow_2 main ] stop
             */
            // Start of branch "row6"
            if (row6 != null) {

              /**
               * [tJavaRow_9 main ] start
               */

              currentComponent = "tJavaRow_9";

              service.finishRecordProcess(row6.transactionalOrganization, row6.SearchKey,
                  row6.Name, row6.Description, row6.ProductName, row6.AssetCategory, row6.Quantity,
                  row6.CalculateType, row6.AmortizeType, row6.UsableLifeYears,
                  row6.UsableLifeMonths, row6.AnnualDepreciation, row6.Currency, row6.PurchaseDate,
                  row6.CancellationDate, row6.DepreciationStartDate, row6.DepreciationEndDate,
                  row6.AssetValue, row6.ResidualAssetValue, row6.DepreciationAmount,
                  row6.PreviouslyDepreciatedAmount, row6.DepreciatedValue, row6.DepreciatedPlan);
              nb_line_tJavaRow_9++;

              /**
               * [tJavaRow_9 main ] stop
               */

            } // End of branch "row6"

            // Start of branch "row4"
            if (row4 != null) {

              /**
               * [tJavaRow_4 main ] start
               */

              currentComponent = "tJavaRow_4";

              service.logRecordError(row4.whyError, row4.transactionalOrganization, row4.SearchKey,
                  row4.Name, row4.Description, row4.ProductName, row4.AssetCategory, row4.Quantity,
                  row4.CalculateType, row4.AmortizeType, row4.UsableLifeYears,
                  row4.UsableLifeMonths, row4.AnnualDepreciation, row4.Currency, row4.PurchaseDate,
                  row4.CancellationDate, row4.DepreciationStartDate, row4.DepreciationEndDate,
                  row4.AssetValue, row4.ResidualAssetValue, row4.DepreciationAmount,
                  row4.PreviouslyDepreciatedAmount, row4.DepreciatedValue, row4.DepreciatedPlan);

              nb_line_tJavaRow_4++;

              /**
               * [tJavaRow_4 main ] stop
               */

            } // End of branch "row4"

          } // End of branch "row3"

          // Start of branch "row10"
          if (row10 != null) {

            /**
             * [tJavaRow_2 main ] start
             */

            currentComponent = "tJavaRow_2";

            service.logRecordError(row10.whyError, row10.transactionalOrganization,
                row10.SearchKey, row10.Name, row10.Description, row10.ProductName,
                row10.AssetCategory, row10.Quantity, row10.CalculateType, row10.AmortizeType,
                row10.UsableLifeYears, row10.UsableLifeMonths, row10.AnnualDepreciation,
                row10.Currency, row10.PurchaseDate, row10.CancellationDate,
                row10.DepreciationStartDate, row10.DepreciationEndDate, row10.AssetValue,
                row10.ResidualAssetValue, row10.DepreciationAmount,
                row10.PreviouslyDepreciatedAmount, row10.DepreciatedValue, row10.DepreciatedPlan);

            nb_line_tJavaRow_2++;

            /**
             * [tJavaRow_2 main ] stop
             */

          } // End of branch "row10"

        } // End of branch "row1"

        /**
         * [tFileInputDelimited_1 end ] start
         */

        currentComponent = "tFileInputDelimited_1";

        nb_line_tFileInputDelimited_1++;
      }
      csvReadertFileInputDelimited_1.close();
      globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);

      ok_Hash.put("tFileInputDelimited_1", true);
      end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

      /**
       * [tFileInputDelimited_1 end ] stop
       */

      /**
       * [tJavaRow_1 end ] start
       */

      currentComponent = "tJavaRow_1";

      globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

      ok_Hash.put("tJavaRow_1", true);
      end_Hash.put("tJavaRow_1", System.currentTimeMillis());

      /**
       * [tJavaRow_1 end ] stop
       */

      /**
       * [tFilterRow_1 end ] start
       */

      currentComponent = "tFilterRow_1";

      globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
      globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
      globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

      ok_Hash.put("tFilterRow_1", true);
      end_Hash.put("tFilterRow_1", System.currentTimeMillis());

      /**
       * [tFilterRow_1 end ] stop
       */

      /**
       * [tJavaRow_3 end ] start
       */

      currentComponent = "tJavaRow_3";

      globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

      ok_Hash.put("tJavaRow_3", true);
      end_Hash.put("tJavaRow_3", System.currentTimeMillis());

      /**
       * [tJavaRow_3 end ] stop
       */

      /**
       * [tFilterRow_2 end ] start
       */

      currentComponent = "tFilterRow_2";

      globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
      globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
      globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

      ok_Hash.put("tFilterRow_2", true);
      end_Hash.put("tFilterRow_2", System.currentTimeMillis());

      /**
       * [tFilterRow_2 end ] stop
       */

      /**
       * [tJavaRow_9 end ] start
       */

      currentComponent = "tJavaRow_9";

      globalMap.put("tJavaRow_9_NB_LINE", nb_line_tJavaRow_9);

      ok_Hash.put("tJavaRow_9", true);
      end_Hash.put("tJavaRow_9", System.currentTimeMillis());

      /**
       * [tJavaRow_9 end ] stop
       */

      /**
       * [tJavaRow_4 end ] start
       */

      currentComponent = "tJavaRow_4";

      globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

      ok_Hash.put("tJavaRow_4", true);
      end_Hash.put("tJavaRow_4", System.currentTimeMillis());

      /**
       * [tJavaRow_4 end ] stop
       */

      /**
       * [tJavaRow_2 end ] start
       */

      currentComponent = "tJavaRow_2";

      globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

      ok_Hash.put("tJavaRow_2", true);
      end_Hash.put("tJavaRow_2", System.currentTimeMillis());

      /**
       * [tJavaRow_2 end ] stop
       */

    } catch (Exception e) {

      throw new TalendException(e, currentComponent, globalMap);

    }

    globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
  }

  public boolean watch = false;
  public int portStats = 3334;
  public int portTraces = 4334;
  public String clientHost;
  public String defaultClientHost = "localhost";
  public String contextStr = "Default";
  public String pid = "0";
  public String rootPid = null;
  public String fatherPid = null;
  public long startTime = 0;
  public boolean isChildJob = false;

  private ThreadLocal threadLocal = new ThreadLocal();
  {
    java.util.Map threadRunResultMap = new java.util.HashMap();
    threadRunResultMap.put("errorCode", null);
    threadRunResultMap.put("status", "");
    threadLocal.set(threadRunResultMap);
  }

  private java.util.Properties context_param = new java.util.Properties();

  public String status = "";

  public static void main(String[] args) {
    final AssetJob AssetJobClass = new AssetJob();

    int exitCode = AssetJobClass.runJobInTOS(args);

    System.exit(exitCode);
  }

  public String[][] runJob(String[] args) {

    int exitCode = runJobInTOS(args);
    String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

    return bufferValue;
  }

  private int runJobInTOS(String[] args) {

    String lastStr = "";
    for (String arg : args) {
      if (arg.equalsIgnoreCase("--context_param")) {
        lastStr = arg;
      } else if (lastStr.equals("")) {
        evalParam(arg);
      } else {
        evalParam(lastStr + " " + arg);
        lastStr = "";
      }
    }

    if (clientHost == null) {
      clientHost = defaultClientHost;
    }

    if (pid == null || "0".equals(pid)) {
      pid = TalendString.getAsciiRandomString(6);
    }

    if (rootPid == null) {
      rootPid = pid;
    }
    if (fatherPid == null) {
      fatherPid = pid;
    } else {
      isChildJob = true;
    }

    try {
      java.io.InputStream inContext = AssetJob.class.getClassLoader().getResourceAsStream(
          "initial_data_load/assetjob_0_1/contexts/Default.properties");
      if (inContext != null) {
        defaultProps.load(inContext);
        inContext.close();
        context = new ContextProperties(defaultProps);
      }

      if (contextStr.compareTo("Default") != 0) {
        inContext = AssetJob.class.getClassLoader().getResourceAsStream(
            "initial_data_load/assetjob_0_1/contexts/" + contextStr + ".properties");
        if (inContext != null) {
          context.load(inContext);
          inContext.close();
        }
      }

      if (!context_param.isEmpty()) {
        context.putAll(context_param);
      }

      context.validationFailCause = (String) context.getProperty("validationFailCause");

      try {
        context.numLinesRejected = Integer.parseInt(context.getProperty("numLinesRejected"));
      } catch (NumberFormatException e) {
        context.numLinesRejected = null;
      }

      try {
        context.numLinesOk = Integer.parseInt(context.getProperty("numLinesOk"));
      } catch (NumberFormatException e) {
        context.numLinesOk = null;
      }

      context.filename = (String) context.getProperty("filename");

      context.executeInsert = (String) context.getProperty("executeInsert");

    } catch (java.io.IOException ie) {
      System.err.println("Could not load context " + contextStr);
      ie.printStackTrace();
    }

    long end = 0;

    startTime = System.currentTimeMillis();

    try {
      errorCode = null;
      tFileInputDelimited_1Process(globalMap);
      status = "end";
    } catch (TalendException e_tFileInputDelimited_1) {
      status = "failure";
      e_tFileInputDelimited_1.printStackTrace();
      globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

    } finally {
    }

    end = System.currentTimeMillis();

    if (watch) {
      System.out.println((end - startTime) + " milliseconds");
    }

    if (errorCode == null) {
      return status != null && status.equals("failure") ? 1 : 0;
    } else {
      return errorCode.intValue();
    }
  }

  private void evalParam(String arg) {
    if (arg.startsWith("--watch")) {
      watch = true;
    } else if (arg.startsWith("--stat_port=")) {
      portStats = Integer.parseInt(arg.substring(12));
    } else if (arg.startsWith("--trace_port=")) {
      portTraces = Integer.parseInt(arg.substring(13));
    } else if (arg.startsWith("--client_host=")) {
      clientHost = arg.substring(14);
    } else if (arg.startsWith("--context=")) {
      contextStr = arg.substring(10);
    } else if (arg.startsWith("--father_pid=")) {
      fatherPid = arg.substring(13);
    } else if (arg.startsWith("--root_pid=")) {
      rootPid = arg.substring(11);
    } else if (arg.startsWith("--pid=")) {
      pid = arg.substring(6);
    } else if (arg.startsWith("--context_param")) {
      String keyValue = arg.substring(16);
      int index = -1;
      if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
        context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
      }
    }

  }

  public Integer getErrorCode() {
    return errorCode;
  }

  public String getStatus() {
    return status;
  }
}
/************************************************************************************************
 * 263058 characters generated by Talend Open Studio on the 16 de noviembre de 2009 15:45:57 CET
 ************************************************************************************************/
