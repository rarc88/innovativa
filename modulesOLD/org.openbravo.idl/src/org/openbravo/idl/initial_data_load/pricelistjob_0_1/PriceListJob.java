// ============================================================================
//
// Copyright (c) 2005-2016, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 3.1.4.r29781).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package org.openbravo.idl.initial_data_load.pricelistjob_0_1;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;

import org.openbravo.dal.service.OBCriteria;
import org.openbravo.dal.service.OBDal;
import org.openbravo.idl.proc.Value;
import org.openbravo.model.common.currency.Currency;
import org.openbravo.model.common.plm.Product;
import org.openbravo.model.pricing.pricelist.PriceListSchema;

import routines.TalendString;
import routines.system.TDieException;

//the import part of tJavaRow_6
//import java.util.List;

//the import part of tJavaRow_7
//import java.util.List;

//the import part of tJavaRow_8
//import java.util.List;

/**
 * Job: PriceListJob Purpose: <br>
 * Description: <br>
 * 
 * @author
 * @version 3.1.4.r29781
 * @status
 */
@SuppressWarnings({ "rawtypes", "unchecked", "hiding" })
public class PriceListJob {

  public final Object obj = new Object();
  // create and load default properties
  private java.util.Properties defaultProps = new java.util.Properties();

  // create application properties with default
  private class ContextProperties extends java.util.Properties {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;

    public ContextProperties(java.util.Properties properties) {
      super(properties);
    }

    public ContextProperties() {
      super();
    }

    @SuppressWarnings("unused")
    public void synchronizeContext() {

      if (executeInsert != null) {

        this.setProperty("executeInsert", executeInsert.toString());

      }

      if (filename != null) {

        this.setProperty("filename", filename.toString());

      }

      if (numLinesOk != null) {

        this.setProperty("numLinesOk", numLinesOk.toString());

      }

      if (numLinesRejected != null) {

        this.setProperty("numLinesRejected", numLinesRejected.toString());

      }

      if (validationFailCause != null) {

        this.setProperty("validationFailCause", validationFailCause.toString());

      }

    }

    public Boolean executeInsert;
    public String filename;
    public Integer numLinesOk;
    public Integer numLinesRejected;
    public String validationFailCause;
  }

  private ContextProperties context = new ContextProperties();
  public Integer errorCode = null;
  private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
  private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
  public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

  private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
  private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
      new java.io.BufferedOutputStream(baos));

  public String getExceptionStackTrace() {
    errorMessagePS.flush();
    return baos.toString();
  }

  @SuppressWarnings("serial")
  private class TalendException extends Exception {
    private java.util.Map<String, Object> globalMap = null;
    private Exception e = null;
    private String currentComponent = null;

    private TalendException(Exception e, String errorComponent,
        final java.util.Map<String, Object> globalMap) {
      this.currentComponent = errorComponent;
      this.globalMap = globalMap;
      this.e = e;
    }

    @Override
    public void printStackTrace() {
      if (!(e instanceof TalendException || e instanceof TDieException)) {
        globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
        System.err.println("Exception in component " + currentComponent);
      }
      if (!(e instanceof TDieException)) {
        if (e instanceof TalendException) {
          e.printStackTrace();
        } else {
          e.printStackTrace();
          e.printStackTrace(errorMessagePS);
        }
      }
      if (!(e instanceof TalendException)) {
        try {
          for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
            if (m.getName().compareTo(currentComponent + "_error") == 0) {
              m.invoke(PriceListJob.this, new Object[] { e, globalMap });
              break;
            }
          }

          if (!(e instanceof TDieException)) {
          }
        } catch (java.lang.SecurityException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalArgumentException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalAccessException e) {
          this.e.printStackTrace();
        } catch (java.lang.reflect.InvocationTargetException e) {
          this.e.printStackTrace();
        }
      }
    }
  }

  public void tFileInputDelimited_1_error(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
    end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_10_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_10", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_6_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_6", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFuzzyMatch_2_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFuzzyMatch_2", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_4_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_4", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_15_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_15", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_5_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_5", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_16_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_16", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_10_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_10", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_8_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_8", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_12_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_12", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_7_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_7", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_6_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_6", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_14_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_14", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaFlex_1_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaFlex_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tHash_row20_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tHash_row20", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFileInputDelimited_1_onSubJobError(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
  }

  static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String PriceListName;
    String IsDefault;
    String IsTaxIncluded;
    String IsSales;
    String Currency;
    String EnforcePriceLimit;
    String PriceListVersionName;
    String DiscountSchema;
    String ValidFromDate;
    String BasePriceListVersion;
    String ProductName;
    String ListPrice;
    String StandardPrice;
    String PriceLimit;
    String flag;
    String whyError;
    String VALUE;
    String MATCHING;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result
            + ((this.PriceListName == null) ? 0 : this.PriceListName.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row22Struct other = (row22Struct) obj;

      if (this.PriceListName == null) {
        if (other.PriceListName != null)
          return false;
      } else if (!this.PriceListName.equals(other.PriceListName))
        return false;

      return true;
    }

    public void copyDataTo(row22Struct other) {

      other.Organization = this.Organization;
      other.PriceListName = this.PriceListName;
      other.IsDefault = this.IsDefault;
      other.IsTaxIncluded = this.IsTaxIncluded;
      other.IsSales = this.IsSales;
      other.Currency = this.Currency;
      other.EnforcePriceLimit = this.EnforcePriceLimit;
      other.PriceListVersionName = this.PriceListVersionName;
      other.DiscountSchema = this.DiscountSchema;
      other.ValidFromDate = this.ValidFromDate;
      other.BasePriceListVersion = this.BasePriceListVersion;
      other.ProductName = this.ProductName;
      other.ListPrice = this.ListPrice;
      other.StandardPrice = this.StandardPrice;
      other.PriceLimit = this.PriceLimit;
      other.flag = this.flag;
      other.whyError = this.whyError;
      other.VALUE = this.VALUE;
      other.MATCHING = this.MATCHING;

    }

    public void copyKeysDataTo(row22Struct other) {

      other.PriceListName = this.PriceListName;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsTaxIncluded = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsTaxIncluded = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EnforcePriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EnforcePriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListVersionName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListVersionName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DiscountSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DiscountSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ValidFromDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ValidFromDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BasePriceListVersion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BasePriceListVersion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ListPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ListPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.VALUE = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.VALUE = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MATCHING = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MATCHING = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsTaxIncluded == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsTaxIncluded.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EnforcePriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EnforcePriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListVersionName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListVersionName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DiscountSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DiscountSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ValidFromDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ValidFromDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BasePriceListVersion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BasePriceListVersion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ListPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ListPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.VALUE == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.VALUE.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MATCHING == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MATCHING.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("PriceListName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListName));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("IsTaxIncluded");
      sb.append("=");
      sb.append(String.valueOf(this.IsTaxIncluded));

      sb.append(", ");

      sb.append("IsSales");
      sb.append("=");
      sb.append(String.valueOf(this.IsSales));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("EnforcePriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.EnforcePriceLimit));

      sb.append(", ");

      sb.append("PriceListVersionName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListVersionName));

      sb.append(", ");

      sb.append("DiscountSchema");
      sb.append("=");
      sb.append(String.valueOf(this.DiscountSchema));

      sb.append(", ");

      sb.append("ValidFromDate");
      sb.append("=");
      sb.append(String.valueOf(this.ValidFromDate));

      sb.append(", ");

      sb.append("BasePriceListVersion");
      sb.append("=");
      sb.append(String.valueOf(this.BasePriceListVersion));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("ListPrice");
      sb.append("=");
      sb.append(String.valueOf(this.ListPrice));

      sb.append(", ");

      sb.append("StandardPrice");
      sb.append("=");
      sb.append(String.valueOf(this.StandardPrice));

      sb.append(", ");

      sb.append("PriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.PriceLimit));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append(", ");

      sb.append("VALUE");
      sb.append("=");
      sb.append(String.valueOf(this.VALUE));

      sb.append(", ");

      sb.append("MATCHING");
      sb.append("=");
      sb.append(String.valueOf(this.MATCHING));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.PriceListName, other.PriceListName);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String PriceListName;
    String IsDefault;
    String IsTaxIncluded;
    String IsSales;
    String Currency;
    String EnforcePriceLimit;
    String PriceListVersionName;
    String DiscountSchema;
    String ValidFromDate;
    String BasePriceListVersion;
    String ProductName;
    String ListPrice;
    String StandardPrice;
    String PriceLimit;
    String flag;
    String whyError;
    String VALUE;
    String MATCHING;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result
            + ((this.PriceListName == null) ? 0 : this.PriceListName.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row19Struct other = (row19Struct) obj;

      if (this.PriceListName == null) {
        if (other.PriceListName != null)
          return false;
      } else if (!this.PriceListName.equals(other.PriceListName))
        return false;

      return true;
    }

    public void copyDataTo(row19Struct other) {

      other.Organization = this.Organization;
      other.PriceListName = this.PriceListName;
      other.IsDefault = this.IsDefault;
      other.IsTaxIncluded = this.IsTaxIncluded;
      other.IsSales = this.IsSales;
      other.Currency = this.Currency;
      other.EnforcePriceLimit = this.EnforcePriceLimit;
      other.PriceListVersionName = this.PriceListVersionName;
      other.DiscountSchema = this.DiscountSchema;
      other.ValidFromDate = this.ValidFromDate;
      other.BasePriceListVersion = this.BasePriceListVersion;
      other.ProductName = this.ProductName;
      other.ListPrice = this.ListPrice;
      other.StandardPrice = this.StandardPrice;
      other.PriceLimit = this.PriceLimit;
      other.flag = this.flag;
      other.whyError = this.whyError;
      other.VALUE = this.VALUE;
      other.MATCHING = this.MATCHING;

    }

    public void copyKeysDataTo(row19Struct other) {

      other.PriceListName = this.PriceListName;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsTaxIncluded = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsTaxIncluded = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EnforcePriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EnforcePriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListVersionName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListVersionName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DiscountSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DiscountSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ValidFromDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ValidFromDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BasePriceListVersion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BasePriceListVersion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ListPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ListPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.VALUE = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.VALUE = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MATCHING = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MATCHING = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsTaxIncluded == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsTaxIncluded.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EnforcePriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EnforcePriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListVersionName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListVersionName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DiscountSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DiscountSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ValidFromDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ValidFromDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BasePriceListVersion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BasePriceListVersion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ListPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ListPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.VALUE == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.VALUE.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MATCHING == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MATCHING.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("PriceListName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListName));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("IsTaxIncluded");
      sb.append("=");
      sb.append(String.valueOf(this.IsTaxIncluded));

      sb.append(", ");

      sb.append("IsSales");
      sb.append("=");
      sb.append(String.valueOf(this.IsSales));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("EnforcePriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.EnforcePriceLimit));

      sb.append(", ");

      sb.append("PriceListVersionName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListVersionName));

      sb.append(", ");

      sb.append("DiscountSchema");
      sb.append("=");
      sb.append(String.valueOf(this.DiscountSchema));

      sb.append(", ");

      sb.append("ValidFromDate");
      sb.append("=");
      sb.append(String.valueOf(this.ValidFromDate));

      sb.append(", ");

      sb.append("BasePriceListVersion");
      sb.append("=");
      sb.append(String.valueOf(this.BasePriceListVersion));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("ListPrice");
      sb.append("=");
      sb.append(String.valueOf(this.ListPrice));

      sb.append(", ");

      sb.append("StandardPrice");
      sb.append("=");
      sb.append(String.valueOf(this.StandardPrice));

      sb.append(", ");

      sb.append("PriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.PriceLimit));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append(", ");

      sb.append("VALUE");
      sb.append("=");
      sb.append(String.valueOf(this.VALUE));

      sb.append(", ");

      sb.append("MATCHING");
      sb.append("=");
      sb.append(String.valueOf(this.MATCHING));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.PriceListName, other.PriceListName);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String PriceListName;
    String IsDefault;
    String IsTaxIncluded;
    String IsSales;
    String Currency;
    String EnforcePriceLimit;
    String PriceListVersionName;
    String DiscountSchema;
    String ValidFromDate;
    String BasePriceListVersion;
    String ProductName;
    String ListPrice;
    String StandardPrice;
    String PriceLimit;
    String flag;
    String whyError;
    String VALUE;
    String MATCHING;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result
            + ((this.PriceListName == null) ? 0 : this.PriceListName.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row24Struct other = (row24Struct) obj;

      if (this.PriceListName == null) {
        if (other.PriceListName != null)
          return false;
      } else if (!this.PriceListName.equals(other.PriceListName))
        return false;

      return true;
    }

    public void copyDataTo(row24Struct other) {

      other.Organization = this.Organization;
      other.PriceListName = this.PriceListName;
      other.IsDefault = this.IsDefault;
      other.IsTaxIncluded = this.IsTaxIncluded;
      other.IsSales = this.IsSales;
      other.Currency = this.Currency;
      other.EnforcePriceLimit = this.EnforcePriceLimit;
      other.PriceListVersionName = this.PriceListVersionName;
      other.DiscountSchema = this.DiscountSchema;
      other.ValidFromDate = this.ValidFromDate;
      other.BasePriceListVersion = this.BasePriceListVersion;
      other.ProductName = this.ProductName;
      other.ListPrice = this.ListPrice;
      other.StandardPrice = this.StandardPrice;
      other.PriceLimit = this.PriceLimit;
      other.flag = this.flag;
      other.whyError = this.whyError;
      other.VALUE = this.VALUE;
      other.MATCHING = this.MATCHING;

    }

    public void copyKeysDataTo(row24Struct other) {

      other.PriceListName = this.PriceListName;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsTaxIncluded = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsTaxIncluded = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EnforcePriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EnforcePriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListVersionName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListVersionName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DiscountSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DiscountSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ValidFromDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ValidFromDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BasePriceListVersion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BasePriceListVersion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ListPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ListPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.VALUE = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.VALUE = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MATCHING = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MATCHING = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsTaxIncluded == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsTaxIncluded.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EnforcePriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EnforcePriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListVersionName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListVersionName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DiscountSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DiscountSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ValidFromDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ValidFromDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BasePriceListVersion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BasePriceListVersion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ListPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ListPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.VALUE == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.VALUE.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MATCHING == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MATCHING.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("PriceListName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListName));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("IsTaxIncluded");
      sb.append("=");
      sb.append(String.valueOf(this.IsTaxIncluded));

      sb.append(", ");

      sb.append("IsSales");
      sb.append("=");
      sb.append(String.valueOf(this.IsSales));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("EnforcePriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.EnforcePriceLimit));

      sb.append(", ");

      sb.append("PriceListVersionName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListVersionName));

      sb.append(", ");

      sb.append("DiscountSchema");
      sb.append("=");
      sb.append(String.valueOf(this.DiscountSchema));

      sb.append(", ");

      sb.append("ValidFromDate");
      sb.append("=");
      sb.append(String.valueOf(this.ValidFromDate));

      sb.append(", ");

      sb.append("BasePriceListVersion");
      sb.append("=");
      sb.append(String.valueOf(this.BasePriceListVersion));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("ListPrice");
      sb.append("=");
      sb.append(String.valueOf(this.ListPrice));

      sb.append(", ");

      sb.append("StandardPrice");
      sb.append("=");
      sb.append(String.valueOf(this.StandardPrice));

      sb.append(", ");

      sb.append("PriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.PriceLimit));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append(", ");

      sb.append("VALUE");
      sb.append("=");
      sb.append(String.valueOf(this.VALUE));

      sb.append(", ");

      sb.append("MATCHING");
      sb.append("=");
      sb.append(String.valueOf(this.MATCHING));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.PriceListName, other.PriceListName);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String PriceListName;
    String IsDefault;
    String IsTaxIncluded;
    String IsSales;
    String Currency;
    String EnforcePriceLimit;
    String PriceListVersionName;
    String DiscountSchema;
    String ValidFromDate;
    String BasePriceListVersion;
    String ProductName;
    String ListPrice;
    String StandardPrice;
    String PriceLimit;
    String flag;
    String whyError;
    String VALUE;
    String MATCHING;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result
            + ((this.PriceListName == null) ? 0 : this.PriceListName.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row16Struct other = (row16Struct) obj;

      if (this.PriceListName == null) {
        if (other.PriceListName != null)
          return false;
      } else if (!this.PriceListName.equals(other.PriceListName))
        return false;

      return true;
    }

    public void copyDataTo(row16Struct other) {

      other.Organization = this.Organization;
      other.PriceListName = this.PriceListName;
      other.IsDefault = this.IsDefault;
      other.IsTaxIncluded = this.IsTaxIncluded;
      other.IsSales = this.IsSales;
      other.Currency = this.Currency;
      other.EnforcePriceLimit = this.EnforcePriceLimit;
      other.PriceListVersionName = this.PriceListVersionName;
      other.DiscountSchema = this.DiscountSchema;
      other.ValidFromDate = this.ValidFromDate;
      other.BasePriceListVersion = this.BasePriceListVersion;
      other.ProductName = this.ProductName;
      other.ListPrice = this.ListPrice;
      other.StandardPrice = this.StandardPrice;
      other.PriceLimit = this.PriceLimit;
      other.flag = this.flag;
      other.whyError = this.whyError;
      other.VALUE = this.VALUE;
      other.MATCHING = this.MATCHING;

    }

    public void copyKeysDataTo(row16Struct other) {

      other.PriceListName = this.PriceListName;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsTaxIncluded = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsTaxIncluded = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EnforcePriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EnforcePriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListVersionName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListVersionName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DiscountSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DiscountSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ValidFromDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ValidFromDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BasePriceListVersion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BasePriceListVersion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ListPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ListPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.VALUE = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.VALUE = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MATCHING = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MATCHING = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsTaxIncluded == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsTaxIncluded.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EnforcePriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EnforcePriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListVersionName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListVersionName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DiscountSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DiscountSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ValidFromDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ValidFromDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BasePriceListVersion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BasePriceListVersion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ListPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ListPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.VALUE == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.VALUE.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MATCHING == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MATCHING.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("PriceListName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListName));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("IsTaxIncluded");
      sb.append("=");
      sb.append(String.valueOf(this.IsTaxIncluded));

      sb.append(", ");

      sb.append("IsSales");
      sb.append("=");
      sb.append(String.valueOf(this.IsSales));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("EnforcePriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.EnforcePriceLimit));

      sb.append(", ");

      sb.append("PriceListVersionName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListVersionName));

      sb.append(", ");

      sb.append("DiscountSchema");
      sb.append("=");
      sb.append(String.valueOf(this.DiscountSchema));

      sb.append(", ");

      sb.append("ValidFromDate");
      sb.append("=");
      sb.append(String.valueOf(this.ValidFromDate));

      sb.append(", ");

      sb.append("BasePriceListVersion");
      sb.append("=");
      sb.append(String.valueOf(this.BasePriceListVersion));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("ListPrice");
      sb.append("=");
      sb.append(String.valueOf(this.ListPrice));

      sb.append(", ");

      sb.append("StandardPrice");
      sb.append("=");
      sb.append(String.valueOf(this.StandardPrice));

      sb.append(", ");

      sb.append("PriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.PriceLimit));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append(", ");

      sb.append("VALUE");
      sb.append("=");
      sb.append(String.valueOf(this.VALUE));

      sb.append(", ");

      sb.append("MATCHING");
      sb.append("=");
      sb.append(String.valueOf(this.MATCHING));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.PriceListName, other.PriceListName);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String PriceListName;
    String IsDefault;
    String IsTaxIncluded;
    String IsSales;
    String Currency;
    String EnforcePriceLimit;
    String PriceListVersionName;
    String DiscountSchema;
    String ValidFromDate;
    String BasePriceListVersion;
    String ProductName;
    String ListPrice;
    String StandardPrice;
    String PriceLimit;
    String flag;
    String whyError;
    String VALUE;
    String MATCHING;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result
            + ((this.PriceListName == null) ? 0 : this.PriceListName.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row8Struct other = (row8Struct) obj;

      if (this.PriceListName == null) {
        if (other.PriceListName != null)
          return false;
      } else if (!this.PriceListName.equals(other.PriceListName))
        return false;

      return true;
    }

    public void copyDataTo(row8Struct other) {

      other.Organization = this.Organization;
      other.PriceListName = this.PriceListName;
      other.IsDefault = this.IsDefault;
      other.IsTaxIncluded = this.IsTaxIncluded;
      other.IsSales = this.IsSales;
      other.Currency = this.Currency;
      other.EnforcePriceLimit = this.EnforcePriceLimit;
      other.PriceListVersionName = this.PriceListVersionName;
      other.DiscountSchema = this.DiscountSchema;
      other.ValidFromDate = this.ValidFromDate;
      other.BasePriceListVersion = this.BasePriceListVersion;
      other.ProductName = this.ProductName;
      other.ListPrice = this.ListPrice;
      other.StandardPrice = this.StandardPrice;
      other.PriceLimit = this.PriceLimit;
      other.flag = this.flag;
      other.whyError = this.whyError;
      other.VALUE = this.VALUE;
      other.MATCHING = this.MATCHING;

    }

    public void copyKeysDataTo(row8Struct other) {

      other.PriceListName = this.PriceListName;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsTaxIncluded = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsTaxIncluded = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EnforcePriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EnforcePriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListVersionName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListVersionName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DiscountSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DiscountSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ValidFromDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ValidFromDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BasePriceListVersion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BasePriceListVersion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ListPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ListPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.VALUE = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.VALUE = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MATCHING = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MATCHING = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsTaxIncluded == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsTaxIncluded.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EnforcePriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EnforcePriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListVersionName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListVersionName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DiscountSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DiscountSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ValidFromDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ValidFromDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BasePriceListVersion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BasePriceListVersion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ListPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ListPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.VALUE == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.VALUE.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MATCHING == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MATCHING.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("PriceListName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListName));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("IsTaxIncluded");
      sb.append("=");
      sb.append(String.valueOf(this.IsTaxIncluded));

      sb.append(", ");

      sb.append("IsSales");
      sb.append("=");
      sb.append(String.valueOf(this.IsSales));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("EnforcePriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.EnforcePriceLimit));

      sb.append(", ");

      sb.append("PriceListVersionName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListVersionName));

      sb.append(", ");

      sb.append("DiscountSchema");
      sb.append("=");
      sb.append(String.valueOf(this.DiscountSchema));

      sb.append(", ");

      sb.append("ValidFromDate");
      sb.append("=");
      sb.append(String.valueOf(this.ValidFromDate));

      sb.append(", ");

      sb.append("BasePriceListVersion");
      sb.append("=");
      sb.append(String.valueOf(this.BasePriceListVersion));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("ListPrice");
      sb.append("=");
      sb.append(String.valueOf(this.ListPrice));

      sb.append(", ");

      sb.append("StandardPrice");
      sb.append("=");
      sb.append(String.valueOf(this.StandardPrice));

      sb.append(", ");

      sb.append("PriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.PriceLimit));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append(", ");

      sb.append("VALUE");
      sb.append("=");
      sb.append(String.valueOf(this.VALUE));

      sb.append(", ");

      sb.append("MATCHING");
      sb.append("=");
      sb.append(String.valueOf(this.MATCHING));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.PriceListName, other.PriceListName);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String PriceListName;
    String IsDefault;
    String IsTaxIncluded;
    String IsSales;
    String Currency;
    String EnforcePriceLimit;
    String PriceListVersionName;
    String DiscountSchema;
    String ValidFromDate;
    String BasePriceListVersion;
    String ProductName;
    String ListPrice;
    String StandardPrice;
    String PriceLimit;
    String flag;
    String whyError;
    String VALUE;
    String MATCHING;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result
            + ((this.PriceListName == null) ? 0 : this.PriceListName.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row15Struct other = (row15Struct) obj;

      if (this.PriceListName == null) {
        if (other.PriceListName != null)
          return false;
      } else if (!this.PriceListName.equals(other.PriceListName))
        return false;

      return true;
    }

    public void copyDataTo(row15Struct other) {

      other.Organization = this.Organization;
      other.PriceListName = this.PriceListName;
      other.IsDefault = this.IsDefault;
      other.IsTaxIncluded = this.IsTaxIncluded;
      other.IsSales = this.IsSales;
      other.Currency = this.Currency;
      other.EnforcePriceLimit = this.EnforcePriceLimit;
      other.PriceListVersionName = this.PriceListVersionName;
      other.DiscountSchema = this.DiscountSchema;
      other.ValidFromDate = this.ValidFromDate;
      other.BasePriceListVersion = this.BasePriceListVersion;
      other.ProductName = this.ProductName;
      other.ListPrice = this.ListPrice;
      other.StandardPrice = this.StandardPrice;
      other.PriceLimit = this.PriceLimit;
      other.flag = this.flag;
      other.whyError = this.whyError;
      other.VALUE = this.VALUE;
      other.MATCHING = this.MATCHING;

    }

    public void copyKeysDataTo(row15Struct other) {

      other.PriceListName = this.PriceListName;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsTaxIncluded = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsTaxIncluded = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EnforcePriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EnforcePriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListVersionName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListVersionName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DiscountSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DiscountSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ValidFromDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ValidFromDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BasePriceListVersion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BasePriceListVersion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ListPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ListPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.VALUE = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.VALUE = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MATCHING = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MATCHING = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsTaxIncluded == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsTaxIncluded.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EnforcePriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EnforcePriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListVersionName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListVersionName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DiscountSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DiscountSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ValidFromDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ValidFromDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BasePriceListVersion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BasePriceListVersion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ListPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ListPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.VALUE == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.VALUE.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MATCHING == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MATCHING.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("PriceListName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListName));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("IsTaxIncluded");
      sb.append("=");
      sb.append(String.valueOf(this.IsTaxIncluded));

      sb.append(", ");

      sb.append("IsSales");
      sb.append("=");
      sb.append(String.valueOf(this.IsSales));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("EnforcePriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.EnforcePriceLimit));

      sb.append(", ");

      sb.append("PriceListVersionName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListVersionName));

      sb.append(", ");

      sb.append("DiscountSchema");
      sb.append("=");
      sb.append(String.valueOf(this.DiscountSchema));

      sb.append(", ");

      sb.append("ValidFromDate");
      sb.append("=");
      sb.append(String.valueOf(this.ValidFromDate));

      sb.append(", ");

      sb.append("BasePriceListVersion");
      sb.append("=");
      sb.append(String.valueOf(this.BasePriceListVersion));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("ListPrice");
      sb.append("=");
      sb.append(String.valueOf(this.ListPrice));

      sb.append(", ");

      sb.append("StandardPrice");
      sb.append("=");
      sb.append(String.valueOf(this.StandardPrice));

      sb.append(", ");

      sb.append("PriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.PriceLimit));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append(", ");

      sb.append("VALUE");
      sb.append("=");
      sb.append(String.valueOf(this.VALUE));

      sb.append(", ");

      sb.append("MATCHING");
      sb.append("=");
      sb.append(String.valueOf(this.MATCHING));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.PriceListName, other.PriceListName);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String PriceListName;
    String IsDefault;
    String IsTaxIncluded;
    String IsSales;
    String Currency;
    String EnforcePriceLimit;
    String PriceListVersionName;
    String DiscountSchema;
    String ValidFromDate;
    String BasePriceListVersion;
    String ProductName;
    String ListPrice;
    String StandardPrice;
    String PriceLimit;
    String flag;
    String whyError;
    String VALUE;
    String MATCHING;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result
            + ((this.PriceListName == null) ? 0 : this.PriceListName.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row14Struct other = (row14Struct) obj;

      if (this.PriceListName == null) {
        if (other.PriceListName != null)
          return false;
      } else if (!this.PriceListName.equals(other.PriceListName))
        return false;

      return true;
    }

    public void copyDataTo(row14Struct other) {

      other.Organization = this.Organization;
      other.PriceListName = this.PriceListName;
      other.IsDefault = this.IsDefault;
      other.IsTaxIncluded = this.IsTaxIncluded;
      other.IsSales = this.IsSales;
      other.Currency = this.Currency;
      other.EnforcePriceLimit = this.EnforcePriceLimit;
      other.PriceListVersionName = this.PriceListVersionName;
      other.DiscountSchema = this.DiscountSchema;
      other.ValidFromDate = this.ValidFromDate;
      other.BasePriceListVersion = this.BasePriceListVersion;
      other.ProductName = this.ProductName;
      other.ListPrice = this.ListPrice;
      other.StandardPrice = this.StandardPrice;
      other.PriceLimit = this.PriceLimit;
      other.flag = this.flag;
      other.whyError = this.whyError;
      other.VALUE = this.VALUE;
      other.MATCHING = this.MATCHING;

    }

    public void copyKeysDataTo(row14Struct other) {

      other.PriceListName = this.PriceListName;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsTaxIncluded = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsTaxIncluded = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EnforcePriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EnforcePriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListVersionName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListVersionName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DiscountSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DiscountSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ValidFromDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ValidFromDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BasePriceListVersion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BasePriceListVersion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ListPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ListPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.VALUE = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.VALUE = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MATCHING = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MATCHING = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsTaxIncluded == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsTaxIncluded.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EnforcePriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EnforcePriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListVersionName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListVersionName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DiscountSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DiscountSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ValidFromDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ValidFromDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BasePriceListVersion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BasePriceListVersion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ListPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ListPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.VALUE == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.VALUE.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MATCHING == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MATCHING.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("PriceListName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListName));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("IsTaxIncluded");
      sb.append("=");
      sb.append(String.valueOf(this.IsTaxIncluded));

      sb.append(", ");

      sb.append("IsSales");
      sb.append("=");
      sb.append(String.valueOf(this.IsSales));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("EnforcePriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.EnforcePriceLimit));

      sb.append(", ");

      sb.append("PriceListVersionName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListVersionName));

      sb.append(", ");

      sb.append("DiscountSchema");
      sb.append("=");
      sb.append(String.valueOf(this.DiscountSchema));

      sb.append(", ");

      sb.append("ValidFromDate");
      sb.append("=");
      sb.append(String.valueOf(this.ValidFromDate));

      sb.append(", ");

      sb.append("BasePriceListVersion");
      sb.append("=");
      sb.append(String.valueOf(this.BasePriceListVersion));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("ListPrice");
      sb.append("=");
      sb.append(String.valueOf(this.ListPrice));

      sb.append(", ");

      sb.append("StandardPrice");
      sb.append("=");
      sb.append(String.valueOf(this.StandardPrice));

      sb.append(", ");

      sb.append("PriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.PriceLimit));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append(", ");

      sb.append("VALUE");
      sb.append("=");
      sb.append(String.valueOf(this.VALUE));

      sb.append(", ");

      sb.append("MATCHING");
      sb.append("=");
      sb.append(String.valueOf(this.MATCHING));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.PriceListName, other.PriceListName);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String PriceListName;
    String IsDefault;
    String IsTaxIncluded;
    String IsSales;
    String Currency;
    String EnforcePriceLimit;
    String PriceListVersionName;
    String DiscountSchema;
    String ValidFromDate;
    String BasePriceListVersion;
    String ProductName;
    String ListPrice;
    String StandardPrice;
    String PriceLimit;
    String flag;
    String whyError;
    String VALUE;
    String MATCHING;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result
            + ((this.PriceListName == null) ? 0 : this.PriceListName.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row7Struct other = (row7Struct) obj;

      if (this.PriceListName == null) {
        if (other.PriceListName != null)
          return false;
      } else if (!this.PriceListName.equals(other.PriceListName))
        return false;

      return true;
    }

    public void copyDataTo(row7Struct other) {

      other.Organization = this.Organization;
      other.PriceListName = this.PriceListName;
      other.IsDefault = this.IsDefault;
      other.IsTaxIncluded = this.IsTaxIncluded;
      other.IsSales = this.IsSales;
      other.Currency = this.Currency;
      other.EnforcePriceLimit = this.EnforcePriceLimit;
      other.PriceListVersionName = this.PriceListVersionName;
      other.DiscountSchema = this.DiscountSchema;
      other.ValidFromDate = this.ValidFromDate;
      other.BasePriceListVersion = this.BasePriceListVersion;
      other.ProductName = this.ProductName;
      other.ListPrice = this.ListPrice;
      other.StandardPrice = this.StandardPrice;
      other.PriceLimit = this.PriceLimit;
      other.flag = this.flag;
      other.whyError = this.whyError;
      other.VALUE = this.VALUE;
      other.MATCHING = this.MATCHING;

    }

    public void copyKeysDataTo(row7Struct other) {

      other.PriceListName = this.PriceListName;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsTaxIncluded = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsTaxIncluded = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EnforcePriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EnforcePriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListVersionName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListVersionName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DiscountSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DiscountSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ValidFromDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ValidFromDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BasePriceListVersion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BasePriceListVersion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ListPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ListPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.VALUE = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.VALUE = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MATCHING = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MATCHING = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsTaxIncluded == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsTaxIncluded.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EnforcePriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EnforcePriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListVersionName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListVersionName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DiscountSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DiscountSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ValidFromDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ValidFromDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BasePriceListVersion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BasePriceListVersion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ListPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ListPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.VALUE == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.VALUE.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MATCHING == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MATCHING.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("PriceListName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListName));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("IsTaxIncluded");
      sb.append("=");
      sb.append(String.valueOf(this.IsTaxIncluded));

      sb.append(", ");

      sb.append("IsSales");
      sb.append("=");
      sb.append(String.valueOf(this.IsSales));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("EnforcePriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.EnforcePriceLimit));

      sb.append(", ");

      sb.append("PriceListVersionName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListVersionName));

      sb.append(", ");

      sb.append("DiscountSchema");
      sb.append("=");
      sb.append(String.valueOf(this.DiscountSchema));

      sb.append(", ");

      sb.append("ValidFromDate");
      sb.append("=");
      sb.append(String.valueOf(this.ValidFromDate));

      sb.append(", ");

      sb.append("BasePriceListVersion");
      sb.append("=");
      sb.append(String.valueOf(this.BasePriceListVersion));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("ListPrice");
      sb.append("=");
      sb.append(String.valueOf(this.ListPrice));

      sb.append(", ");

      sb.append("StandardPrice");
      sb.append("=");
      sb.append(String.valueOf(this.StandardPrice));

      sb.append(", ");

      sb.append("PriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.PriceLimit));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append(", ");

      sb.append("VALUE");
      sb.append("=");
      sb.append(String.valueOf(this.VALUE));

      sb.append(", ");

      sb.append("MATCHING");
      sb.append("=");
      sb.append(String.valueOf(this.MATCHING));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.PriceListName, other.PriceListName);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String PriceListName;
    String IsDefault;
    String IsTaxIncluded;
    String IsSales;
    String Currency;
    String EnforcePriceLimit;
    String PriceListVersionName;
    String DiscountSchema;
    String ValidFromDate;
    String BasePriceListVersion;
    String ProductName;
    String ListPrice;
    String StandardPrice;
    String PriceLimit;
    String flag;
    String whyError;
    String VALUE;
    String MATCHING;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result
            + ((this.PriceListName == null) ? 0 : this.PriceListName.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row21Struct other = (row21Struct) obj;

      if (this.PriceListName == null) {
        if (other.PriceListName != null)
          return false;
      } else if (!this.PriceListName.equals(other.PriceListName))
        return false;

      return true;
    }

    public void copyDataTo(row21Struct other) {

      other.Organization = this.Organization;
      other.PriceListName = this.PriceListName;
      other.IsDefault = this.IsDefault;
      other.IsTaxIncluded = this.IsTaxIncluded;
      other.IsSales = this.IsSales;
      other.Currency = this.Currency;
      other.EnforcePriceLimit = this.EnforcePriceLimit;
      other.PriceListVersionName = this.PriceListVersionName;
      other.DiscountSchema = this.DiscountSchema;
      other.ValidFromDate = this.ValidFromDate;
      other.BasePriceListVersion = this.BasePriceListVersion;
      other.ProductName = this.ProductName;
      other.ListPrice = this.ListPrice;
      other.StandardPrice = this.StandardPrice;
      other.PriceLimit = this.PriceLimit;
      other.flag = this.flag;
      other.whyError = this.whyError;
      other.VALUE = this.VALUE;
      other.MATCHING = this.MATCHING;

    }

    public void copyKeysDataTo(row21Struct other) {

      other.PriceListName = this.PriceListName;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsTaxIncluded = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsTaxIncluded = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EnforcePriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EnforcePriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListVersionName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListVersionName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DiscountSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DiscountSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ValidFromDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ValidFromDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BasePriceListVersion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BasePriceListVersion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ListPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ListPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.VALUE = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.VALUE = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MATCHING = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MATCHING = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsTaxIncluded == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsTaxIncluded.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EnforcePriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EnforcePriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListVersionName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListVersionName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DiscountSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DiscountSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ValidFromDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ValidFromDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BasePriceListVersion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BasePriceListVersion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ListPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ListPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.VALUE == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.VALUE.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MATCHING == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MATCHING.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("PriceListName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListName));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("IsTaxIncluded");
      sb.append("=");
      sb.append(String.valueOf(this.IsTaxIncluded));

      sb.append(", ");

      sb.append("IsSales");
      sb.append("=");
      sb.append(String.valueOf(this.IsSales));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("EnforcePriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.EnforcePriceLimit));

      sb.append(", ");

      sb.append("PriceListVersionName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListVersionName));

      sb.append(", ");

      sb.append("DiscountSchema");
      sb.append("=");
      sb.append(String.valueOf(this.DiscountSchema));

      sb.append(", ");

      sb.append("ValidFromDate");
      sb.append("=");
      sb.append(String.valueOf(this.ValidFromDate));

      sb.append(", ");

      sb.append("BasePriceListVersion");
      sb.append("=");
      sb.append(String.valueOf(this.BasePriceListVersion));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("ListPrice");
      sb.append("=");
      sb.append(String.valueOf(this.ListPrice));

      sb.append(", ");

      sb.append("StandardPrice");
      sb.append("=");
      sb.append(String.valueOf(this.StandardPrice));

      sb.append(", ");

      sb.append("PriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.PriceLimit));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append(", ");

      sb.append("VALUE");
      sb.append("=");
      sb.append(String.valueOf(this.VALUE));

      sb.append(", ");

      sb.append("MATCHING");
      sb.append("=");
      sb.append(String.valueOf(this.MATCHING));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.PriceListName, other.PriceListName);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String PriceListName;
    String IsDefault;
    String IsTaxIncluded;
    String IsSales;
    String Currency;
    String EnforcePriceLimit;
    String PriceListVersionName;
    String DiscountSchema;
    String ValidFromDate;
    String BasePriceListVersion;
    String ProductName;
    String ListPrice;
    String StandardPrice;
    String PriceLimit;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result
            + ((this.PriceListName == null) ? 0 : this.PriceListName.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row2Struct other = (row2Struct) obj;

      if (this.PriceListName == null) {
        if (other.PriceListName != null)
          return false;
      } else if (!this.PriceListName.equals(other.PriceListName))
        return false;

      return true;
    }

    public void copyDataTo(row2Struct other) {

      other.Organization = this.Organization;
      other.PriceListName = this.PriceListName;
      other.IsDefault = this.IsDefault;
      other.IsTaxIncluded = this.IsTaxIncluded;
      other.IsSales = this.IsSales;
      other.Currency = this.Currency;
      other.EnforcePriceLimit = this.EnforcePriceLimit;
      other.PriceListVersionName = this.PriceListVersionName;
      other.DiscountSchema = this.DiscountSchema;
      other.ValidFromDate = this.ValidFromDate;
      other.BasePriceListVersion = this.BasePriceListVersion;
      other.ProductName = this.ProductName;
      other.ListPrice = this.ListPrice;
      other.StandardPrice = this.StandardPrice;
      other.PriceLimit = this.PriceLimit;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row2Struct other) {

      other.PriceListName = this.PriceListName;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsTaxIncluded = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsTaxIncluded = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EnforcePriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EnforcePriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListVersionName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListVersionName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DiscountSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DiscountSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ValidFromDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ValidFromDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BasePriceListVersion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BasePriceListVersion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ListPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ListPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsTaxIncluded == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsTaxIncluded.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EnforcePriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EnforcePriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListVersionName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListVersionName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DiscountSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DiscountSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ValidFromDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ValidFromDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BasePriceListVersion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BasePriceListVersion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ListPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ListPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("PriceListName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListName));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("IsTaxIncluded");
      sb.append("=");
      sb.append(String.valueOf(this.IsTaxIncluded));

      sb.append(", ");

      sb.append("IsSales");
      sb.append("=");
      sb.append(String.valueOf(this.IsSales));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("EnforcePriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.EnforcePriceLimit));

      sb.append(", ");

      sb.append("PriceListVersionName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListVersionName));

      sb.append(", ");

      sb.append("DiscountSchema");
      sb.append("=");
      sb.append(String.valueOf(this.DiscountSchema));

      sb.append(", ");

      sb.append("ValidFromDate");
      sb.append("=");
      sb.append(String.valueOf(this.ValidFromDate));

      sb.append(", ");

      sb.append("BasePriceListVersion");
      sb.append("=");
      sb.append(String.valueOf(this.BasePriceListVersion));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("ListPrice");
      sb.append("=");
      sb.append(String.valueOf(this.ListPrice));

      sb.append(", ");

      sb.append("StandardPrice");
      sb.append("=");
      sb.append(String.valueOf(this.StandardPrice));

      sb.append(", ");

      sb.append("PriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.PriceLimit));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.PriceListName, other.PriceListName);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String PriceListName;
    String IsDefault;
    String IsTaxIncluded;
    String IsSales;
    String Currency;
    String EnforcePriceLimit;
    String PriceListVersionName;
    String DiscountSchema;
    String ValidFromDate;
    String BasePriceListVersion;
    String ProductName;
    String ListPrice;
    String StandardPrice;
    String PriceLimit;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result
            + ((this.PriceListName == null) ? 0 : this.PriceListName.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row10Struct other = (row10Struct) obj;

      if (this.PriceListName == null) {
        if (other.PriceListName != null)
          return false;
      } else if (!this.PriceListName.equals(other.PriceListName))
        return false;

      return true;
    }

    public void copyDataTo(row10Struct other) {

      other.Organization = this.Organization;
      other.PriceListName = this.PriceListName;
      other.IsDefault = this.IsDefault;
      other.IsTaxIncluded = this.IsTaxIncluded;
      other.IsSales = this.IsSales;
      other.Currency = this.Currency;
      other.EnforcePriceLimit = this.EnforcePriceLimit;
      other.PriceListVersionName = this.PriceListVersionName;
      other.DiscountSchema = this.DiscountSchema;
      other.ValidFromDate = this.ValidFromDate;
      other.BasePriceListVersion = this.BasePriceListVersion;
      other.ProductName = this.ProductName;
      other.ListPrice = this.ListPrice;
      other.StandardPrice = this.StandardPrice;
      other.PriceLimit = this.PriceLimit;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row10Struct other) {

      other.PriceListName = this.PriceListName;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsTaxIncluded = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsTaxIncluded = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EnforcePriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EnforcePriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListVersionName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListVersionName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DiscountSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DiscountSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ValidFromDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ValidFromDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BasePriceListVersion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BasePriceListVersion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ListPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ListPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsTaxIncluded == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsTaxIncluded.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EnforcePriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EnforcePriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListVersionName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListVersionName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DiscountSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DiscountSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ValidFromDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ValidFromDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BasePriceListVersion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BasePriceListVersion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ListPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ListPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("PriceListName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListName));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("IsTaxIncluded");
      sb.append("=");
      sb.append(String.valueOf(this.IsTaxIncluded));

      sb.append(", ");

      sb.append("IsSales");
      sb.append("=");
      sb.append(String.valueOf(this.IsSales));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("EnforcePriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.EnforcePriceLimit));

      sb.append(", ");

      sb.append("PriceListVersionName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListVersionName));

      sb.append(", ");

      sb.append("DiscountSchema");
      sb.append("=");
      sb.append(String.valueOf(this.DiscountSchema));

      sb.append(", ");

      sb.append("ValidFromDate");
      sb.append("=");
      sb.append(String.valueOf(this.ValidFromDate));

      sb.append(", ");

      sb.append("BasePriceListVersion");
      sb.append("=");
      sb.append(String.valueOf(this.BasePriceListVersion));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("ListPrice");
      sb.append("=");
      sb.append(String.valueOf(this.ListPrice));

      sb.append(", ");

      sb.append("StandardPrice");
      sb.append("=");
      sb.append(String.valueOf(this.StandardPrice));

      sb.append(", ");

      sb.append("PriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.PriceLimit));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.PriceListName, other.PriceListName);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String PriceListName;
    String IsDefault;
    String IsTaxIncluded;
    String IsSales;
    String Currency;
    String EnforcePriceLimit;
    String PriceListVersionName;
    String DiscountSchema;
    String ValidFromDate;
    String BasePriceListVersion;
    String ProductName;
    String ListPrice;
    String StandardPrice;
    String PriceLimit;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result
            + ((this.PriceListName == null) ? 0 : this.PriceListName.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row9Struct other = (row9Struct) obj;

      if (this.PriceListName == null) {
        if (other.PriceListName != null)
          return false;
      } else if (!this.PriceListName.equals(other.PriceListName))
        return false;

      return true;
    }

    public void copyDataTo(row9Struct other) {

      other.Organization = this.Organization;
      other.PriceListName = this.PriceListName;
      other.IsDefault = this.IsDefault;
      other.IsTaxIncluded = this.IsTaxIncluded;
      other.IsSales = this.IsSales;
      other.Currency = this.Currency;
      other.EnforcePriceLimit = this.EnforcePriceLimit;
      other.PriceListVersionName = this.PriceListVersionName;
      other.DiscountSchema = this.DiscountSchema;
      other.ValidFromDate = this.ValidFromDate;
      other.BasePriceListVersion = this.BasePriceListVersion;
      other.ProductName = this.ProductName;
      other.ListPrice = this.ListPrice;
      other.StandardPrice = this.StandardPrice;
      other.PriceLimit = this.PriceLimit;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row9Struct other) {

      other.PriceListName = this.PriceListName;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsTaxIncluded = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsTaxIncluded = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EnforcePriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EnforcePriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListVersionName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListVersionName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DiscountSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DiscountSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ValidFromDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ValidFromDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BasePriceListVersion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BasePriceListVersion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ListPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ListPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsTaxIncluded == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsTaxIncluded.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EnforcePriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EnforcePriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListVersionName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListVersionName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DiscountSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DiscountSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ValidFromDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ValidFromDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BasePriceListVersion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BasePriceListVersion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ListPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ListPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("PriceListName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListName));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("IsTaxIncluded");
      sb.append("=");
      sb.append(String.valueOf(this.IsTaxIncluded));

      sb.append(", ");

      sb.append("IsSales");
      sb.append("=");
      sb.append(String.valueOf(this.IsSales));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("EnforcePriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.EnforcePriceLimit));

      sb.append(", ");

      sb.append("PriceListVersionName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListVersionName));

      sb.append(", ");

      sb.append("DiscountSchema");
      sb.append("=");
      sb.append(String.valueOf(this.DiscountSchema));

      sb.append(", ");

      sb.append("ValidFromDate");
      sb.append("=");
      sb.append(String.valueOf(this.ValidFromDate));

      sb.append(", ");

      sb.append("BasePriceListVersion");
      sb.append("=");
      sb.append(String.valueOf(this.BasePriceListVersion));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("ListPrice");
      sb.append("=");
      sb.append(String.valueOf(this.ListPrice));

      sb.append(", ");

      sb.append("StandardPrice");
      sb.append("=");
      sb.append(String.valueOf(this.StandardPrice));

      sb.append(", ");

      sb.append("PriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.PriceLimit));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.PriceListName, other.PriceListName);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String PriceListName;
    String IsDefault;
    String IsTaxIncluded;
    String IsSales;
    String Currency;
    String EnforcePriceLimit;
    String PriceListVersionName;
    String DiscountSchema;
    String ValidFromDate;
    String BasePriceListVersion;
    String ProductName;
    String ListPrice;
    String StandardPrice;
    String PriceLimit;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result
            + ((this.PriceListName == null) ? 0 : this.PriceListName.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row1Struct other = (row1Struct) obj;

      if (this.PriceListName == null) {
        if (other.PriceListName != null)
          return false;
      } else if (!this.PriceListName.equals(other.PriceListName))
        return false;

      return true;
    }

    public void copyDataTo(row1Struct other) {

      other.Organization = this.Organization;
      other.PriceListName = this.PriceListName;
      other.IsDefault = this.IsDefault;
      other.IsTaxIncluded = this.IsTaxIncluded;
      other.IsSales = this.IsSales;
      other.Currency = this.Currency;
      other.EnforcePriceLimit = this.EnforcePriceLimit;
      other.PriceListVersionName = this.PriceListVersionName;
      other.DiscountSchema = this.DiscountSchema;
      other.ValidFromDate = this.ValidFromDate;
      other.BasePriceListVersion = this.BasePriceListVersion;
      other.ProductName = this.ProductName;
      other.ListPrice = this.ListPrice;
      other.StandardPrice = this.StandardPrice;
      other.PriceLimit = this.PriceLimit;

    }

    public void copyKeysDataTo(row1Struct other) {

      other.PriceListName = this.PriceListName;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsTaxIncluded = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsTaxIncluded = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EnforcePriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EnforcePriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListVersionName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListVersionName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DiscountSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DiscountSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ValidFromDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ValidFromDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BasePriceListVersion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BasePriceListVersion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ListPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ListPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceLimit = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsTaxIncluded == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsTaxIncluded.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EnforcePriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EnforcePriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListVersionName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListVersionName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DiscountSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DiscountSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ValidFromDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ValidFromDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BasePriceListVersion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BasePriceListVersion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ListPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ListPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("PriceListName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListName));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("IsTaxIncluded");
      sb.append("=");
      sb.append(String.valueOf(this.IsTaxIncluded));

      sb.append(", ");

      sb.append("IsSales");
      sb.append("=");
      sb.append(String.valueOf(this.IsSales));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("EnforcePriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.EnforcePriceLimit));

      sb.append(", ");

      sb.append("PriceListVersionName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListVersionName));

      sb.append(", ");

      sb.append("DiscountSchema");
      sb.append("=");
      sb.append(String.valueOf(this.DiscountSchema));

      sb.append(", ");

      sb.append("ValidFromDate");
      sb.append("=");
      sb.append(String.valueOf(this.ValidFromDate));

      sb.append(", ");

      sb.append("BasePriceListVersion");
      sb.append("=");
      sb.append(String.valueOf(this.BasePriceListVersion));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("ListPrice");
      sb.append("=");
      sb.append(String.valueOf(this.ListPrice));

      sb.append(", ");

      sb.append("StandardPrice");
      sb.append("=");
      sb.append(String.valueOf(this.StandardPrice));

      sb.append(", ");

      sb.append("PriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.PriceLimit));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.PriceListName, other.PriceListName);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class after_tFileInputDelimited_1Struct implements
      routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String PriceListName;
    String IsDefault;
    String IsTaxIncluded;
    String IsSales;
    String Currency;
    String EnforcePriceLimit;
    String PriceListVersionName;
    String DiscountSchema;
    String ValidFromDate;
    String BasePriceListVersion;
    String ProductName;
    String ListPrice;
    String StandardPrice;
    String PriceLimit;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result
            + ((this.PriceListName == null) ? 0 : this.PriceListName.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final after_tFileInputDelimited_1Struct other = (after_tFileInputDelimited_1Struct) obj;

      if (this.PriceListName == null) {
        if (other.PriceListName != null)
          return false;
      } else if (!this.PriceListName.equals(other.PriceListName))
        return false;

      return true;
    }

    public void copyDataTo(after_tFileInputDelimited_1Struct other) {

      other.Organization = this.Organization;
      other.PriceListName = this.PriceListName;
      other.IsDefault = this.IsDefault;
      other.IsTaxIncluded = this.IsTaxIncluded;
      other.IsSales = this.IsSales;
      other.Currency = this.Currency;
      other.EnforcePriceLimit = this.EnforcePriceLimit;
      other.PriceListVersionName = this.PriceListVersionName;
      other.DiscountSchema = this.DiscountSchema;
      other.ValidFromDate = this.ValidFromDate;
      other.BasePriceListVersion = this.BasePriceListVersion;
      other.ProductName = this.ProductName;
      other.ListPrice = this.ListPrice;
      other.StandardPrice = this.StandardPrice;
      other.PriceLimit = this.PriceLimit;

    }

    public void copyKeysDataTo(after_tFileInputDelimited_1Struct other) {

      other.PriceListName = this.PriceListName;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsTaxIncluded = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsTaxIncluded = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EnforcePriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EnforcePriceLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceListVersionName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceListVersionName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DiscountSchema = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DiscountSchema = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ValidFromDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ValidFromDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BasePriceListVersion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BasePriceListVersion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ListPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ListPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardPrice = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardPrice = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceLimit = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsTaxIncluded == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsTaxIncluded.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EnforcePriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EnforcePriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceListVersionName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceListVersionName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DiscountSchema == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DiscountSchema.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ValidFromDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ValidFromDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BasePriceListVersion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BasePriceListVersion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ListPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ListPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardPrice == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardPrice.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("PriceListName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListName));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("IsTaxIncluded");
      sb.append("=");
      sb.append(String.valueOf(this.IsTaxIncluded));

      sb.append(", ");

      sb.append("IsSales");
      sb.append("=");
      sb.append(String.valueOf(this.IsSales));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("EnforcePriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.EnforcePriceLimit));

      sb.append(", ");

      sb.append("PriceListVersionName");
      sb.append("=");
      sb.append(String.valueOf(this.PriceListVersionName));

      sb.append(", ");

      sb.append("DiscountSchema");
      sb.append("=");
      sb.append(String.valueOf(this.DiscountSchema));

      sb.append(", ");

      sb.append("ValidFromDate");
      sb.append("=");
      sb.append(String.valueOf(this.ValidFromDate));

      sb.append(", ");

      sb.append("BasePriceListVersion");
      sb.append("=");
      sb.append(String.valueOf(this.BasePriceListVersion));

      sb.append(", ");

      sb.append("ProductName");
      sb.append("=");
      sb.append(String.valueOf(this.ProductName));

      sb.append(", ");

      sb.append("ListPrice");
      sb.append("=");
      sb.append(String.valueOf(this.ListPrice));

      sb.append(", ");

      sb.append("StandardPrice");
      sb.append("=");
      sb.append(String.valueOf(this.StandardPrice));

      sb.append(", ");

      sb.append("PriceLimit");
      sb.append("=");
      sb.append(String.valueOf(this.PriceLimit));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_1Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.PriceListName, other.PriceListName);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap)
      throws TalendException {
    globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

    String currentComponent = "";

    try {
      tJavaFlex_1Process(globalMap);

      row1Struct row1 = new row1Struct();
      row9Struct row9 = new row9Struct();
      row2Struct row2 = new row2Struct();
      row21Struct row21 = new row21Struct();
      row14Struct row14 = new row14Struct();
      row15Struct row15 = new row15Struct();
      row16Struct row16 = new row16Struct();
      row24Struct row24 = new row24Struct();
      row22Struct row22 = new row22Struct();
      row19Struct row19 = new row19Struct();
      row8Struct row8 = new row8Struct();
      row7Struct row7 = new row7Struct();
      row10Struct row10 = new row10Struct();

      /**
       * [tJavaRow_8 begin ] start
       */

      ok_Hash.put("tJavaRow_8", false);
      start_Hash.put("tJavaRow_8", System.currentTimeMillis());
      currentComponent = "tJavaRow_8";

      int nb_line_tJavaRow_8 = 0;

      /**
       * [tJavaRow_8 begin ] stop
       */

      /**
       * [tJavaRow_12 begin ] start
       */

      ok_Hash.put("tJavaRow_12", false);
      start_Hash.put("tJavaRow_12", System.currentTimeMillis());
      currentComponent = "tJavaRow_12";

      int nb_line_tJavaRow_12 = 0;

      /**
       * [tJavaRow_12 begin ] stop
       */

      /**
       * [tFilterRow_10 begin ] start
       */

      ok_Hash.put("tFilterRow_10", false);
      start_Hash.put("tFilterRow_10", System.currentTimeMillis());
      currentComponent = "tFilterRow_10";

      int nb_line_tFilterRow_10 = 0;
      int nb_line_ok_tFilterRow_10 = 0;
      int nb_line_reject_tFilterRow_10 = 0;

      /**
       * [tFilterRow_10 begin ] stop
       */

      /**
       * [tJavaRow_16 begin ] start
       */

      ok_Hash.put("tJavaRow_16", false);
      start_Hash.put("tJavaRow_16", System.currentTimeMillis());
      currentComponent = "tJavaRow_16";

      int nb_line_tJavaRow_16 = 0;

      /**
       * [tJavaRow_16 begin ] stop
       */

      /**
       * [tJavaRow_7 begin ] start
       */

      ok_Hash.put("tJavaRow_7", false);
      start_Hash.put("tJavaRow_7", System.currentTimeMillis());
      currentComponent = "tJavaRow_7";

      int nb_line_tJavaRow_7 = 0;

      /**
       * [tJavaRow_7 begin ] stop
       */

      /**
       * [tFilterRow_5 begin ] start
       */

      ok_Hash.put("tFilterRow_5", false);
      start_Hash.put("tFilterRow_5", System.currentTimeMillis());
      currentComponent = "tFilterRow_5";

      int nb_line_tFilterRow_5 = 0;
      int nb_line_ok_tFilterRow_5 = 0;
      int nb_line_reject_tFilterRow_5 = 0;

      /**
       * [tFilterRow_5 begin ] stop
       */

      /**
       * [tJavaRow_15 begin ] start
       */

      ok_Hash.put("tJavaRow_15", false);
      start_Hash.put("tJavaRow_15", System.currentTimeMillis());
      currentComponent = "tJavaRow_15";

      int nb_line_tJavaRow_15 = 0;

      /**
       * [tJavaRow_15 begin ] stop
       */

      /**
       * [tJavaRow_6 begin ] start
       */

      ok_Hash.put("tJavaRow_6", false);
      start_Hash.put("tJavaRow_6", System.currentTimeMillis());
      currentComponent = "tJavaRow_6";

      int nb_line_tJavaRow_6 = 0;

      /**
       * [tJavaRow_6 begin ] stop
       */

      /**
       * [tFilterRow_4 begin ] start
       */

      ok_Hash.put("tFilterRow_4", false);
      start_Hash.put("tFilterRow_4", System.currentTimeMillis());
      currentComponent = "tFilterRow_4";

      int nb_line_tFilterRow_4 = 0;
      int nb_line_ok_tFilterRow_4 = 0;
      int nb_line_reject_tFilterRow_4 = 0;

      /**
       * [tFilterRow_4 begin ] stop
       */

      /**
       * [tFuzzyMatch_2 begin ] start
       */

      ok_Hash.put("tFuzzyMatch_2", false);
      start_Hash.put("tFuzzyMatch_2", System.currentTimeMillis());
      currentComponent = "tFuzzyMatch_2";

      int nb_line_tFuzzyMatch_2 = 0;

      java.util.Set<row20Struct> tSet_row20_tFuzzyMatch_2 = ((java.util.Map<row20Struct, row20Struct>) globalMap
          .get("tHash_row20")).keySet();

      /**
       * [tFuzzyMatch_2 begin ] stop
       */

      /**
       * [tJavaRow_14 begin ] start
       */

      ok_Hash.put("tJavaRow_14", false);
      start_Hash.put("tJavaRow_14", System.currentTimeMillis());
      currentComponent = "tJavaRow_14";

      int nb_line_tJavaRow_14 = 0;

      /**
       * [tJavaRow_14 begin ] stop
       */

      /**
       * [tFilterRow_6 begin ] start
       */

      ok_Hash.put("tFilterRow_6", false);
      start_Hash.put("tFilterRow_6", System.currentTimeMillis());
      currentComponent = "tFilterRow_6";

      int nb_line_tFilterRow_6 = 0;
      int nb_line_ok_tFilterRow_6 = 0;
      int nb_line_reject_tFilterRow_6 = 0;

      /**
       * [tFilterRow_6 begin ] stop
       */

      /**
       * [tJavaRow_10 begin ] start
       */

      ok_Hash.put("tJavaRow_10", false);
      start_Hash.put("tJavaRow_10", System.currentTimeMillis());
      currentComponent = "tJavaRow_10";

      int nb_line_tJavaRow_10 = 0;

      /**
       * [tJavaRow_10 begin ] stop
       */

      /**
       * [tFileInputDelimited_1 begin ] start
       */

      ok_Hash.put("tFileInputDelimited_1", false);
      start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
      currentComponent = "tFileInputDelimited_1";

      int nb_line_tFileInputDelimited_1 = 0;
      int footer_tFileInputDelimited_1 = 0;
      int totalLinetFileInputDelimited_1 = 0;
      int limittFileInputDelimited_1 = -1;
      int lastLinetFileInputDelimited_1 = -1;

      char fieldSeparator_tFileInputDelimited_1[] = null;

      // support passing value (property: Field Separator) by 'context.fs'
      // or 'globalMap.get("fs")'.
      if (((String) ",").length() > 0) {
        fieldSeparator_tFileInputDelimited_1 = ((String) ",").toCharArray();
      } else {
        throw new IllegalArgumentException("Field Separator must be assigned a char.");
      }

      char rowSeparator_tFileInputDelimited_1[] = null;

      // support passing value (property: Row Separator) by 'context.rs'
      // or 'globalMap.get("rs")'.
      if (((String) "\n").length() > 0) {
        rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
      } else {
        throw new IllegalArgumentException("Row Separator must be assigned a char.");
      }

      com.csvreader.CsvReader csvReadertFileInputDelimited_1 = new com.csvreader.CsvReader(
          new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(/**
           * 
           * Start field tFileInputDelimited_1:FILENAME
           */
          context.getProperty("filename")/**
           * End field tFileInputDelimited_1:FILENAME
           */
          ), "UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);

      if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
          && (rowSeparator_tFileInputDelimited_1[0] != '\r'))
        csvReadertFileInputDelimited_1.setRecordDelimiter(rowSeparator_tFileInputDelimited_1[0]);

      csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
      csvReadertFileInputDelimited_1.setTextQualifier('"');

      csvReadertFileInputDelimited_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      String[] rowtFileInputDelimited_1 = null;

      if (footer_tFileInputDelimited_1 > 0) {

        while (csvReadertFileInputDelimited_1.readRecord()) {
          rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();
          if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
              .equals(rowtFileInputDelimited_1[0]))) {// empty
            // line when
            // row
            // separator
            // is '\n'

            totalLinetFileInputDelimited_1++;

          }

        }
        int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
            - footer_tFileInputDelimited_1 < 0 ? 0 : totalLinetFileInputDelimited_1
            - footer_tFileInputDelimited_1;
        if (lastLinetFileInputDelimited_1 > 0) {
          lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
              : lastLineTemptFileInputDelimited_1;
        } else {
          lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
        }

        csvReadertFileInputDelimited_1.close();

        csvReadertFileInputDelimited_1 = new com.csvreader.CsvReader(new java.io.BufferedReader(
            new java.io.InputStreamReader(new java.io.FileInputStream(/**
             * Start field
             * tFileInputDelimited_1:FILENAME
             */
            context.getProperty("filename")/**
             * End field tFileInputDelimited_1:FILENAME
             */
            ), "UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);

        if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
            && (rowSeparator_tFileInputDelimited_1[0] != '\r'))
          csvReadertFileInputDelimited_1.setRecordDelimiter(rowSeparator_tFileInputDelimited_1[0]);
        csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
        csvReadertFileInputDelimited_1.setTextQualifier('"');
        csvReadertFileInputDelimited_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      }

      int currentLinetFileInputDelimited_1 = 0;
      int outputLinetFileInputDelimited_1 = 0;

      while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1.readRecord()) {

        rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

        if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
          // line
          // when
          // row
          // separator
          // is
          // '\n'
          continue;
        }

        currentLinetFileInputDelimited_1++;
        if (currentLinetFileInputDelimited_1 < 1 + 1) {
          continue;
        }

        if (lastLinetFileInputDelimited_1 > -1
            && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
          break;
        }
        outputLinetFileInputDelimited_1++;
        if (limittFileInputDelimited_1 > 0
            && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
          break;
        }

        row1 = null;
        row1 = new row1Struct();
        try {

          if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
            // line
            // when
            // row
            // separator
            // is
            // '\n'

            row1.Organization = null;

            row1.PriceListName = null;

            row1.IsDefault = null;

            row1.IsTaxIncluded = null;

            row1.IsSales = null;

            row1.Currency = null;

            row1.EnforcePriceLimit = null;

            row1.PriceListVersionName = null;

            row1.DiscountSchema = null;

            row1.ValidFromDate = null;

            row1.BasePriceListVersion = null;

            row1.ProductName = null;

            row1.ListPrice = null;

            row1.StandardPrice = null;

            row1.PriceLimit = null;

          } else {

            if (0 < rowtFileInputDelimited_1.length) {
              row1.Organization = rowtFileInputDelimited_1[0].trim();

            } else {
              row1.Organization = null;
            }

            if (1 < rowtFileInputDelimited_1.length) {
              row1.PriceListName = rowtFileInputDelimited_1[1].trim();

            } else {
              row1.PriceListName = null;
            }

            if (2 < rowtFileInputDelimited_1.length) {
              row1.IsDefault = rowtFileInputDelimited_1[2].trim();

            } else {
              row1.IsDefault = null;
            }

            if (3 < rowtFileInputDelimited_1.length) {
              row1.IsTaxIncluded = rowtFileInputDelimited_1[3].trim();

            } else {
              row1.IsTaxIncluded = null;
            }

            if (4 < rowtFileInputDelimited_1.length) {
              row1.IsSales = rowtFileInputDelimited_1[4].trim();

            } else {
              row1.IsSales = null;
            }

            if (5 < rowtFileInputDelimited_1.length) {
              row1.Currency = rowtFileInputDelimited_1[5].trim();

            } else {
              row1.Currency = null;
            }

            if (6 < rowtFileInputDelimited_1.length) {
              row1.EnforcePriceLimit = rowtFileInputDelimited_1[6].trim();

            } else {
              row1.EnforcePriceLimit = null;
            }

            if (7 < rowtFileInputDelimited_1.length) {
              row1.PriceListVersionName = rowtFileInputDelimited_1[7].trim();

            } else {
              row1.PriceListVersionName = null;
            }

            if (8 < rowtFileInputDelimited_1.length) {
              row1.DiscountSchema = rowtFileInputDelimited_1[8].trim();

            } else {
              row1.DiscountSchema = null;
            }

            if (9 < rowtFileInputDelimited_1.length) {
              row1.ValidFromDate = rowtFileInputDelimited_1[9].trim();

            } else {
              row1.ValidFromDate = null;
            }

            if (10 < rowtFileInputDelimited_1.length) {
              row1.BasePriceListVersion = rowtFileInputDelimited_1[10].trim();

            } else {
              row1.BasePriceListVersion = null;
            }

            if (11 < rowtFileInputDelimited_1.length) {
              row1.ProductName = rowtFileInputDelimited_1[11].trim();

            } else {
              row1.ProductName = null;
            }

            if (12 < rowtFileInputDelimited_1.length) {
              row1.ListPrice = rowtFileInputDelimited_1[12].trim();

            } else {
              row1.ListPrice = null;
            }

            if (13 < rowtFileInputDelimited_1.length) {
              row1.StandardPrice = rowtFileInputDelimited_1[13].trim();

            } else {
              row1.StandardPrice = null;
            }

            if (14 < rowtFileInputDelimited_1.length) {
              row1.PriceLimit = rowtFileInputDelimited_1[14].trim();

            } else {
              row1.PriceLimit = null;
            }

          }

        } catch (Exception e) {
          System.err.println(e.getMessage());
          row1 = null;
        }

        /**
         * [tFileInputDelimited_1 begin ] stop
         */
        /**
         * [tFileInputDelimited_1 main ] start
         */

        currentComponent = "tFileInputDelimited_1";

        /**
         * [tFileInputDelimited_1 main ] stop
         */
        // Start of branch "row1"
        if (row1 != null) {

          /**
           * [tJavaRow_10 main ] start
           */

          currentComponent = "tJavaRow_10";

          org.openbravo.idl.proc.IdlService service = org.openbravo.idl.proc.IdlIntService
              .getInstance().getService("Price List");
          org.openbravo.idl.proc.Validator validator = service.getValidator("Price List");

          row9.Organization = validator.checkOrganization(row1.Organization);
          row9.PriceListName = validator.checkNotNull(
              validator.checkString(row1.PriceListName, 60), "PriceListName");
          row9.IsDefault = validator.checkNotNull(
              validator.checkBoolean(row1.IsDefault, "IsDefault"), "IsDefault");
          row9.IsTaxIncluded = validator.checkNotNull(
              validator.checkBoolean(row1.IsTaxIncluded, "IsTaxIncluded"), "IsTaxIncluded");
          row9.IsSales = validator.checkNotNull(
              validator.checkBoolean(row1.IsSales, "IsSalesPriceList"), "IsSalesPriceList");
          row9.Currency = validator.checkNotNull(
              validator.checkString(row1.Currency, 32, "Currency"), "Currency");
          row9.EnforcePriceLimit = validator.checkNotNull(
              validator.checkBoolean(row1.EnforcePriceLimit, "EnforcePriceLimit"),
              "EnforcePriceLimit");
          row9.PriceListVersionName = validator.checkNotNull(
              validator.checkString(row1.PriceListVersionName, 60), "PriceListVersionName");
          row9.DiscountSchema = validator.checkNotNull(
              validator.checkString(row1.DiscountSchema, 60, "DiscountSchema"), "DiscountSchema");
          row9.ValidFromDate = validator.checkDate(row1.ValidFromDate);
          row9.BasePriceListVersion = validator.checkString(row1.BasePriceListVersion, 60,
              "BasePriceListVersion");
          row9.ProductName = validator.checkNotNull(validator.checkString(row1.ProductName, 60),
              "ProductName");
          row9.ListPrice = validator.checkBigDecimal(row1.ListPrice);
          row9.StandardPrice = validator.checkBigDecimal(row1.StandardPrice);
          row9.PriceLimit = validator.checkBigDecimal(row1.PriceLimit);

          row9.flag = validator.getErrorCode();
          row9.whyError = validator.getErrorMessage();
          nb_line_tJavaRow_10++;

          /**
           * [tJavaRow_10 main ] stop
           */

          /**
           * [tFilterRow_6 main ] start
           */

          currentComponent = "tFilterRow_6";

          row2 = null;
          row10 = null;

          if (

          (row9.flag == null ? false : row9.flag.toLowerCase().compareTo("0") == 0)

          )

          {
            if (row2 == null) {
              row2 = new row2Struct();
            }
            row2.Organization = row9.Organization;
            row2.PriceListName = row9.PriceListName;
            row2.IsDefault = row9.IsDefault;
            row2.IsTaxIncluded = row9.IsTaxIncluded;
            row2.IsSales = row9.IsSales;
            row2.Currency = row9.Currency;
            row2.EnforcePriceLimit = row9.EnforcePriceLimit;
            row2.PriceListVersionName = row9.PriceListVersionName;
            row2.DiscountSchema = row9.DiscountSchema;
            row2.ValidFromDate = row9.ValidFromDate;
            row2.BasePriceListVersion = row9.BasePriceListVersion;
            row2.ProductName = row9.ProductName;
            row2.ListPrice = row9.ListPrice;
            row2.StandardPrice = row9.StandardPrice;
            row2.PriceLimit = row9.PriceLimit;
            row2.flag = row9.flag;
            row2.whyError = row9.whyError;
            nb_line_ok_tFilterRow_6++;
          } else {
            if (row10 == null) {
              row10 = new row10Struct();
            }
            row10.Organization = row9.Organization;
            row10.PriceListName = row9.PriceListName;
            row10.IsDefault = row9.IsDefault;
            row10.IsTaxIncluded = row9.IsTaxIncluded;
            row10.IsSales = row9.IsSales;
            row10.Currency = row9.Currency;
            row10.EnforcePriceLimit = row9.EnforcePriceLimit;
            row10.PriceListVersionName = row9.PriceListVersionName;
            row10.DiscountSchema = row9.DiscountSchema;
            row10.ValidFromDate = row9.ValidFromDate;
            row10.BasePriceListVersion = row9.BasePriceListVersion;
            row10.ProductName = row9.ProductName;
            row10.ListPrice = row9.ListPrice;
            row10.StandardPrice = row9.StandardPrice;
            row10.PriceLimit = row9.PriceLimit;
            row10.flag = row9.flag;
            row10.whyError = row9.whyError;
            nb_line_reject_tFilterRow_6++;
          }
          nb_line_tFilterRow_6++;

          /**
           * [tFilterRow_6 main ] stop
           */
          // Start of branch "row2"
          if (row2 != null) {

            /**
             * [tFuzzyMatch_2 main ] start
             */

            currentComponent = "tFuzzyMatch_2";

            row21.Organization = row2.Organization;

            row21.PriceListName = row2.PriceListName;

            row21.IsDefault = row2.IsDefault;

            row21.IsTaxIncluded = row2.IsTaxIncluded;

            row21.IsSales = row2.IsSales;

            row21.Currency = row2.Currency;

            row21.EnforcePriceLimit = row2.EnforcePriceLimit;

            row21.PriceListVersionName = row2.PriceListVersionName;

            row21.DiscountSchema = row2.DiscountSchema;

            row21.ValidFromDate = row2.ValidFromDate;

            row21.BasePriceListVersion = row2.BasePriceListVersion;

            row21.ProductName = row2.ProductName;

            row21.ListPrice = row2.ListPrice;

            row21.StandardPrice = row2.StandardPrice;

            row21.PriceLimit = row2.PriceLimit;

            row21.flag = row2.flag;

            row21.whyError = row2.whyError;

            row21.VALUE = null;

            row21.MATCHING = null;

            java.util.Iterator<row20Struct> tItr_row20_tFuzzyMatch_2 = tSet_row20_tFuzzyMatch_2
                .iterator();

            String tomatch_tFuzzyMatch_2 = ("" + row2.Currency);

            StringBuilder matching_tFuzzyMatch_2 = null;
            StringBuilder value_tFuzzyMatch_2 = null;

            while (tItr_row20_tFuzzyMatch_2.hasNext()) {

              String lookUpValue_tFuzzyMatch_2 = "" + tItr_row20_tFuzzyMatch_2.next().ISOcode;

              int distance_tFuzzyMatch_2 = org.apache.commons.lang.StringUtils
                  .getLevenshteinDistance(tomatch_tFuzzyMatch_2, lookUpValue_tFuzzyMatch_2);

              if (0 <= distance_tFuzzyMatch_2 && distance_tFuzzyMatch_2 <= 0) {

                if (matching_tFuzzyMatch_2 == null) {

                  value_tFuzzyMatch_2 = new StringBuilder(distance_tFuzzyMatch_2 + "");

                  matching_tFuzzyMatch_2 = new StringBuilder(lookUpValue_tFuzzyMatch_2);
                } else {

                  value_tFuzzyMatch_2.append(",").append(distance_tFuzzyMatch_2);

                  matching_tFuzzyMatch_2.append(",").append(lookUpValue_tFuzzyMatch_2);

                }
              }

            }

            if (matching_tFuzzyMatch_2 != null) {

              row21.VALUE = value_tFuzzyMatch_2.toString();

              row21.MATCHING = matching_tFuzzyMatch_2.toString();

            }

            nb_line_tFuzzyMatch_2++;

            /**
             * [tFuzzyMatch_2 main ] stop
             */

            /**
             * [tFilterRow_4 main ] start
             */

            currentComponent = "tFilterRow_4";

            row14 = null;
            row7 = null;

            if (

            ((row21.MATCHING == null || "0" == null) ? (row21.MATCHING != "0") : row21.MATCHING
                .compareTo("0") != 0)

            )

            {
              if (row14 == null) {
                row14 = new row14Struct();
              }
              row14.Organization = row21.Organization;
              row14.PriceListName = row21.PriceListName;
              row14.IsDefault = row21.IsDefault;
              row14.IsTaxIncluded = row21.IsTaxIncluded;
              row14.IsSales = row21.IsSales;
              row14.Currency = row21.Currency;
              row14.EnforcePriceLimit = row21.EnforcePriceLimit;
              row14.PriceListVersionName = row21.PriceListVersionName;
              row14.DiscountSchema = row21.DiscountSchema;
              row14.ValidFromDate = row21.ValidFromDate;
              row14.BasePriceListVersion = row21.BasePriceListVersion;
              row14.ProductName = row21.ProductName;
              row14.ListPrice = row21.ListPrice;
              row14.StandardPrice = row21.StandardPrice;
              row14.PriceLimit = row21.PriceLimit;
              row14.flag = row21.flag;
              row14.whyError = row21.whyError;
              row14.VALUE = row21.VALUE;
              row14.MATCHING = row21.MATCHING;
              nb_line_ok_tFilterRow_4++;
            } else {
              if (row7 == null) {
                row7 = new row7Struct();
              }
              row7.Organization = row21.Organization;
              row7.PriceListName = row21.PriceListName;
              row7.IsDefault = row21.IsDefault;
              row7.IsTaxIncluded = row21.IsTaxIncluded;
              row7.IsSales = row21.IsSales;
              row7.Currency = row21.Currency;
              row7.EnforcePriceLimit = row21.EnforcePriceLimit;
              row7.PriceListVersionName = row21.PriceListVersionName;
              row7.DiscountSchema = row21.DiscountSchema;
              row7.ValidFromDate = row21.ValidFromDate;
              row7.BasePriceListVersion = row21.BasePriceListVersion;
              row7.ProductName = row21.ProductName;
              row7.ListPrice = row21.ListPrice;
              row7.StandardPrice = row21.StandardPrice;
              row7.PriceLimit = row21.PriceLimit;
              row7.flag = row21.flag;
              row7.whyError = row21.whyError;
              row7.VALUE = row21.VALUE;
              row7.MATCHING = row21.MATCHING;
              nb_line_reject_tFilterRow_4++;
            }
            nb_line_tFilterRow_4++;

            /**
             * [tFilterRow_4 main ] stop
             */
            // Start of branch "row14"
            if (row14 != null) {

              /**
               * [tJavaRow_15 main ] start
               */

              currentComponent = "tJavaRow_15";

              row15.Organization = row14.Organization;
              row15.PriceListName = row14.PriceListName;
              row15.IsDefault = row14.IsDefault;
              row15.IsTaxIncluded = row14.IsTaxIncluded;
              row15.IsSales = row14.IsSales;
              row15.Currency = row14.Currency;
              row15.EnforcePriceLimit = row14.EnforcePriceLimit;
              row15.PriceListVersionName = row14.PriceListVersionName;
              row15.DiscountSchema = row14.DiscountSchema;
              row15.ValidFromDate = row14.ValidFromDate;
              row15.BasePriceListVersion = row14.BasePriceListVersion;

              row15.ProductName = row14.ProductName;
              Product product = service.findDALInstance(false, Product.class, new Value(
                  "searchKey", row14.ProductName));
              row15.flag = (product == null) ? "-1" : "0";

              row15.ListPrice = row14.ListPrice;
              row15.StandardPrice = row14.StandardPrice;
              row15.PriceLimit = row14.PriceLimit;

              nb_line_tJavaRow_15++;

              /**
               * [tJavaRow_15 main ] stop
               */

              /**
               * [tFilterRow_5 main ] start
               */

              currentComponent = "tFilterRow_5";

              row16 = null;
              row8 = null;

              if (

              (row15.flag == null ? false : row15.flag.toLowerCase().compareTo("0") == 0)

              )

              {
                if (row16 == null) {
                  row16 = new row16Struct();
                }
                row16.Organization = row15.Organization;
                row16.PriceListName = row15.PriceListName;
                row16.IsDefault = row15.IsDefault;
                row16.IsTaxIncluded = row15.IsTaxIncluded;
                row16.IsSales = row15.IsSales;
                row16.Currency = row15.Currency;
                row16.EnforcePriceLimit = row15.EnforcePriceLimit;
                row16.PriceListVersionName = row15.PriceListVersionName;
                row16.DiscountSchema = row15.DiscountSchema;
                row16.ValidFromDate = row15.ValidFromDate;
                row16.BasePriceListVersion = row15.BasePriceListVersion;
                row16.ProductName = row15.ProductName;
                row16.ListPrice = row15.ListPrice;
                row16.StandardPrice = row15.StandardPrice;
                row16.PriceLimit = row15.PriceLimit;
                row16.flag = row15.flag;
                row16.whyError = row15.whyError;
                row16.VALUE = row15.VALUE;
                row16.MATCHING = row15.MATCHING;
                nb_line_ok_tFilterRow_5++;
              } else {
                if (row8 == null) {
                  row8 = new row8Struct();
                }
                row8.Organization = row15.Organization;
                row8.PriceListName = row15.PriceListName;
                row8.IsDefault = row15.IsDefault;
                row8.IsTaxIncluded = row15.IsTaxIncluded;
                row8.IsSales = row15.IsSales;
                row8.Currency = row15.Currency;
                row8.EnforcePriceLimit = row15.EnforcePriceLimit;
                row8.PriceListVersionName = row15.PriceListVersionName;
                row8.DiscountSchema = row15.DiscountSchema;
                row8.ValidFromDate = row15.ValidFromDate;
                row8.BasePriceListVersion = row15.BasePriceListVersion;
                row8.ProductName = row15.ProductName;
                row8.ListPrice = row15.ListPrice;
                row8.StandardPrice = row15.StandardPrice;
                row8.PriceLimit = row15.PriceLimit;
                row8.flag = row15.flag;
                row8.whyError = row15.whyError;
                row8.VALUE = row15.VALUE;
                row8.MATCHING = row15.MATCHING;
                nb_line_reject_tFilterRow_5++;
              }
              nb_line_tFilterRow_5++;

              /**
               * [tFilterRow_5 main ] stop
               */
              // Start of branch "row16"
              if (row16 != null) {

                /**
                 * [tJavaRow_16 main ] start
                 */

                currentComponent = "tJavaRow_16";

                // Code generate according to input schema and
                // output schema
                row24.Organization = row16.Organization;
                row24.PriceListName = row16.PriceListName;
                row24.IsDefault = row16.IsDefault;
                row24.IsTaxIncluded = row16.IsTaxIncluded;
                row24.IsSales = row16.IsSales;
                row24.Currency = row16.Currency;
                row24.EnforcePriceLimit = row16.EnforcePriceLimit;
                row24.PriceListVersionName = row16.PriceListVersionName;

                row24.DiscountSchema = row16.DiscountSchema;
                PriceListSchema priceListSchema = service.findDALInstance(false,
                    PriceListSchema.class, new Value("name", row16.DiscountSchema));
                row24.flag = (priceListSchema == null) ? "-1" : "0";

                row24.ValidFromDate = row16.ValidFromDate;
                row24.BasePriceListVersion = row16.BasePriceListVersion;
                row24.ProductName = row16.ProductName;
                row24.ListPrice = row16.ListPrice;
                row24.StandardPrice = row16.StandardPrice;
                row24.PriceLimit = row16.PriceLimit;

                nb_line_tJavaRow_16++;

                /**
                 * [tJavaRow_16 main ] stop
                 */

                /**
                 * [tFilterRow_10 main ] start
                 */

                currentComponent = "tFilterRow_10";

                row22 = null;
                row19 = null;

                if (

                (row24.flag == null ? false : row24.flag.toLowerCase().compareTo("0") == 0)

                )

                {
                  if (row22 == null) {
                    row22 = new row22Struct();
                  }
                  row22.Organization = row24.Organization;
                  row22.PriceListName = row24.PriceListName;
                  row22.IsDefault = row24.IsDefault;
                  row22.IsTaxIncluded = row24.IsTaxIncluded;
                  row22.IsSales = row24.IsSales;
                  row22.Currency = row24.Currency;
                  row22.EnforcePriceLimit = row24.EnforcePriceLimit;
                  row22.PriceListVersionName = row24.PriceListVersionName;
                  row22.DiscountSchema = row24.DiscountSchema;
                  row22.ValidFromDate = row24.ValidFromDate;
                  row22.BasePriceListVersion = row24.BasePriceListVersion;
                  row22.ProductName = row24.ProductName;
                  row22.ListPrice = row24.ListPrice;
                  row22.StandardPrice = row24.StandardPrice;
                  row22.PriceLimit = row24.PriceLimit;
                  row22.flag = row24.flag;
                  row22.whyError = row24.whyError;
                  row22.VALUE = row24.VALUE;
                  row22.MATCHING = row24.MATCHING;
                  nb_line_ok_tFilterRow_10++;
                } else {
                  if (row19 == null) {
                    row19 = new row19Struct();
                  }
                  row19.Organization = row24.Organization;
                  row19.PriceListName = row24.PriceListName;
                  row19.IsDefault = row24.IsDefault;
                  row19.IsTaxIncluded = row24.IsTaxIncluded;
                  row19.IsSales = row24.IsSales;
                  row19.Currency = row24.Currency;
                  row19.EnforcePriceLimit = row24.EnforcePriceLimit;
                  row19.PriceListVersionName = row24.PriceListVersionName;
                  row19.DiscountSchema = row24.DiscountSchema;
                  row19.ValidFromDate = row24.ValidFromDate;
                  row19.BasePriceListVersion = row24.BasePriceListVersion;
                  row19.ProductName = row24.ProductName;
                  row19.ListPrice = row24.ListPrice;
                  row19.StandardPrice = row24.StandardPrice;
                  row19.PriceLimit = row24.PriceLimit;
                  row19.flag = row24.flag;
                  row19.whyError = row24.whyError;
                  row19.VALUE = row24.VALUE;
                  row19.MATCHING = row24.MATCHING;
                  nb_line_reject_tFilterRow_10++;
                }
                nb_line_tFilterRow_10++;

                /**
                 * [tFilterRow_10 main ] stop
                 */
                // Start of branch "row22"
                if (row22 != null) {

                  /**
                   * [tJavaRow_8 main ] start
                   */

                  currentComponent = "tJavaRow_8";

                  service.finishRecordProcess(row22.Organization, row22.PriceListName,
                      row22.IsDefault, row22.IsTaxIncluded, row22.IsSales, row22.Currency,
                      row22.EnforcePriceLimit, row22.PriceListVersionName, row22.DiscountSchema,
                      row22.ValidFromDate, row22.BasePriceListVersion, row22.ProductName,
                      row22.ListPrice, row22.StandardPrice, row22.PriceLimit);
                  nb_line_tJavaRow_8++;

                  /**
                   * [tJavaRow_8 main ] stop
                   */

                } // End of branch "row22"

                // Start of branch "row19"
                if (row19 != null) {

                  /**
                   * [tJavaRow_12 main ] start
                   */

                  currentComponent = "tJavaRow_12";

                  service.logRecordError(service.Utility_messageBD("IDL_BAD_REFERENCE")
                      + row19.DiscountSchema, row19.Organization, row19.PriceListName,
                      row19.IsDefault, row19.IsTaxIncluded, row19.IsSales, row19.Currency,
                      row19.EnforcePriceLimit, row19.PriceListVersionName, row19.DiscountSchema,
                      row19.ValidFromDate, row19.BasePriceListVersion, row19.ProductName,
                      row19.ListPrice, row19.StandardPrice, row19.PriceLimit);

                  nb_line_tJavaRow_12++;

                  /**
                   * [tJavaRow_12 main ] stop
                   */

                } // End of branch "row19"

              } // End of branch "row16"

              // Start of branch "row8"
              if (row8 != null) {

                /**
                 * [tJavaRow_7 main ] start
                 */

                currentComponent = "tJavaRow_7";

                service.logRecordError(service.Utility_messageBD("IDL_BAD_REFERENCE")
                    + row8.ProductName, row8.Organization, row8.PriceListName, row8.IsDefault,
                    row8.IsTaxIncluded, row8.IsSales, row8.Currency, row8.EnforcePriceLimit,
                    row8.PriceListVersionName, row8.DiscountSchema, row8.ValidFromDate,
                    row8.BasePriceListVersion, row8.ProductName, row8.ListPrice,
                    row8.StandardPrice, row8.PriceLimit);

                nb_line_tJavaRow_7++;

                /**
                 * [tJavaRow_7 main ] stop
                 */

              } // End of branch "row8"

            } // End of branch "row14"

            // Start of branch "row7"
            if (row7 != null) {

              /**
               * [tJavaRow_6 main ] start
               */

              currentComponent = "tJavaRow_6";

              service.logRecordError(
                  service.Utility_messageBD("IDL_BAD_REFERENCE") + row7.Currency,
                  row7.Organization, row7.PriceListName, row7.IsDefault, row7.IsTaxIncluded,
                  row7.IsSales, row7.Currency, row7.EnforcePriceLimit, row7.PriceListVersionName,
                  row7.DiscountSchema, row7.ValidFromDate, row7.BasePriceListVersion,
                  row7.ProductName, row7.ListPrice, row7.StandardPrice, row7.PriceLimit);

              nb_line_tJavaRow_6++;

              /**
               * [tJavaRow_6 main ] stop
               */

            } // End of branch "row7"

          } // End of branch "row2"

          // Start of branch "row10"
          if (row10 != null) {

            /**
             * [tJavaRow_14 main ] start
             */

            currentComponent = "tJavaRow_14";

            service.logRecordError(row10.whyError, row10.Organization, row10.PriceListName,
                row10.IsDefault, row10.IsTaxIncluded, row10.IsSales, row10.Currency,
                row10.EnforcePriceLimit, row10.PriceListVersionName, row10.DiscountSchema,
                row10.ValidFromDate, row10.BasePriceListVersion, row10.ProductName,
                row10.ListPrice, row10.StandardPrice, row10.PriceLimit);

            nb_line_tJavaRow_14++;

            /**
             * [tJavaRow_14 main ] stop
             */

          } // End of branch "row10"

        } // End of branch "row1"

        /**
         * [tFileInputDelimited_1 end ] start
         */

        currentComponent = "tFileInputDelimited_1";

        nb_line_tFileInputDelimited_1++;
      }
      csvReadertFileInputDelimited_1.close();
      globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);

      ok_Hash.put("tFileInputDelimited_1", true);
      end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

      /**
       * [tFileInputDelimited_1 end ] stop
       */

      /**
       * [tJavaRow_10 end ] start
       */

      currentComponent = "tJavaRow_10";

      globalMap.put("tJavaRow_10_NB_LINE", nb_line_tJavaRow_10);

      ok_Hash.put("tJavaRow_10", true);
      end_Hash.put("tJavaRow_10", System.currentTimeMillis());

      /**
       * [tJavaRow_10 end ] stop
       */

      /**
       * [tFilterRow_6 end ] start
       */

      currentComponent = "tFilterRow_6";

      globalMap.put("tFilterRow_6_NB_LINE", nb_line_tFilterRow_6);
      globalMap.put("tFilterRow_6_NB_LINE_OK", nb_line_ok_tFilterRow_6);
      globalMap.put("tFilterRow_6_NB_LINE_REJECT", nb_line_reject_tFilterRow_6);

      ok_Hash.put("tFilterRow_6", true);
      end_Hash.put("tFilterRow_6", System.currentTimeMillis());

      /**
       * [tFilterRow_6 end ] stop
       */

      /**
       * [tFuzzyMatch_2 end ] start
       */

      currentComponent = "tFuzzyMatch_2";

      globalMap.put("tFuzzyMatch_2_NB_LINE", nb_line_tFuzzyMatch_2);

      ok_Hash.put("tFuzzyMatch_2", true);
      end_Hash.put("tFuzzyMatch_2", System.currentTimeMillis());

      /**
       * [tFuzzyMatch_2 end ] stop
       */

      /**
       * [tFilterRow_4 end ] start
       */

      currentComponent = "tFilterRow_4";

      globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
      globalMap.put("tFilterRow_4_NB_LINE_OK", nb_line_ok_tFilterRow_4);
      globalMap.put("tFilterRow_4_NB_LINE_REJECT", nb_line_reject_tFilterRow_4);

      ok_Hash.put("tFilterRow_4", true);
      end_Hash.put("tFilterRow_4", System.currentTimeMillis());

      /**
       * [tFilterRow_4 end ] stop
       */

      /**
       * [tJavaRow_15 end ] start
       */

      currentComponent = "tJavaRow_15";

      globalMap.put("tJavaRow_15_NB_LINE", nb_line_tJavaRow_15);

      ok_Hash.put("tJavaRow_15", true);
      end_Hash.put("tJavaRow_15", System.currentTimeMillis());

      /**
       * [tJavaRow_15 end ] stop
       */

      /**
       * [tFilterRow_5 end ] start
       */

      currentComponent = "tFilterRow_5";

      globalMap.put("tFilterRow_5_NB_LINE", nb_line_tFilterRow_5);
      globalMap.put("tFilterRow_5_NB_LINE_OK", nb_line_ok_tFilterRow_5);
      globalMap.put("tFilterRow_5_NB_LINE_REJECT", nb_line_reject_tFilterRow_5);

      ok_Hash.put("tFilterRow_5", true);
      end_Hash.put("tFilterRow_5", System.currentTimeMillis());

      /**
       * [tFilterRow_5 end ] stop
       */

      /**
       * [tJavaRow_16 end ] start
       */

      currentComponent = "tJavaRow_16";

      globalMap.put("tJavaRow_16_NB_LINE", nb_line_tJavaRow_16);

      ok_Hash.put("tJavaRow_16", true);
      end_Hash.put("tJavaRow_16", System.currentTimeMillis());

      /**
       * [tJavaRow_16 end ] stop
       */

      /**
       * [tFilterRow_10 end ] start
       */

      currentComponent = "tFilterRow_10";

      globalMap.put("tFilterRow_10_NB_LINE", nb_line_tFilterRow_10);
      globalMap.put("tFilterRow_10_NB_LINE_OK", nb_line_ok_tFilterRow_10);
      globalMap.put("tFilterRow_10_NB_LINE_REJECT", nb_line_reject_tFilterRow_10);

      ok_Hash.put("tFilterRow_10", true);
      end_Hash.put("tFilterRow_10", System.currentTimeMillis());

      /**
       * [tFilterRow_10 end ] stop
       */

      /**
       * [tJavaRow_8 end ] start
       */

      currentComponent = "tJavaRow_8";

      globalMap.put("tJavaRow_8_NB_LINE", nb_line_tJavaRow_8);

      ok_Hash.put("tJavaRow_8", true);
      end_Hash.put("tJavaRow_8", System.currentTimeMillis());

      /**
       * [tJavaRow_8 end ] stop
       */

      /**
       * [tJavaRow_12 end ] start
       */

      currentComponent = "tJavaRow_12";

      globalMap.put("tJavaRow_12_NB_LINE", nb_line_tJavaRow_12);

      ok_Hash.put("tJavaRow_12", true);
      end_Hash.put("tJavaRow_12", System.currentTimeMillis());

      /**
       * [tJavaRow_12 end ] stop
       */

      /**
       * [tJavaRow_7 end ] start
       */

      currentComponent = "tJavaRow_7";

      globalMap.put("tJavaRow_7_NB_LINE", nb_line_tJavaRow_7);

      ok_Hash.put("tJavaRow_7", true);
      end_Hash.put("tJavaRow_7", System.currentTimeMillis());

      /**
       * [tJavaRow_7 end ] stop
       */

      /**
       * [tJavaRow_6 end ] start
       */

      currentComponent = "tJavaRow_6";

      globalMap.put("tJavaRow_6_NB_LINE", nb_line_tJavaRow_6);

      ok_Hash.put("tJavaRow_6", true);
      end_Hash.put("tJavaRow_6", System.currentTimeMillis());

      /**
       * [tJavaRow_6 end ] stop
       */

      /**
       * [tJavaRow_14 end ] start
       */

      currentComponent = "tJavaRow_14";

      globalMap.put("tJavaRow_14_NB_LINE", nb_line_tJavaRow_14);

      ok_Hash.put("tJavaRow_14", true);
      end_Hash.put("tJavaRow_14", System.currentTimeMillis());

      /**
       * [tJavaRow_14 end ] stop
       */

    } catch (Exception e) {

      throw new TalendException(e, currentComponent, globalMap);

    }

    finally {
      // free memory for "tFuzzyMatch_2"
      globalMap.put("tHash_row20", null);

    }

    globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
  }

  static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String currencyId;
    String ISOcode;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.currencyId == null) ? 0 : this.currencyId.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row20Struct other = (row20Struct) obj;

      if (this.currencyId == null) {
        if (other.currencyId != null)
          return false;
      } else if (!this.currencyId.equals(other.currencyId))
        return false;

      return true;
    }

    public void copyDataTo(row20Struct other) {

      other.currencyId = this.currencyId;
      other.ISOcode = this.ISOcode;

    }

    public void copyKeysDataTo(row20Struct other) {

      other.currencyId = this.currencyId;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.currencyId = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.currencyId = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ISOcode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ISOcode = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.currencyId == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.currencyId.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ISOcode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ISOcode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("currencyId");
      sb.append("=");
      sb.append(String.valueOf(this.currencyId));

      sb.append(", ");

      sb.append("ISOcode");
      sb.append("=");
      sb.append(String.valueOf(this.ISOcode));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.currencyId, other.currencyId);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  public void tJavaFlex_1Process(final java.util.Map<String, Object> globalMap)
      throws TalendException {
    globalMap.put("tJavaFlex_1_SUBPROCESS_STATE", 0);

    String currentComponent = "";

    try {

      row20Struct row20 = new row20Struct();

      /**
       * [tHash_row20 begin ] start
       */

      ok_Hash.put("tHash_row20", false);
      start_Hash.put("tHash_row20", System.currentTimeMillis());
      currentComponent = "tHash_row20";

      java.util.Map<row20Struct, row20Struct> tHash_row20 = new java.util.LinkedHashMap<row20Struct, row20Struct>();
      globalMap.put("tHash_row20", tHash_row20);

      /**
       * [tHash_row20 begin ] stop
       */

      /**
       * [tJavaFlex_1 begin ] start
       */

      ok_Hash.put("tJavaFlex_1", false);
      start_Hash.put("tJavaFlex_1", System.currentTimeMillis());
      currentComponent = "tJavaFlex_1";

      final OBCriteria<Currency> obCriteria = OBDal.getInstance().createCriteria(Currency.class);
      List<Currency> currencies = obCriteria.list();
      for (Currency c : currencies) {

        /**
         * [tJavaFlex_1 begin ] stop
         */
        /**
         * [tJavaFlex_1 main ] start
         */

        currentComponent = "tJavaFlex_1";

        row20.currencyId = c.getId();
        row20.ISOcode = c.getISOCode();

        /**
         * [tJavaFlex_1 main ] stop
         */

        /**
         * [tHash_row20 main ] start
         */

        currentComponent = "tHash_row20";

        row20Struct row20_HashRow = new row20Struct();

        row20_HashRow.currencyId = row20.currencyId;
        row20_HashRow.ISOcode = row20.ISOcode;
        tHash_row20.put(row20_HashRow, row20_HashRow);

        /**
         * [tHash_row20 main ] stop
         */

        /**
         * [tJavaFlex_1 end ] start
         */

        currentComponent = "tJavaFlex_1";

      }

      ok_Hash.put("tJavaFlex_1", true);
      end_Hash.put("tJavaFlex_1", System.currentTimeMillis());

      /**
       * [tJavaFlex_1 end ] stop
       */

      /**
       * [tHash_row20 end ] start
       */

      currentComponent = "tHash_row20";

      ok_Hash.put("tHash_row20", true);
      end_Hash.put("tHash_row20", System.currentTimeMillis());

      /**
       * [tHash_row20 end ] stop
       */

    } catch (Exception e) {

      throw new TalendException(e, currentComponent, globalMap);

    }

    globalMap.put("tJavaFlex_1_SUBPROCESS_STATE", 1);
  }

  public boolean watch = false;
  public int portStats = 3334;
  public int portTraces = 4334;
  public String clientHost;
  public String defaultClientHost = "localhost";
  public String contextStr = "Default";
  public String pid = "0";
  public String rootPid = null;
  public String fatherPid = null;
  public long startTime = 0;
  public boolean isChildJob = false;

  private ThreadLocal threadLocal = new ThreadLocal();
  {
    java.util.Map threadRunResultMap = new java.util.HashMap();
    threadRunResultMap.put("errorCode", null);
    threadRunResultMap.put("status", "");
    threadLocal.set(threadRunResultMap);
  }

  private java.util.Properties context_param = new java.util.Properties();

  public String status = "";

  public static void main(String[] args) {
    final PriceListJob PriceListJobClass = new PriceListJob();

    int exitCode = PriceListJobClass.runJobInTOS(args);

    System.exit(exitCode);
  }

  public String[][] runJob(String[] args) {

    int exitCode = runJobInTOS(args);
    String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

    return bufferValue;
  }

  public int runJobInTOS(String[] args) {

    String lastStr = "";
    for (String arg : args) {
      if (arg.equalsIgnoreCase("--context_param")) {
        lastStr = arg;
      } else if (lastStr.equals("")) {
        evalParam(arg);
      } else {
        evalParam(lastStr + " " + arg);
        lastStr = "";
      }
    }

    if (clientHost == null) {
      clientHost = defaultClientHost;
    }

    if (pid == null || "0".equals(pid)) {
      pid = TalendString.getAsciiRandomString(6);
    }

    if (rootPid == null) {
      rootPid = pid;
    }
    if (fatherPid == null) {
      fatherPid = pid;
    } else {
      isChildJob = true;
    }

    try {
      java.io.InputStream inContext = PriceListJob.class.getClassLoader().getResourceAsStream(
          "initial_data_load/pricelistjob_0_1/contexts/Default.properties");
      if (inContext != null) {
        defaultProps.load(inContext);
        inContext.close();
        context = new ContextProperties(defaultProps);
      }

      if (contextStr.compareTo("Default") != 0) {
        inContext = PriceListJob.class.getClassLoader().getResourceAsStream(
            "initial_data_load/pricelistjob_0_1/contexts/" + contextStr + ".properties");
        if (inContext != null) {
          context.load(inContext);
          inContext.close();
        }
      }

      if (!context_param.isEmpty()) {
        context.putAll(context_param);
      }

      try {
        context.executeInsert = Boolean.parseBoolean(context.getProperty("executeInsert"));
      } catch (NumberFormatException e) {
        context.executeInsert = null;
      }

      context.filename = (String) context.getProperty("filename");

      try {
        context.numLinesOk = Integer.parseInt(context.getProperty("numLinesOk"));
      } catch (NumberFormatException e) {
        context.numLinesOk = null;
      }

      try {
        context.numLinesRejected = Integer.parseInt(context.getProperty("numLinesRejected"));
      } catch (NumberFormatException e) {
        context.numLinesRejected = null;
      }

      context.validationFailCause = (String) context.getProperty("validationFailCause");

    } catch (java.io.IOException ie) {
      System.err.println("Could not load context " + contextStr);
      ie.printStackTrace();
    }

    long end = 0;

    startTime = System.currentTimeMillis();

    try {
      errorCode = null;
      tFileInputDelimited_1Process(globalMap);
      status = "end";
    } catch (TalendException e_tFileInputDelimited_1) {
      status = "failure";
      e_tFileInputDelimited_1.printStackTrace();
      globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

    } finally {
    }

    end = System.currentTimeMillis();

    if (watch) {
      System.out.println((end - startTime) + " milliseconds");
    }

    if (errorCode == null) {
      return status != null && status.equals("failure") ? 1 : 0;
    } else {
      return errorCode.intValue();
    }
  }

  private void evalParam(String arg) {
    if (arg.startsWith("--watch")) {
      watch = true;
    } else if (arg.startsWith("--stat_port=")) {
      portStats = Integer.parseInt(arg.substring(12));
    } else if (arg.startsWith("--trace_port=")) {
      portTraces = Integer.parseInt(arg.substring(13));
    } else if (arg.startsWith("--client_host=")) {
      clientHost = arg.substring(14);
    } else if (arg.startsWith("--context=")) {
      contextStr = arg.substring(10);
    } else if (arg.startsWith("--father_pid=")) {
      fatherPid = arg.substring(13);
    } else if (arg.startsWith("--root_pid=")) {
      rootPid = arg.substring(11);
    } else if (arg.startsWith("--pid=")) {
      pid = arg.substring(6);
    } else if (arg.startsWith("--context_param")) {
      String keyValue = arg.substring(16);
      int index = -1;
      if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
        context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
      }
    }

  }

  public Integer getErrorCode() {
    return errorCode;
  }

  public String getStatus() {
    return status;
  }
}
/************************************************************************************************
 * 389042 characters generated by Talend Open Studio on the 17 de noviembre de 2009 13:29:58 CET
 ************************************************************************************************/
