// ============================================================================
//
// Copyright (c) 2005-2016, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 3.1.4.r29781).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package org.openbravo.idl.initial_data_load.productjob_0_1;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.openbravo.idl.proc.Value;
import org.openbravo.model.common.plm.AttributeSet;
import org.openbravo.model.common.plm.AttributeValue;

import routines.TalendString;
import routines.system.TDieException;

/**
 * Job: ProductJob Purpose: <br>
 * Description: <br>
 * 
 * @author
 * @version 3.1.4.r29781
 * @status
 */
@SuppressWarnings({ "rawtypes", "unchecked", "hiding" })
public class ProductJob {

  public final Object obj = new Object();
  // create and load default properties
  private java.util.Properties defaultProps = new java.util.Properties();

  // create application properties with default
  private class ContextProperties extends java.util.Properties {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;

    public ContextProperties(java.util.Properties properties) {
      super(properties);
    }

    public ContextProperties() {
      super();
    }

    @SuppressWarnings("unused")
    public void synchronizeContext() {

      if (executeInsert != null) {

        this.setProperty("executeInsert", executeInsert.toString());

      }

      if (filename != null) {

        this.setProperty("filename", filename.toString());

      }

      if (numLinesOk != null) {

        this.setProperty("numLinesOk", numLinesOk.toString());

      }

      if (numLinesRejected != null) {

        this.setProperty("numLinesRejected", numLinesRejected.toString());

      }

      if (validationFailCause != null) {

        this.setProperty("validationFailCause", validationFailCause.toString());

      }

    }

    public Boolean executeInsert;
    public String filename;
    public Integer numLinesOk;
    public Integer numLinesRejected;
    public String validationFailCause;
  }

  private ContextProperties context = new ContextProperties();
  public Integer errorCode = null;
  private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
  private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
  public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

  private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
  private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
      new java.io.BufferedOutputStream(baos));

  public String getExceptionStackTrace() {
    errorMessagePS.flush();
    return baos.toString();
  }

  @SuppressWarnings("serial")
  private class TalendException extends Exception {
    private java.util.Map<String, Object> globalMap = null;
    private Exception e = null;
    private String currentComponent = null;

    private TalendException(Exception e, String errorComponent,
        final java.util.Map<String, Object> globalMap) {
      this.currentComponent = errorComponent;
      this.globalMap = globalMap;
      this.e = e;
    }

    @Override
    public void printStackTrace() {
      if (!(e instanceof TalendException || e instanceof TDieException)) {
        globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
        System.err.println("Exception in component " + currentComponent);
      }
      if (!(e instanceof TDieException)) {
        if (e instanceof TalendException) {
          e.printStackTrace();
        } else {
          e.printStackTrace();
          e.printStackTrace(errorMessagePS);
        }
      }
      if (!(e instanceof TalendException)) {
        try {
          for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
            if (m.getName().compareTo(currentComponent + "_error") == 0) {
              m.invoke(ProductJob.this, new Object[] { e, globalMap });
              break;
            }
          }

          if (!(e instanceof TDieException)) {
          }
        } catch (java.lang.SecurityException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalArgumentException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalAccessException e) {
          this.e.printStackTrace();
        } catch (java.lang.reflect.InvocationTargetException e) {
          this.e.printStackTrace();
        }
      }
    }
  }

  public void tFileInputDelimited_1_error(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
    end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_8_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_8", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_6_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_6", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_18_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_18", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_11_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_11", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_16_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_16", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_14_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_14", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_10_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_10", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFileInputDelimited_1_onSubJobError(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
  }

  static class row60Struct implements routines.system.IPersistableRow<row60Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String SearchKey;
    String Name;
    String Description;
    String UPC_EAN;
    String ProductCategory;
    String UOM;
    String ProductType;
    String Production;
    String BillOfMaterial;
    String Discontinued;
    String CostType;
    String AttributeSet;
    String AttributeSetValue;
    String Stocked;
    String Purchase;
    String Sale;
    String TaxCategory;
    String StandardCost;
    String Price_Sales;
    String Price_Purchase;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.SearchKey == null) ? 0 : this.SearchKey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row60Struct other = (row60Struct) obj;

      if (this.SearchKey == null) {
        if (other.SearchKey != null)
          return false;
      } else if (!this.SearchKey.equals(other.SearchKey))
        return false;

      return true;
    }

    public void copyDataTo(row60Struct other) {

      other.Organization = this.Organization;
      other.SearchKey = this.SearchKey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.UPC_EAN = this.UPC_EAN;
      other.ProductCategory = this.ProductCategory;
      other.UOM = this.UOM;
      other.ProductType = this.ProductType;
      other.Production = this.Production;
      other.BillOfMaterial = this.BillOfMaterial;
      other.Discontinued = this.Discontinued;
      other.CostType = this.CostType;
      other.AttributeSet = this.AttributeSet;
      other.AttributeSetValue = this.AttributeSetValue;
      other.Stocked = this.Stocked;
      other.Purchase = this.Purchase;
      other.Sale = this.Sale;
      other.TaxCategory = this.TaxCategory;
      other.StandardCost = this.StandardCost;
      other.Price_Sales = this.Price_Sales;
      other.Price_Purchase = this.Price_Purchase;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row60Struct other) {

      other.SearchKey = this.SearchKey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SearchKey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SearchKey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UPC_EAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UPC_EAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UOM = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UOM = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Production = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Production = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BillOfMaterial = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BillOfMaterial = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Discontinued = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Discontinued = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CostType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CostType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeSet = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeSet = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeSetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeSetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Stocked = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Stocked = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Purchase = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Purchase = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Sale = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Sale = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price_Sales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price_Sales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price_Purchase = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price_Purchase = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SearchKey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SearchKey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UPC_EAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UPC_EAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UOM == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UOM.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Production == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Production.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BillOfMaterial == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BillOfMaterial.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Discontinued == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Discontinued.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CostType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CostType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeSet == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeSet.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeSetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeSetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Stocked == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Stocked.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Purchase == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Purchase.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Sale == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Sale.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price_Sales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price_Sales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price_Purchase == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price_Purchase.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("SearchKey");
      sb.append("=");
      sb.append(String.valueOf(this.SearchKey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("UPC_EAN");
      sb.append("=");
      sb.append(String.valueOf(this.UPC_EAN));

      sb.append(", ");

      sb.append("ProductCategory");
      sb.append("=");
      sb.append(String.valueOf(this.ProductCategory));

      sb.append(", ");

      sb.append("UOM");
      sb.append("=");
      sb.append(String.valueOf(this.UOM));

      sb.append(", ");

      sb.append("ProductType");
      sb.append("=");
      sb.append(String.valueOf(this.ProductType));

      sb.append(", ");

      sb.append("Production");
      sb.append("=");
      sb.append(String.valueOf(this.Production));

      sb.append(", ");

      sb.append("BillOfMaterial");
      sb.append("=");
      sb.append(String.valueOf(this.BillOfMaterial));

      sb.append(", ");

      sb.append("Discontinued");
      sb.append("=");
      sb.append(String.valueOf(this.Discontinued));

      sb.append(", ");

      sb.append("CostType");
      sb.append("=");
      sb.append(String.valueOf(this.CostType));

      sb.append(", ");

      sb.append("AttributeSet");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeSet));

      sb.append(", ");

      sb.append("AttributeSetValue");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeSetValue));

      sb.append(", ");

      sb.append("Stocked");
      sb.append("=");
      sb.append(String.valueOf(this.Stocked));

      sb.append(", ");

      sb.append("Purchase");
      sb.append("=");
      sb.append(String.valueOf(this.Purchase));

      sb.append(", ");

      sb.append("Sale");
      sb.append("=");
      sb.append(String.valueOf(this.Sale));

      sb.append(", ");

      sb.append("TaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.TaxCategory));

      sb.append(", ");

      sb.append("StandardCost");
      sb.append("=");
      sb.append(String.valueOf(this.StandardCost));

      sb.append(", ");

      sb.append("Price_Sales");
      sb.append("=");
      sb.append(String.valueOf(this.Price_Sales));

      sb.append(", ");

      sb.append("Price_Purchase");
      sb.append("=");
      sb.append(String.valueOf(this.Price_Purchase));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row60Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.SearchKey, other.SearchKey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String SearchKey;
    String Name;
    String Description;
    String UPC_EAN;
    String ProductCategory;
    String UOM;
    String ProductType;
    String Production;
    String BillOfMaterial;
    String Discontinued;
    String CostType;
    String AttributeSet;
    String AttributeSetValue;
    String Stocked;
    String Purchase;
    String Sale;
    String TaxCategory;
    String StandardCost;
    String Price_Sales;
    String Price_Purchase;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.SearchKey == null) ? 0 : this.SearchKey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row21Struct other = (row21Struct) obj;

      if (this.SearchKey == null) {
        if (other.SearchKey != null)
          return false;
      } else if (!this.SearchKey.equals(other.SearchKey))
        return false;

      return true;
    }

    public void copyDataTo(row21Struct other) {

      other.Organization = this.Organization;
      other.SearchKey = this.SearchKey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.UPC_EAN = this.UPC_EAN;
      other.ProductCategory = this.ProductCategory;
      other.UOM = this.UOM;
      other.ProductType = this.ProductType;
      other.Production = this.Production;
      other.BillOfMaterial = this.BillOfMaterial;
      other.Discontinued = this.Discontinued;
      other.CostType = this.CostType;
      other.AttributeSet = this.AttributeSet;
      other.AttributeSetValue = this.AttributeSetValue;
      other.Stocked = this.Stocked;
      other.Purchase = this.Purchase;
      other.Sale = this.Sale;
      other.TaxCategory = this.TaxCategory;
      other.StandardCost = this.StandardCost;
      other.Price_Sales = this.Price_Sales;
      other.Price_Purchase = this.Price_Purchase;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row21Struct other) {

      other.SearchKey = this.SearchKey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SearchKey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SearchKey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UPC_EAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UPC_EAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UOM = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UOM = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Production = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Production = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BillOfMaterial = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BillOfMaterial = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Discontinued = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Discontinued = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CostType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CostType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeSet = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeSet = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeSetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeSetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Stocked = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Stocked = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Purchase = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Purchase = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Sale = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Sale = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price_Sales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price_Sales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price_Purchase = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price_Purchase = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SearchKey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SearchKey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UPC_EAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UPC_EAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UOM == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UOM.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Production == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Production.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BillOfMaterial == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BillOfMaterial.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Discontinued == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Discontinued.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CostType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CostType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeSet == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeSet.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeSetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeSetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Stocked == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Stocked.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Purchase == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Purchase.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Sale == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Sale.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price_Sales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price_Sales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price_Purchase == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price_Purchase.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("SearchKey");
      sb.append("=");
      sb.append(String.valueOf(this.SearchKey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("UPC_EAN");
      sb.append("=");
      sb.append(String.valueOf(this.UPC_EAN));

      sb.append(", ");

      sb.append("ProductCategory");
      sb.append("=");
      sb.append(String.valueOf(this.ProductCategory));

      sb.append(", ");

      sb.append("UOM");
      sb.append("=");
      sb.append(String.valueOf(this.UOM));

      sb.append(", ");

      sb.append("ProductType");
      sb.append("=");
      sb.append(String.valueOf(this.ProductType));

      sb.append(", ");

      sb.append("Production");
      sb.append("=");
      sb.append(String.valueOf(this.Production));

      sb.append(", ");

      sb.append("BillOfMaterial");
      sb.append("=");
      sb.append(String.valueOf(this.BillOfMaterial));

      sb.append(", ");

      sb.append("Discontinued");
      sb.append("=");
      sb.append(String.valueOf(this.Discontinued));

      sb.append(", ");

      sb.append("CostType");
      sb.append("=");
      sb.append(String.valueOf(this.CostType));

      sb.append(", ");

      sb.append("AttributeSet");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeSet));

      sb.append(", ");

      sb.append("AttributeSetValue");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeSetValue));

      sb.append(", ");

      sb.append("Stocked");
      sb.append("=");
      sb.append(String.valueOf(this.Stocked));

      sb.append(", ");

      sb.append("Purchase");
      sb.append("=");
      sb.append(String.valueOf(this.Purchase));

      sb.append(", ");

      sb.append("Sale");
      sb.append("=");
      sb.append(String.valueOf(this.Sale));

      sb.append(", ");

      sb.append("TaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.TaxCategory));

      sb.append(", ");

      sb.append("StandardCost");
      sb.append("=");
      sb.append(String.valueOf(this.StandardCost));

      sb.append(", ");

      sb.append("Price_Sales");
      sb.append("=");
      sb.append(String.valueOf(this.Price_Sales));

      sb.append(", ");

      sb.append("Price_Purchase");
      sb.append("=");
      sb.append(String.valueOf(this.Price_Purchase));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.SearchKey, other.SearchKey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String SearchKey;
    String Name;
    String Description;
    String UPC_EAN;
    String ProductCategory;
    String UOM;
    String ProductType;
    String Production;
    String BillOfMaterial;
    String Discontinued;
    String CostType;
    String AttributeSet;
    String AttributeSetValue;
    String Stocked;
    String Purchase;
    String Sale;
    String TaxCategory;
    String StandardCost;
    String Price_Sales;
    String Price_Purchase;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.SearchKey == null) ? 0 : this.SearchKey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row14Struct other = (row14Struct) obj;

      if (this.SearchKey == null) {
        if (other.SearchKey != null)
          return false;
      } else if (!this.SearchKey.equals(other.SearchKey))
        return false;

      return true;
    }

    public void copyDataTo(row14Struct other) {

      other.Organization = this.Organization;
      other.SearchKey = this.SearchKey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.UPC_EAN = this.UPC_EAN;
      other.ProductCategory = this.ProductCategory;
      other.UOM = this.UOM;
      other.ProductType = this.ProductType;
      other.Production = this.Production;
      other.BillOfMaterial = this.BillOfMaterial;
      other.Discontinued = this.Discontinued;
      other.CostType = this.CostType;
      other.AttributeSet = this.AttributeSet;
      other.AttributeSetValue = this.AttributeSetValue;
      other.Stocked = this.Stocked;
      other.Purchase = this.Purchase;
      other.Sale = this.Sale;
      other.TaxCategory = this.TaxCategory;
      other.StandardCost = this.StandardCost;
      other.Price_Sales = this.Price_Sales;
      other.Price_Purchase = this.Price_Purchase;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row14Struct other) {

      other.SearchKey = this.SearchKey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SearchKey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SearchKey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UPC_EAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UPC_EAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UOM = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UOM = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Production = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Production = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BillOfMaterial = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BillOfMaterial = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Discontinued = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Discontinued = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CostType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CostType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeSet = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeSet = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeSetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeSetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Stocked = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Stocked = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Purchase = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Purchase = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Sale = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Sale = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price_Sales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price_Sales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price_Purchase = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price_Purchase = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SearchKey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SearchKey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UPC_EAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UPC_EAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UOM == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UOM.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Production == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Production.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BillOfMaterial == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BillOfMaterial.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Discontinued == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Discontinued.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CostType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CostType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeSet == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeSet.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeSetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeSetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Stocked == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Stocked.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Purchase == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Purchase.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Sale == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Sale.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price_Sales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price_Sales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price_Purchase == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price_Purchase.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("SearchKey");
      sb.append("=");
      sb.append(String.valueOf(this.SearchKey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("UPC_EAN");
      sb.append("=");
      sb.append(String.valueOf(this.UPC_EAN));

      sb.append(", ");

      sb.append("ProductCategory");
      sb.append("=");
      sb.append(String.valueOf(this.ProductCategory));

      sb.append(", ");

      sb.append("UOM");
      sb.append("=");
      sb.append(String.valueOf(this.UOM));

      sb.append(", ");

      sb.append("ProductType");
      sb.append("=");
      sb.append(String.valueOf(this.ProductType));

      sb.append(", ");

      sb.append("Production");
      sb.append("=");
      sb.append(String.valueOf(this.Production));

      sb.append(", ");

      sb.append("BillOfMaterial");
      sb.append("=");
      sb.append(String.valueOf(this.BillOfMaterial));

      sb.append(", ");

      sb.append("Discontinued");
      sb.append("=");
      sb.append(String.valueOf(this.Discontinued));

      sb.append(", ");

      sb.append("CostType");
      sb.append("=");
      sb.append(String.valueOf(this.CostType));

      sb.append(", ");

      sb.append("AttributeSet");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeSet));

      sb.append(", ");

      sb.append("AttributeSetValue");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeSetValue));

      sb.append(", ");

      sb.append("Stocked");
      sb.append("=");
      sb.append(String.valueOf(this.Stocked));

      sb.append(", ");

      sb.append("Purchase");
      sb.append("=");
      sb.append(String.valueOf(this.Purchase));

      sb.append(", ");

      sb.append("Sale");
      sb.append("=");
      sb.append(String.valueOf(this.Sale));

      sb.append(", ");

      sb.append("TaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.TaxCategory));

      sb.append(", ");

      sb.append("StandardCost");
      sb.append("=");
      sb.append(String.valueOf(this.StandardCost));

      sb.append(", ");

      sb.append("Price_Sales");
      sb.append("=");
      sb.append(String.valueOf(this.Price_Sales));

      sb.append(", ");

      sb.append("Price_Purchase");
      sb.append("=");
      sb.append(String.valueOf(this.Price_Purchase));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.SearchKey, other.SearchKey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String SearchKey;
    String Name;
    String Description;
    String UPC_EAN;
    String ProductCategory;
    String UOM;
    String ProductType;
    String Production;
    String BillOfMaterial;
    String Discontinued;
    String CostType;
    String AttributeSet;
    String AttributeSetValue;
    String Stocked;
    String Purchase;
    String Sale;
    String TaxCategory;
    String StandardCost;
    String Price_Sales;
    String Price_Purchase;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.SearchKey == null) ? 0 : this.SearchKey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row2Struct other = (row2Struct) obj;

      if (this.SearchKey == null) {
        if (other.SearchKey != null)
          return false;
      } else if (!this.SearchKey.equals(other.SearchKey))
        return false;

      return true;
    }

    public void copyDataTo(row2Struct other) {

      other.Organization = this.Organization;
      other.SearchKey = this.SearchKey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.UPC_EAN = this.UPC_EAN;
      other.ProductCategory = this.ProductCategory;
      other.UOM = this.UOM;
      other.ProductType = this.ProductType;
      other.Production = this.Production;
      other.BillOfMaterial = this.BillOfMaterial;
      other.Discontinued = this.Discontinued;
      other.CostType = this.CostType;
      other.AttributeSet = this.AttributeSet;
      other.AttributeSetValue = this.AttributeSetValue;
      other.Stocked = this.Stocked;
      other.Purchase = this.Purchase;
      other.Sale = this.Sale;
      other.TaxCategory = this.TaxCategory;
      other.StandardCost = this.StandardCost;
      other.Price_Sales = this.Price_Sales;
      other.Price_Purchase = this.Price_Purchase;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row2Struct other) {

      other.SearchKey = this.SearchKey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SearchKey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SearchKey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UPC_EAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UPC_EAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UOM = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UOM = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Production = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Production = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BillOfMaterial = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BillOfMaterial = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Discontinued = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Discontinued = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CostType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CostType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeSet = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeSet = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeSetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeSetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Stocked = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Stocked = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Purchase = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Purchase = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Sale = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Sale = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price_Sales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price_Sales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price_Purchase = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price_Purchase = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SearchKey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SearchKey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UPC_EAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UPC_EAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UOM == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UOM.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Production == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Production.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BillOfMaterial == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BillOfMaterial.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Discontinued == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Discontinued.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CostType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CostType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeSet == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeSet.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeSetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeSetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Stocked == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Stocked.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Purchase == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Purchase.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Sale == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Sale.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price_Sales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price_Sales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price_Purchase == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price_Purchase.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("SearchKey");
      sb.append("=");
      sb.append(String.valueOf(this.SearchKey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("UPC_EAN");
      sb.append("=");
      sb.append(String.valueOf(this.UPC_EAN));

      sb.append(", ");

      sb.append("ProductCategory");
      sb.append("=");
      sb.append(String.valueOf(this.ProductCategory));

      sb.append(", ");

      sb.append("UOM");
      sb.append("=");
      sb.append(String.valueOf(this.UOM));

      sb.append(", ");

      sb.append("ProductType");
      sb.append("=");
      sb.append(String.valueOf(this.ProductType));

      sb.append(", ");

      sb.append("Production");
      sb.append("=");
      sb.append(String.valueOf(this.Production));

      sb.append(", ");

      sb.append("BillOfMaterial");
      sb.append("=");
      sb.append(String.valueOf(this.BillOfMaterial));

      sb.append(", ");

      sb.append("Discontinued");
      sb.append("=");
      sb.append(String.valueOf(this.Discontinued));

      sb.append(", ");

      sb.append("CostType");
      sb.append("=");
      sb.append(String.valueOf(this.CostType));

      sb.append(", ");

      sb.append("AttributeSet");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeSet));

      sb.append(", ");

      sb.append("AttributeSetValue");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeSetValue));

      sb.append(", ");

      sb.append("Stocked");
      sb.append("=");
      sb.append(String.valueOf(this.Stocked));

      sb.append(", ");

      sb.append("Purchase");
      sb.append("=");
      sb.append(String.valueOf(this.Purchase));

      sb.append(", ");

      sb.append("Sale");
      sb.append("=");
      sb.append(String.valueOf(this.Sale));

      sb.append(", ");

      sb.append("TaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.TaxCategory));

      sb.append(", ");

      sb.append("StandardCost");
      sb.append("=");
      sb.append(String.valueOf(this.StandardCost));

      sb.append(", ");

      sb.append("Price_Sales");
      sb.append("=");
      sb.append(String.valueOf(this.Price_Sales));

      sb.append(", ");

      sb.append("Price_Purchase");
      sb.append("=");
      sb.append(String.valueOf(this.Price_Purchase));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.SearchKey, other.SearchKey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String SearchKey;
    String Name;
    String Description;
    String UPC_EAN;
    String ProductCategory;
    String UOM;
    String ProductType;
    String Production;
    String BillOfMaterial;
    String Discontinued;
    String CostType;
    String AttributeSet;
    String AttributeSetValue;
    String Stocked;
    String Purchase;
    String Sale;
    String TaxCategory;
    String StandardCost;
    String Price_Sales;
    String Price_Purchase;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.SearchKey == null) ? 0 : this.SearchKey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row6Struct other = (row6Struct) obj;

      if (this.SearchKey == null) {
        if (other.SearchKey != null)
          return false;
      } else if (!this.SearchKey.equals(other.SearchKey))
        return false;

      return true;
    }

    public void copyDataTo(row6Struct other) {

      other.Organization = this.Organization;
      other.SearchKey = this.SearchKey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.UPC_EAN = this.UPC_EAN;
      other.ProductCategory = this.ProductCategory;
      other.UOM = this.UOM;
      other.ProductType = this.ProductType;
      other.Production = this.Production;
      other.BillOfMaterial = this.BillOfMaterial;
      other.Discontinued = this.Discontinued;
      other.CostType = this.CostType;
      other.AttributeSet = this.AttributeSet;
      other.AttributeSetValue = this.AttributeSetValue;
      other.Stocked = this.Stocked;
      other.Purchase = this.Purchase;
      other.Sale = this.Sale;
      other.TaxCategory = this.TaxCategory;
      other.StandardCost = this.StandardCost;
      other.Price_Sales = this.Price_Sales;
      other.Price_Purchase = this.Price_Purchase;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row6Struct other) {

      other.SearchKey = this.SearchKey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SearchKey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SearchKey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UPC_EAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UPC_EAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UOM = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UOM = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Production = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Production = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BillOfMaterial = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BillOfMaterial = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Discontinued = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Discontinued = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CostType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CostType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeSet = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeSet = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeSetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeSetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Stocked = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Stocked = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Purchase = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Purchase = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Sale = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Sale = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price_Sales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price_Sales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price_Purchase = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price_Purchase = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SearchKey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SearchKey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UPC_EAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UPC_EAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UOM == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UOM.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Production == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Production.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BillOfMaterial == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BillOfMaterial.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Discontinued == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Discontinued.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CostType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CostType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeSet == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeSet.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeSetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeSetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Stocked == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Stocked.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Purchase == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Purchase.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Sale == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Sale.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price_Sales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price_Sales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price_Purchase == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price_Purchase.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("SearchKey");
      sb.append("=");
      sb.append(String.valueOf(this.SearchKey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("UPC_EAN");
      sb.append("=");
      sb.append(String.valueOf(this.UPC_EAN));

      sb.append(", ");

      sb.append("ProductCategory");
      sb.append("=");
      sb.append(String.valueOf(this.ProductCategory));

      sb.append(", ");

      sb.append("UOM");
      sb.append("=");
      sb.append(String.valueOf(this.UOM));

      sb.append(", ");

      sb.append("ProductType");
      sb.append("=");
      sb.append(String.valueOf(this.ProductType));

      sb.append(", ");

      sb.append("Production");
      sb.append("=");
      sb.append(String.valueOf(this.Production));

      sb.append(", ");

      sb.append("BillOfMaterial");
      sb.append("=");
      sb.append(String.valueOf(this.BillOfMaterial));

      sb.append(", ");

      sb.append("Discontinued");
      sb.append("=");
      sb.append(String.valueOf(this.Discontinued));

      sb.append(", ");

      sb.append("CostType");
      sb.append("=");
      sb.append(String.valueOf(this.CostType));

      sb.append(", ");

      sb.append("AttributeSet");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeSet));

      sb.append(", ");

      sb.append("AttributeSetValue");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeSetValue));

      sb.append(", ");

      sb.append("Stocked");
      sb.append("=");
      sb.append(String.valueOf(this.Stocked));

      sb.append(", ");

      sb.append("Purchase");
      sb.append("=");
      sb.append(String.valueOf(this.Purchase));

      sb.append(", ");

      sb.append("Sale");
      sb.append("=");
      sb.append(String.valueOf(this.Sale));

      sb.append(", ");

      sb.append("TaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.TaxCategory));

      sb.append(", ");

      sb.append("StandardCost");
      sb.append("=");
      sb.append(String.valueOf(this.StandardCost));

      sb.append(", ");

      sb.append("Price_Sales");
      sb.append("=");
      sb.append(String.valueOf(this.Price_Sales));

      sb.append(", ");

      sb.append("Price_Purchase");
      sb.append("=");
      sb.append(String.valueOf(this.Price_Purchase));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.SearchKey, other.SearchKey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String SearchKey;
    String Name;
    String Description;
    String UPC_EAN;
    String ProductCategory;
    String UOM;
    String ProductType;
    String Production;
    String BillOfMaterial;
    String Discontinued;
    String CostType;
    String AttributeSet;
    String AttributeSetValue;
    String Stocked;
    String Purchase;
    String Sale;
    String TaxCategory;
    String StandardCost;
    String Price_Sales;
    String Price_Purchase;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.SearchKey == null) ? 0 : this.SearchKey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row4Struct other = (row4Struct) obj;

      if (this.SearchKey == null) {
        if (other.SearchKey != null)
          return false;
      } else if (!this.SearchKey.equals(other.SearchKey))
        return false;

      return true;
    }

    public void copyDataTo(row4Struct other) {

      other.Organization = this.Organization;
      other.SearchKey = this.SearchKey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.UPC_EAN = this.UPC_EAN;
      other.ProductCategory = this.ProductCategory;
      other.UOM = this.UOM;
      other.ProductType = this.ProductType;
      other.Production = this.Production;
      other.BillOfMaterial = this.BillOfMaterial;
      other.Discontinued = this.Discontinued;
      other.CostType = this.CostType;
      other.AttributeSet = this.AttributeSet;
      other.AttributeSetValue = this.AttributeSetValue;
      other.Stocked = this.Stocked;
      other.Purchase = this.Purchase;
      other.Sale = this.Sale;
      other.TaxCategory = this.TaxCategory;
      other.StandardCost = this.StandardCost;
      other.Price_Sales = this.Price_Sales;
      other.Price_Purchase = this.Price_Purchase;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row4Struct other) {

      other.SearchKey = this.SearchKey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SearchKey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SearchKey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UPC_EAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UPC_EAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UOM = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UOM = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Production = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Production = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BillOfMaterial = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BillOfMaterial = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Discontinued = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Discontinued = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CostType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CostType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeSet = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeSet = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeSetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeSetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Stocked = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Stocked = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Purchase = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Purchase = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Sale = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Sale = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price_Sales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price_Sales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price_Purchase = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price_Purchase = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SearchKey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SearchKey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UPC_EAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UPC_EAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UOM == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UOM.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Production == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Production.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BillOfMaterial == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BillOfMaterial.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Discontinued == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Discontinued.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CostType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CostType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeSet == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeSet.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeSetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeSetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Stocked == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Stocked.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Purchase == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Purchase.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Sale == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Sale.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price_Sales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price_Sales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price_Purchase == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price_Purchase.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("SearchKey");
      sb.append("=");
      sb.append(String.valueOf(this.SearchKey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("UPC_EAN");
      sb.append("=");
      sb.append(String.valueOf(this.UPC_EAN));

      sb.append(", ");

      sb.append("ProductCategory");
      sb.append("=");
      sb.append(String.valueOf(this.ProductCategory));

      sb.append(", ");

      sb.append("UOM");
      sb.append("=");
      sb.append(String.valueOf(this.UOM));

      sb.append(", ");

      sb.append("ProductType");
      sb.append("=");
      sb.append(String.valueOf(this.ProductType));

      sb.append(", ");

      sb.append("Production");
      sb.append("=");
      sb.append(String.valueOf(this.Production));

      sb.append(", ");

      sb.append("BillOfMaterial");
      sb.append("=");
      sb.append(String.valueOf(this.BillOfMaterial));

      sb.append(", ");

      sb.append("Discontinued");
      sb.append("=");
      sb.append(String.valueOf(this.Discontinued));

      sb.append(", ");

      sb.append("CostType");
      sb.append("=");
      sb.append(String.valueOf(this.CostType));

      sb.append(", ");

      sb.append("AttributeSet");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeSet));

      sb.append(", ");

      sb.append("AttributeSetValue");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeSetValue));

      sb.append(", ");

      sb.append("Stocked");
      sb.append("=");
      sb.append(String.valueOf(this.Stocked));

      sb.append(", ");

      sb.append("Purchase");
      sb.append("=");
      sb.append(String.valueOf(this.Purchase));

      sb.append(", ");

      sb.append("Sale");
      sb.append("=");
      sb.append(String.valueOf(this.Sale));

      sb.append(", ");

      sb.append("TaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.TaxCategory));

      sb.append(", ");

      sb.append("StandardCost");
      sb.append("=");
      sb.append(String.valueOf(this.StandardCost));

      sb.append(", ");

      sb.append("Price_Sales");
      sb.append("=");
      sb.append(String.valueOf(this.Price_Sales));

      sb.append(", ");

      sb.append("Price_Purchase");
      sb.append("=");
      sb.append(String.valueOf(this.Price_Purchase));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.SearchKey, other.SearchKey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String SearchKey;
    String Name;
    String Description;
    String UPC_EAN;
    String ProductCategory;
    String UOM;
    String ProductType;
    String Production;
    String BillOfMaterial;
    String Discontinued;
    String CostType;
    String AttributeSet;
    String AttributeSetValue;
    String Stocked;
    String Purchase;
    String Sale;
    String TaxCategory;
    String StandardCost;
    String Price_Sales;
    String Price_Purchase;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.SearchKey == null) ? 0 : this.SearchKey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row1Struct other = (row1Struct) obj;

      if (this.SearchKey == null) {
        if (other.SearchKey != null)
          return false;
      } else if (!this.SearchKey.equals(other.SearchKey))
        return false;

      return true;
    }

    public void copyDataTo(row1Struct other) {

      other.Organization = this.Organization;
      other.SearchKey = this.SearchKey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.UPC_EAN = this.UPC_EAN;
      other.ProductCategory = this.ProductCategory;
      other.UOM = this.UOM;
      other.ProductType = this.ProductType;
      other.Production = this.Production;
      other.BillOfMaterial = this.BillOfMaterial;
      other.Discontinued = this.Discontinued;
      other.CostType = this.CostType;
      other.AttributeSet = this.AttributeSet;
      other.AttributeSetValue = this.AttributeSetValue;
      other.Stocked = this.Stocked;
      other.Purchase = this.Purchase;
      other.Sale = this.Sale;
      other.TaxCategory = this.TaxCategory;
      other.StandardCost = this.StandardCost;
      other.Price_Sales = this.Price_Sales;
      other.Price_Purchase = this.Price_Purchase;

    }

    public void copyKeysDataTo(row1Struct other) {

      other.SearchKey = this.SearchKey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SearchKey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SearchKey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UPC_EAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UPC_EAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.UOM = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.UOM = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProductType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProductType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Production = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Production = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BillOfMaterial = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BillOfMaterial = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Discontinued = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Discontinued = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CostType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CostType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeSet = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeSet = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeSetValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeSetValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Stocked = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Stocked = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Purchase = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Purchase = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Sale = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Sale = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StandardCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StandardCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price_Sales = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price_Sales = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price_Purchase = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price_Purchase = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SearchKey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SearchKey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UPC_EAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UPC_EAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.UOM == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.UOM.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProductType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProductType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Production == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Production.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BillOfMaterial == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BillOfMaterial.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Discontinued == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Discontinued.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CostType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CostType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeSet == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeSet.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeSetValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeSetValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Stocked == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Stocked.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Purchase == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Purchase.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Sale == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Sale.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StandardCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StandardCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price_Sales == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price_Sales.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price_Purchase == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price_Purchase.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("SearchKey");
      sb.append("=");
      sb.append(String.valueOf(this.SearchKey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("UPC_EAN");
      sb.append("=");
      sb.append(String.valueOf(this.UPC_EAN));

      sb.append(", ");

      sb.append("ProductCategory");
      sb.append("=");
      sb.append(String.valueOf(this.ProductCategory));

      sb.append(", ");

      sb.append("UOM");
      sb.append("=");
      sb.append(String.valueOf(this.UOM));

      sb.append(", ");

      sb.append("ProductType");
      sb.append("=");
      sb.append(String.valueOf(this.ProductType));

      sb.append(", ");

      sb.append("Production");
      sb.append("=");
      sb.append(String.valueOf(this.Production));

      sb.append(", ");

      sb.append("BillOfMaterial");
      sb.append("=");
      sb.append(String.valueOf(this.BillOfMaterial));

      sb.append(", ");

      sb.append("Discontinued");
      sb.append("=");
      sb.append(String.valueOf(this.Discontinued));

      sb.append(", ");

      sb.append("CostType");
      sb.append("=");
      sb.append(String.valueOf(this.CostType));

      sb.append(", ");

      sb.append("AttributeSet");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeSet));

      sb.append(", ");

      sb.append("AttributeSetValue");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeSetValue));

      sb.append(", ");

      sb.append("Stocked");
      sb.append("=");
      sb.append(String.valueOf(this.Stocked));

      sb.append(", ");

      sb.append("Purchase");
      sb.append("=");
      sb.append(String.valueOf(this.Purchase));

      sb.append(", ");

      sb.append("Sale");
      sb.append("=");
      sb.append(String.valueOf(this.Sale));

      sb.append(", ");

      sb.append("TaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.TaxCategory));

      sb.append(", ");

      sb.append("StandardCost");
      sb.append("=");
      sb.append(String.valueOf(this.StandardCost));

      sb.append(", ");

      sb.append("Price_Sales");
      sb.append("=");
      sb.append(String.valueOf(this.Price_Sales));

      sb.append(", ");

      sb.append("Price_Purchase");
      sb.append("=");
      sb.append(String.valueOf(this.Price_Purchase));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.SearchKey, other.SearchKey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap)
      throws TalendException {
    globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

    String currentComponent = "";

    try {

      row1Struct row1 = new row1Struct();
      row4Struct row4 = new row4Struct();
      row2Struct row2 = new row2Struct();
      row14Struct row14 = new row14Struct();
      row60Struct row60 = new row60Struct();
      row21Struct row21 = new row21Struct();
      row6Struct row6 = new row6Struct();

      /**
       * [tJavaRow_16 begin ] start
       */

      ok_Hash.put("tJavaRow_16", false);
      start_Hash.put("tJavaRow_16", System.currentTimeMillis());
      currentComponent = "tJavaRow_16";

      int nb_line_tJavaRow_16 = 0;

      /**
       * [tJavaRow_16 begin ] stop
       */

      /**
       * [tJavaRow_14 begin ] start
       */

      ok_Hash.put("tJavaRow_14", false);
      start_Hash.put("tJavaRow_14", System.currentTimeMillis());
      currentComponent = "tJavaRow_14";

      int nb_line_tJavaRow_14 = 0;

      /**
       * [tJavaRow_14 begin ] stop
       */

      /**
       * [tFilterRow_11 begin ] start
       */

      ok_Hash.put("tFilterRow_11", false);
      start_Hash.put("tFilterRow_11", System.currentTimeMillis());
      currentComponent = "tFilterRow_11";

      int nb_line_tFilterRow_11 = 0;
      int nb_line_ok_tFilterRow_11 = 0;
      int nb_line_reject_tFilterRow_11 = 0;

      /**
       * [tFilterRow_11 begin ] stop
       */

      /**
       * [tJavaRow_18 begin ] start
       */

      ok_Hash.put("tJavaRow_18", false);
      start_Hash.put("tJavaRow_18", System.currentTimeMillis());
      currentComponent = "tJavaRow_18";

      int nb_line_tJavaRow_18 = 0;

      /**
       * [tJavaRow_18 begin ] stop
       */

      /**
       * [tJavaRow_10 begin ] start
       */

      ok_Hash.put("tJavaRow_10", false);
      start_Hash.put("tJavaRow_10", System.currentTimeMillis());
      currentComponent = "tJavaRow_10";

      int nb_line_tJavaRow_10 = 0;

      /**
       * [tJavaRow_10 begin ] stop
       */

      /**
       * [tFilterRow_6 begin ] start
       */

      ok_Hash.put("tFilterRow_6", false);
      start_Hash.put("tFilterRow_6", System.currentTimeMillis());
      currentComponent = "tFilterRow_6";

      int nb_line_tFilterRow_6 = 0;
      int nb_line_ok_tFilterRow_6 = 0;
      int nb_line_reject_tFilterRow_6 = 0;

      /**
       * [tFilterRow_6 begin ] stop
       */

      /**
       * [tJavaRow_8 begin ] start
       */

      ok_Hash.put("tJavaRow_8", false);
      start_Hash.put("tJavaRow_8", System.currentTimeMillis());
      currentComponent = "tJavaRow_8";

      int nb_line_tJavaRow_8 = 0;

      /**
       * [tJavaRow_8 begin ] stop
       */

      /**
       * [tFileInputDelimited_1 begin ] start
       */

      ok_Hash.put("tFileInputDelimited_1", false);
      start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
      currentComponent = "tFileInputDelimited_1";

      int nb_line_tFileInputDelimited_1 = 0;
      int footer_tFileInputDelimited_1 = 0;
      int totalLinetFileInputDelimited_1 = 0;
      int limittFileInputDelimited_1 = -1;
      int lastLinetFileInputDelimited_1 = -1;

      char fieldSeparator_tFileInputDelimited_1[] = null;

      // support passing value (property: Field Separator) by 'context.fs'
      // or 'globalMap.get("fs")'.
      if (((String) ",").length() > 0) {
        fieldSeparator_tFileInputDelimited_1 = ((String) ",").toCharArray();
      } else {
        throw new IllegalArgumentException("Field Separator must be assigned a char.");
      }

      char rowSeparator_tFileInputDelimited_1[] = null;

      // support passing value (property: Row Separator) by 'context.rs'
      // or 'globalMap.get("rs")'.
      if (((String) "\n").length() > 0) {
        rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
      } else {
        throw new IllegalArgumentException("Row Separator must be assigned a char.");
      }

      com.csvreader.CsvReader csvReadertFileInputDelimited_1 = new com.csvreader.CsvReader(
          new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(/**
           * 
           * Start field tFileInputDelimited_1:FILENAME
           */
          context.getProperty("filename")/**
           * End field tFileInputDelimited_1:FILENAME
           */
          ), "UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);

      if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
          && (rowSeparator_tFileInputDelimited_1[0] != '\r'))
        csvReadertFileInputDelimited_1.setRecordDelimiter(rowSeparator_tFileInputDelimited_1[0]);

      csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
      csvReadertFileInputDelimited_1.setTextQualifier('"');

      csvReadertFileInputDelimited_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      String[] rowtFileInputDelimited_1 = null;

      if (footer_tFileInputDelimited_1 > 0) {

        while (csvReadertFileInputDelimited_1.readRecord()) {
          rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();
          if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
              .equals(rowtFileInputDelimited_1[0]))) {// empty
            // line when
            // row
            // separator
            // is '\n'

            totalLinetFileInputDelimited_1++;

          }

        }
        int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
            - footer_tFileInputDelimited_1 < 0 ? 0 : totalLinetFileInputDelimited_1
            - footer_tFileInputDelimited_1;
        if (lastLinetFileInputDelimited_1 > 0) {
          lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
              : lastLineTemptFileInputDelimited_1;
        } else {
          lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
        }

        csvReadertFileInputDelimited_1.close();

        csvReadertFileInputDelimited_1 = new com.csvreader.CsvReader(new java.io.BufferedReader(
            new java.io.InputStreamReader(new java.io.FileInputStream(/**
             * Start field
             * tFileInputDelimited_1:FILENAME
             */
            context.getProperty("filename")/**
             * End field tFileInputDelimited_1:FILENAME
             */
            ), "UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);

        if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
            && (rowSeparator_tFileInputDelimited_1[0] != '\r'))
          csvReadertFileInputDelimited_1.setRecordDelimiter(rowSeparator_tFileInputDelimited_1[0]);
        csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
        csvReadertFileInputDelimited_1.setTextQualifier('"');
        csvReadertFileInputDelimited_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      }

      int currentLinetFileInputDelimited_1 = 0;
      int outputLinetFileInputDelimited_1 = 0;

      while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1.readRecord()) {

        rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

        if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
          // line
          // when
          // row
          // separator
          // is
          // '\n'
          continue;
        }

        currentLinetFileInputDelimited_1++;
        if (currentLinetFileInputDelimited_1 < 1 + 1) {
          continue;
        }

        if (lastLinetFileInputDelimited_1 > -1
            && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
          break;
        }
        outputLinetFileInputDelimited_1++;
        if (limittFileInputDelimited_1 > 0
            && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
          break;
        }

        row1 = null;
        row1 = new row1Struct();
        try {

          if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
            // line
            // when
            // row
            // separator
            // is
            // '\n'

            row1.Organization = null;

            row1.SearchKey = null;

            row1.Name = null;

            row1.Description = null;

            row1.UPC_EAN = null;

            row1.ProductCategory = null;

            row1.UOM = null;

            row1.ProductType = null;

            row1.Production = null;

            row1.BillOfMaterial = null;

            row1.Discontinued = null;

            row1.CostType = null;

            row1.AttributeSet = null;

            row1.AttributeSetValue = null;

            row1.Stocked = null;

            row1.Purchase = null;

            row1.Sale = null;

            row1.TaxCategory = null;

            row1.StandardCost = null;

            row1.Price_Sales = null;

            row1.Price_Purchase = null;

          } else {

            if (0 < rowtFileInputDelimited_1.length) {
              row1.Organization = rowtFileInputDelimited_1[0].trim();

            } else {
              row1.Organization = null;
            }

            if (1 < rowtFileInputDelimited_1.length) {
              row1.SearchKey = rowtFileInputDelimited_1[1].trim();

            } else {
              row1.SearchKey = null;
            }

            if (2 < rowtFileInputDelimited_1.length) {
              row1.Name = rowtFileInputDelimited_1[2].trim();

            } else {
              row1.Name = null;
            }

            if (3 < rowtFileInputDelimited_1.length) {
              row1.Description = rowtFileInputDelimited_1[3].trim();

            } else {
              row1.Description = null;
            }

            if (4 < rowtFileInputDelimited_1.length) {
              row1.UPC_EAN = rowtFileInputDelimited_1[4].trim();

            } else {
              row1.UPC_EAN = null;
            }

            if (5 < rowtFileInputDelimited_1.length) {
              row1.ProductCategory = rowtFileInputDelimited_1[5].trim();

            } else {
              row1.ProductCategory = null;
            }

            if (6 < rowtFileInputDelimited_1.length) {
              row1.UOM = rowtFileInputDelimited_1[6].trim();

            } else {
              row1.UOM = null;
            }

            if (7 < rowtFileInputDelimited_1.length) {
              row1.ProductType = rowtFileInputDelimited_1[7].trim();

            } else {
              row1.ProductType = null;
            }

            if (8 < rowtFileInputDelimited_1.length) {
              row1.Production = rowtFileInputDelimited_1[8].trim();

            } else {
              row1.Production = null;
            }

            if (9 < rowtFileInputDelimited_1.length) {
              row1.BillOfMaterial = rowtFileInputDelimited_1[9].trim();

            } else {
              row1.BillOfMaterial = null;
            }

            if (10 < rowtFileInputDelimited_1.length) {
              row1.Discontinued = rowtFileInputDelimited_1[10].trim();

            } else {
              row1.Discontinued = null;
            }

            if (11 < rowtFileInputDelimited_1.length) {
              row1.CostType = rowtFileInputDelimited_1[11].trim();

            } else {
              row1.CostType = null;
            }

            if (12 < rowtFileInputDelimited_1.length) {
              row1.AttributeSet = rowtFileInputDelimited_1[12].trim();

            } else {
              row1.AttributeSet = null;
            }

            if (13 < rowtFileInputDelimited_1.length) {
              row1.AttributeSetValue = rowtFileInputDelimited_1[13].trim();

            } else {
              row1.AttributeSetValue = null;
            }

            if (14 < rowtFileInputDelimited_1.length) {
              row1.Stocked = rowtFileInputDelimited_1[14].trim();

            } else {
              row1.Stocked = null;
            }

            if (15 < rowtFileInputDelimited_1.length) {
              row1.Purchase = rowtFileInputDelimited_1[15].trim();

            } else {
              row1.Purchase = null;
            }

            if (16 < rowtFileInputDelimited_1.length) {
              row1.Sale = rowtFileInputDelimited_1[16].trim();

            } else {
              row1.Sale = null;
            }

            if (17 < rowtFileInputDelimited_1.length) {
              row1.TaxCategory = rowtFileInputDelimited_1[17].trim();

            } else {
              row1.TaxCategory = null;
            }

            if (18 < rowtFileInputDelimited_1.length) {
              row1.StandardCost = rowtFileInputDelimited_1[18].trim();

            } else {
              row1.StandardCost = null;
            }

            if (19 < rowtFileInputDelimited_1.length) {
              row1.Price_Sales = rowtFileInputDelimited_1[19].trim();

            } else {
              row1.Price_Sales = null;
            }

            if (20 < rowtFileInputDelimited_1.length) {
              row1.Price_Purchase = rowtFileInputDelimited_1[20].trim();

            } else {
              row1.Price_Purchase = null;
            }

          }

        } catch (Exception e) {
          System.err.println(e.getMessage());
          row1 = null;
        }

        /**
         * [tFileInputDelimited_1 begin ] stop
         */
        /**
         * [tFileInputDelimited_1 main ] start
         */

        currentComponent = "tFileInputDelimited_1";

        /**
         * [tFileInputDelimited_1 main ] stop
         */
        // Start of branch "row1"
        if (row1 != null) {

          /**
           * [tJavaRow_8 main ] start
           */

          currentComponent = "tJavaRow_8";

          org.openbravo.idl.proc.IdlService service = org.openbravo.idl.proc.IdlIntService
              .getInstance().getService("Product");
          org.openbravo.idl.proc.Validator validator = service.getValidator("Product");

          row4.Organization = validator.checkOrganization(row1.Organization);
          row4.SearchKey = validator.checkNotNull(validator.checkString(row1.SearchKey, 40),
              "SearchKey");
          row4.Name = validator.checkNotNull(validator.checkString(row1.Name, 60), "Name");
          row4.Description = validator.checkString(row1.Description, 255);
          row4.UPC_EAN = validator.checkString(row1.UPC_EAN, 30);
          row4.ProductCategory = validator.checkNotNull(
              validator.checkString(row1.ProductCategory, 32, "Category"), "ProductCategory");
          row4.UOM = validator.checkNotNull(validator.checkString(row1.UOM, 32, "UOM"), "UOM");
          row4.ProductType = validator.checkNotNull(
              validator.checkString(row1.ProductType, 60, "ProductType"), "ProductType");
          row4.Production = validator.checkNotNull(
              validator.checkBoolean(row1.Production, "Production"), "Production");
          row4.BillOfMaterial = validator.checkNotNull(
              validator.checkBoolean(row1.BillOfMaterial, "BillOfMaterials"), "BillOfMaterial");
          row4.Discontinued = validator.checkNotNull(
              validator.checkBoolean(row1.Discontinued, "Discontinued"), "Discontinued");
          row4.CostType = validator.checkString(row1.CostType, 32, "CostType");
          row4.AttributeSet = validator.checkString(row1.AttributeSet, 60, "AttributeSet");
          row4.AttributeSetValue = validator.checkString(row1.AttributeSetValue, 60,
              "AttributeSetValue");
          row4.Stocked = validator.checkNotNull(validator.checkBoolean(row1.Stocked, "Stocked"),
              "Stocked");
          row4.Purchase = validator.checkNotNull(validator.checkBoolean(row1.Purchase, "Purchase"),
              "Purchase");
          row4.Sale = validator.checkNotNull(validator.checkBoolean(row1.Sale, "Sale"), "Sale");
          row4.TaxCategory = validator.checkNotNull(
              validator.checkString(row1.TaxCategory, 60, "TaxCategory"), "TaxCategory");
          row4.StandardCost = validator.checkBigDecimal(row1.StandardCost);
          row4.Price_Sales = validator.checkBigDecimal(row1.Price_Sales);
          row4.Price_Purchase = validator.checkBigDecimal(row1.Price_Purchase);

          row4.flag = validator.getErrorCode();
          row4.whyError = validator.getErrorMessage();
          nb_line_tJavaRow_8++;

          /**
           * [tJavaRow_8 main ] stop
           */

          /**
           * [tFilterRow_6 main ] start
           */

          currentComponent = "tFilterRow_6";

          row2 = null;
          row6 = null;

          if (

          (row4.flag == null ? false : row4.flag.toLowerCase().compareTo("0") == 0)

          )

          {
            if (row2 == null) {
              row2 = new row2Struct();
            }
            row2.Organization = row4.Organization;
            row2.SearchKey = row4.SearchKey;
            row2.Name = row4.Name;
            row2.Description = row4.Description;
            row2.UPC_EAN = row4.UPC_EAN;
            row2.ProductCategory = row4.ProductCategory;
            row2.UOM = row4.UOM;
            row2.ProductType = row4.ProductType;
            row2.Production = row4.Production;
            row2.BillOfMaterial = row4.BillOfMaterial;
            row2.Discontinued = row4.Discontinued;
            row2.CostType = row4.CostType;
            row2.AttributeSet = row4.AttributeSet;
            row2.AttributeSetValue = row4.AttributeSetValue;
            row2.Stocked = row4.Stocked;
            row2.Purchase = row4.Purchase;
            row2.Sale = row4.Sale;
            row2.TaxCategory = row4.TaxCategory;
            row2.StandardCost = row4.StandardCost;
            row2.Price_Sales = row4.Price_Sales;
            row2.Price_Purchase = row4.Price_Purchase;
            row2.flag = row4.flag;
            row2.whyError = row4.whyError;
            nb_line_ok_tFilterRow_6++;
          } else {
            if (row6 == null) {
              row6 = new row6Struct();
            }
            row6.Organization = row4.Organization;
            row6.SearchKey = row4.SearchKey;
            row6.Name = row4.Name;
            row6.Description = row4.Description;
            row6.UPC_EAN = row4.UPC_EAN;
            row6.ProductCategory = row4.ProductCategory;
            row6.UOM = row4.UOM;
            row6.ProductType = row4.ProductType;
            row6.Production = row4.Production;
            row6.BillOfMaterial = row4.BillOfMaterial;
            row6.Discontinued = row4.Discontinued;
            row6.CostType = row4.CostType;
            row6.AttributeSet = row4.AttributeSet;
            row6.AttributeSetValue = row4.AttributeSetValue;
            row6.Stocked = row4.Stocked;
            row6.Purchase = row4.Purchase;
            row6.Sale = row4.Sale;
            row6.TaxCategory = row4.TaxCategory;
            row6.StandardCost = row4.StandardCost;
            row6.Price_Sales = row4.Price_Sales;
            row6.Price_Purchase = row4.Price_Purchase;
            row6.flag = row4.flag;
            row6.whyError = row4.whyError;
            nb_line_reject_tFilterRow_6++;
          }
          nb_line_tFilterRow_6++;

          /**
           * [tFilterRow_6 main ] stop
           */
          // Start of branch "row2"
          if (row2 != null) {

            /**
             * [tJavaRow_18 main ] start
             */

            currentComponent = "tJavaRow_18";

            // Code generate according to input schema and output
            // schema
            row14.flag = "0";
            row14.whyError = "";
            row14.Organization = row2.Organization;
            row14.SearchKey = row2.SearchKey;
            row14.Name = row2.Name;
            row14.Description = row2.Description;
            row14.UPC_EAN = row2.UPC_EAN;
            row14.ProductCategory = row2.ProductCategory;
            row14.UOM = row2.UOM;
            row14.ProductType = row2.ProductType;
            row14.Production = row2.Production;
            row14.BillOfMaterial = row2.BillOfMaterial;
            row14.Discontinued = row2.Discontinued;

            row14.CostType = row2.CostType;
            if (service.getReferenceValue("Cost Type", row2.CostType) == null
                && row2.CostType != null) {
              row14.flag = "-1";
              row14.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row2.CostType
                  + "\n";
            }

            row14.AttributeSet = row2.AttributeSet;
            row14.AttributeSetValue = row2.AttributeSetValue;
            if (row2.AttributeSet != null) {
              AttributeSet attributeSet = service.findDALInstance(false, AttributeSet.class,
                  new Value("name", row2.AttributeSet));
              if (attributeSet == null) {
                row14.flag = "-1";
                row14.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE")
                    + row2.AttributeSet + "\n";
              }

              if (attributeSet != null && row2.AttributeSetValue != null
                  && !attributeSet.isSerialNo() && !attributeSet.isLot()) {
                if (attributeSet.getAttributeUseList().size() == 1) {
                  AttributeValue attvalue = service.findDALInstance(false, AttributeValue.class,
                      new Value(AttributeValue.PROPERTY_ATTRIBUTE, attributeSet
                          .getAttributeUseList().get(0).getAttribute()), new Value("name",
                          row2.AttributeSetValue));
                  if (attvalue == null) {
                    row14.flag = "-1";
                    row14.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE")
                        + row2.AttributeSetValue + "\n";
                  }
                }
              }
            }

            row14.Stocked = row2.Stocked;
            row14.Purchase = row2.Purchase;
            row14.Sale = row2.Sale;
            row14.TaxCategory = row2.TaxCategory;
            row14.StandardCost = row2.StandardCost;
            row14.Price_Sales = row2.Price_Sales;
            row14.Price_Purchase = row2.Price_Purchase;
            nb_line_tJavaRow_18++;

            /**
             * [tJavaRow_18 main ] stop
             */

            /**
             * [tFilterRow_11 main ] start
             */

            currentComponent = "tFilterRow_11";

            row60 = null;
            row21 = null;

            if (

            (row14.flag == null ? false : row14.flag.toLowerCase().compareTo("0") == 0)

            )

            {
              if (row60 == null) {
                row60 = new row60Struct();
              }
              row60.Organization = row14.Organization;
              row60.SearchKey = row14.SearchKey;
              row60.Name = row14.Name;
              row60.Description = row14.Description;
              row60.UPC_EAN = row14.UPC_EAN;
              row60.ProductCategory = row14.ProductCategory;
              row60.UOM = row14.UOM;
              row60.ProductType = row14.ProductType;
              row60.Production = row14.Production;
              row60.BillOfMaterial = row14.BillOfMaterial;
              row60.Discontinued = row14.Discontinued;
              row60.CostType = row14.CostType;
              row60.AttributeSet = row14.AttributeSet;
              row60.AttributeSetValue = row14.AttributeSetValue;
              row60.Stocked = row14.Stocked;
              row60.Purchase = row14.Purchase;
              row60.Sale = row14.Sale;
              row60.TaxCategory = row14.TaxCategory;
              row60.StandardCost = row14.StandardCost;
              row60.Price_Sales = row14.Price_Sales;
              row60.Price_Purchase = row14.Price_Purchase;
              row60.flag = row14.flag;
              row60.whyError = row14.whyError;
              nb_line_ok_tFilterRow_11++;
            } else {
              if (row21 == null) {
                row21 = new row21Struct();
              }
              row21.Organization = row14.Organization;
              row21.SearchKey = row14.SearchKey;
              row21.Name = row14.Name;
              row21.Description = row14.Description;
              row21.UPC_EAN = row14.UPC_EAN;
              row21.ProductCategory = row14.ProductCategory;
              row21.UOM = row14.UOM;
              row21.ProductType = row14.ProductType;
              row21.Production = row14.Production;
              row21.BillOfMaterial = row14.BillOfMaterial;
              row21.Discontinued = row14.Discontinued;
              row21.CostType = row14.CostType;
              row21.AttributeSet = row14.AttributeSet;
              row21.AttributeSetValue = row14.AttributeSetValue;
              row21.Stocked = row14.Stocked;
              row21.Purchase = row14.Purchase;
              row21.Sale = row14.Sale;
              row21.TaxCategory = row14.TaxCategory;
              row21.StandardCost = row14.StandardCost;
              row21.Price_Sales = row14.Price_Sales;
              row21.Price_Purchase = row14.Price_Purchase;
              row21.flag = row14.flag;
              row21.whyError = row14.whyError;
              nb_line_reject_tFilterRow_11++;
            }
            nb_line_tFilterRow_11++;

            /**
             * [tFilterRow_11 main ] stop
             */
            // Start of branch "row60"
            if (row60 != null) {

              /**
               * [tJavaRow_16 main ] start
               */

              currentComponent = "tJavaRow_16";

              service.finishRecordProcess(row60.Organization, row60.SearchKey, row60.Name,
                  row60.Description, row60.UPC_EAN, row60.ProductCategory, row60.UOM,
                  row60.ProductType, row60.Production, row60.BillOfMaterial, row60.Discontinued,
                  row60.CostType, row60.AttributeSet, row60.AttributeSetValue, row60.Stocked,
                  row60.Purchase, row60.Sale, row60.TaxCategory, row60.StandardCost,
                  row60.Price_Sales, row60.Price_Purchase);

              nb_line_tJavaRow_16++;

              /**
               * [tJavaRow_16 main ] stop
               */

            } // End of branch "row60"

            // Start of branch "row21"
            if (row21 != null) {

              /**
               * [tJavaRow_14 main ] start
               */

              currentComponent = "tJavaRow_14";

              service.logRecordError(row21.whyError, row21.Organization, row21.SearchKey,
                  row21.Name, row21.Description, row21.UPC_EAN, row21.ProductCategory, row21.UOM,
                  row21.ProductType, row21.Production, row21.BillOfMaterial, row21.Discontinued,
                  row21.CostType, row21.AttributeSet, row21.AttributeSetValue, row21.Stocked,
                  row21.Purchase, row21.Sale, row21.TaxCategory, row21.StandardCost,
                  row21.Price_Sales, row21.Price_Purchase);
              nb_line_tJavaRow_14++;

              /**
               * [tJavaRow_14 main ] stop
               */

            } // End of branch "row21"

          } // End of branch "row2"

          // Start of branch "row6"
          if (row6 != null) {

            /**
             * [tJavaRow_10 main ] start
             */

            currentComponent = "tJavaRow_10";

            service.logRecordError(row6.whyError, row6.Organization, row6.SearchKey, row6.Name,
                row6.Description, row6.UPC_EAN, row6.ProductCategory, row6.UOM, row6.ProductType,
                row6.Production, row6.BillOfMaterial, row6.Discontinued, row6.CostType,
                row6.AttributeSet, row6.AttributeSetValue, row6.Stocked, row6.Purchase, row6.Sale,
                row6.TaxCategory, row6.StandardCost, row6.Price_Sales, row6.Price_Purchase);

            nb_line_tJavaRow_10++;

            /**
             * [tJavaRow_10 main ] stop
             */

          } // End of branch "row6"

        } // End of branch "row1"

        /**
         * [tFileInputDelimited_1 end ] start
         */

        currentComponent = "tFileInputDelimited_1";

        nb_line_tFileInputDelimited_1++;
      }
      csvReadertFileInputDelimited_1.close();
      globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);

      ok_Hash.put("tFileInputDelimited_1", true);
      end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

      /**
       * [tFileInputDelimited_1 end ] stop
       */

      /**
       * [tJavaRow_8 end ] start
       */

      currentComponent = "tJavaRow_8";

      globalMap.put("tJavaRow_8_NB_LINE", nb_line_tJavaRow_8);

      ok_Hash.put("tJavaRow_8", true);
      end_Hash.put("tJavaRow_8", System.currentTimeMillis());

      /**
       * [tJavaRow_8 end ] stop
       */

      /**
       * [tFilterRow_6 end ] start
       */

      currentComponent = "tFilterRow_6";

      globalMap.put("tFilterRow_6_NB_LINE", nb_line_tFilterRow_6);
      globalMap.put("tFilterRow_6_NB_LINE_OK", nb_line_ok_tFilterRow_6);
      globalMap.put("tFilterRow_6_NB_LINE_REJECT", nb_line_reject_tFilterRow_6);

      ok_Hash.put("tFilterRow_6", true);
      end_Hash.put("tFilterRow_6", System.currentTimeMillis());

      /**
       * [tFilterRow_6 end ] stop
       */

      /**
       * [tJavaRow_18 end ] start
       */

      currentComponent = "tJavaRow_18";

      globalMap.put("tJavaRow_18_NB_LINE", nb_line_tJavaRow_18);

      ok_Hash.put("tJavaRow_18", true);
      end_Hash.put("tJavaRow_18", System.currentTimeMillis());

      /**
       * [tJavaRow_18 end ] stop
       */

      /**
       * [tFilterRow_11 end ] start
       */

      currentComponent = "tFilterRow_11";

      globalMap.put("tFilterRow_11_NB_LINE", nb_line_tFilterRow_11);
      globalMap.put("tFilterRow_11_NB_LINE_OK", nb_line_ok_tFilterRow_11);
      globalMap.put("tFilterRow_11_NB_LINE_REJECT", nb_line_reject_tFilterRow_11);

      ok_Hash.put("tFilterRow_11", true);
      end_Hash.put("tFilterRow_11", System.currentTimeMillis());

      /**
       * [tFilterRow_11 end ] stop
       */

      /**
       * [tJavaRow_16 end ] start
       */

      currentComponent = "tJavaRow_16";

      globalMap.put("tJavaRow_16_NB_LINE", nb_line_tJavaRow_16);

      ok_Hash.put("tJavaRow_16", true);
      end_Hash.put("tJavaRow_16", System.currentTimeMillis());

      /**
       * [tJavaRow_16 end ] stop
       */

      /**
       * [tJavaRow_14 end ] start
       */

      currentComponent = "tJavaRow_14";

      globalMap.put("tJavaRow_14_NB_LINE", nb_line_tJavaRow_14);

      ok_Hash.put("tJavaRow_14", true);
      end_Hash.put("tJavaRow_14", System.currentTimeMillis());

      /**
       * [tJavaRow_14 end ] stop
       */

      /**
       * [tJavaRow_10 end ] start
       */

      currentComponent = "tJavaRow_10";

      globalMap.put("tJavaRow_10_NB_LINE", nb_line_tJavaRow_10);

      ok_Hash.put("tJavaRow_10", true);
      end_Hash.put("tJavaRow_10", System.currentTimeMillis());

      /**
       * [tJavaRow_10 end ] stop
       */

    } catch (Exception e) {

      throw new TalendException(e, currentComponent, globalMap);

    }

    globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
  }

  public boolean watch = false;
  public int portStats = 3334;
  public int portTraces = 4334;
  public String clientHost;
  public String defaultClientHost = "localhost";
  public String contextStr = "Default";
  public String pid = "0";
  public String rootPid = null;
  public String fatherPid = null;
  public long startTime = 0;
  public boolean isChildJob = false;

  private ThreadLocal threadLocal = new ThreadLocal();
  {
    java.util.Map threadRunResultMap = new java.util.HashMap();
    threadRunResultMap.put("errorCode", null);
    threadRunResultMap.put("status", "");
    threadLocal.set(threadRunResultMap);
  }

  private java.util.Properties context_param = new java.util.Properties();

  public String status = "";

  public static void main(String[] args) {
    final ProductJob ProductJobClass = new ProductJob();

    int exitCode = ProductJobClass.runJobInTOS(args);

    System.exit(exitCode);
  }

  public String[][] runJob(String[] args) {

    int exitCode = runJobInTOS(args);
    String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

    return bufferValue;
  }

  public int runJobInTOS(String[] args) {

    String lastStr = "";
    for (String arg : args) {
      if (arg.equalsIgnoreCase("--context_param")) {
        lastStr = arg;
      } else if (lastStr.equals("")) {
        evalParam(arg);
      } else {
        evalParam(lastStr + " " + arg);
        lastStr = "";
      }
    }

    if (clientHost == null) {
      clientHost = defaultClientHost;
    }

    if (pid == null || "0".equals(pid)) {
      pid = TalendString.getAsciiRandomString(6);
    }

    if (rootPid == null) {
      rootPid = pid;
    }
    if (fatherPid == null) {
      fatherPid = pid;
    } else {
      isChildJob = true;
    }

    try {
      java.io.InputStream inContext = ProductJob.class.getClassLoader().getResourceAsStream(
          "initial_data_load/productjob_0_1/contexts/Default.properties");
      if (inContext != null) {
        defaultProps.load(inContext);
        inContext.close();
        context = new ContextProperties(defaultProps);
      }

      if (contextStr.compareTo("Default") != 0) {
        inContext = ProductJob.class.getClassLoader().getResourceAsStream(
            "initial_data_load/productjob_0_1/contexts/" + contextStr + ".properties");
        if (inContext != null) {
          context.load(inContext);
          inContext.close();
        }
      }

      if (!context_param.isEmpty()) {
        context.putAll(context_param);
      }

      try {
        context.executeInsert = Boolean.parseBoolean(context.getProperty("executeInsert"));
      } catch (NumberFormatException e) {
        context.executeInsert = null;
      }

      context.filename = (String) context.getProperty("filename");

      try {
        context.numLinesOk = Integer.parseInt(context.getProperty("numLinesOk"));
      } catch (NumberFormatException e) {
        context.numLinesOk = null;
      }

      try {
        context.numLinesRejected = Integer.parseInt(context.getProperty("numLinesRejected"));
      } catch (NumberFormatException e) {
        context.numLinesRejected = null;
      }

      context.validationFailCause = (String) context.getProperty("validationFailCause");

    } catch (java.io.IOException ie) {
      System.err.println("Could not load context " + contextStr);
      ie.printStackTrace();
    }

    long end = 0;

    startTime = System.currentTimeMillis();

    try {
      errorCode = null;
      tFileInputDelimited_1Process(globalMap);
      status = "end";
    } catch (TalendException e_tFileInputDelimited_1) {
      status = "failure";
      e_tFileInputDelimited_1.printStackTrace();
      globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

    } finally {
    }

    end = System.currentTimeMillis();

    if (watch) {
      System.out.println((end - startTime) + " milliseconds");
    }

    if (errorCode == null) {
      return status != null && status.equals("failure") ? 1 : 0;
    } else {
      return errorCode.intValue();
    }
  }

  private void evalParam(String arg) {
    if (arg.startsWith("--watch")) {
      watch = true;
    } else if (arg.startsWith("--stat_port=")) {
      portStats = Integer.parseInt(arg.substring(12));
    } else if (arg.startsWith("--trace_port=")) {
      portTraces = Integer.parseInt(arg.substring(13));
    } else if (arg.startsWith("--client_host=")) {
      clientHost = arg.substring(14);
    } else if (arg.startsWith("--context=")) {
      contextStr = arg.substring(10);
    } else if (arg.startsWith("--father_pid=")) {
      fatherPid = arg.substring(13);
    } else if (arg.startsWith("--root_pid=")) {
      rootPid = arg.substring(11);
    } else if (arg.startsWith("--pid=")) {
      pid = arg.substring(6);
    } else if (arg.startsWith("--context_param")) {
      String keyValue = arg.substring(16);
      int index = -1;
      if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
        context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
      }
    }

  }

  public Integer getErrorCode() {
    return errorCode;
  }

  public String getStatus() {
    return status;
  }
}
/************************************************************************************************
 * 237644 characters generated by Talend Open Studio on the 17 de noviembre de 2009 17:34:41 CET
 ************************************************************************************************/
