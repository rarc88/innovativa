<?xml version="1.0"?>
  <database name="FUNCTION SFPR_CREATE_CONCEPT_RVE">
    <function name="SFPR_CREATE_CONCEPT_RVE" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[TYPE RECORD IS REF CURSOR;
Cur_Parameter RECORD;
  Cur_Period RECORD;
  Cur_Employee RECORD;
  Cur_Concept RECORD;
  Cur_Conceptrve RECORD;
  Cur_RveDetail RECORD;
  Cur_RveAmount RECORD;
  Cur_Status RECORD;

  v_Client_ID VARCHAR2(32);
  v_Org_ID VARCHAR2(32);
  v_User_ID VARCHAR2(32) ;
  
  v_ResultStr VARCHAR2(2000) := '';  
  v_StartPeriod_ID VARCHAR2(32);
  v_EndPeriod_ID VARCHAR2(32);
  v_BPartner_ID VARCHAR2(32);  
  v_SSconcept_ID VARCHAR2(32);  
  
  v_StartPeriod_StartDate DATE;
  v_StartPeriod_EndDate DATE;
  v_EndPeriod_StartDate DATE;
  v_EndPeriod_EndDate DATE;

  v_Period_ID VARCHAR2(32); 
  v_PRollTemplate_ID VARCHAR2(32);  
  v_n_insertions NUMBER;	--OBTG:NUMBER--
  v_count NUMBER;		--OBTG:NUMBER--
  v_Message VARCHAR2(2000):='';
  V_Concept VARCHAR2(32);
  v_countsg NUMBER;		--OBTG:NUMBER--
  v_countconceptrve NUMBER;	--OBTG:NUMBER--
  v_CountRVEDETAIL_ID NUMBER;	--OBTG:NUMBER--
  v_RVEDETAIL_ID VARCHAR2(32);
  v_EMPLOYEERVE_ID VARCHAR2(32);
  v_amount NUMBER;		--OBTG:NUMBER--
  v_counconceptrve NUMBER;		--OBTG:NUMBER--
  v_detailRVE VARCHAR2(400);
  v_amountrve  NUMBER;		--OBTG:NUMBER--
  v_conceptrve_id VARCHAR2(32);
  
BEGIN
  --  Update AD_PInstance
  --RAISE NOTICE '%','Updating PInstance - Processing ' || PInstance_ID ;
  --v_ResultStr := 'PInstanceNotFound';
  --PERFORM AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;

  BEGIN --BODY

	-- Get Parameters
	v_ResultStr := 'ReadingParameters';
	v_n_insertions := 0;    

	FOR Cur_Parameter IN
	(SELECT i.Record_ID,
	p.ParameterName,
	p.P_String,
	p.P_Number,
	p.P_Date,
	p.AD_Client_ID,
	p.AD_Org_ID,
	p.CreatedBy        
	FROM AD_PInstance i
	LEFT JOIN AD_PInstance_Para p
	   ON i.AD_PInstance_ID = p.AD_PInstance_ID
	WHERE i.AD_PInstance_ID = PInstance_ID
	ORDER BY p.SeqNo
	)
	LOOP      	  

	IF (Cur_Parameter.ParameterName = 'StartPeriod') THEN
	
		v_StartPeriod_ID := Cur_Parameter.P_String;      
		v_Client_ID := Cur_Parameter.AD_Client_ID;
		v_Org_ID := Cur_Parameter.AD_Org_ID;
		v_User_ID := Cur_Parameter.CreatedBy;

	ELSE  
	DBMS_OUTPUT.PUT_LINE('*** Unknown Parameter=' || Cur_Parameter.ParameterName) ;
	END IF;     

	END LOOP; -- Get Parameter



	/*IF (v_StartPeriod_StartDate > v_EndPeriod_StartDate) THEN

	RAISE_APPLICATION_ERROR(-20000, '@SSPR_EndStartPeriod@');

	END IF;*/


	IF (v_StartPeriod_ID IS NOT NULL) THEN
  
    --Delete the Rve of the table Rve detail

    select coalesce(((select count(*) from
    (SELECT DISTINCT CONCEPT_RVE FROM SFPR_RVE_DETAIL) SG)),0) into v_countsg from dual;
    
    IF (v_countsg>1)THEN
      
      RAISE_APPLICATION_ERROR(-20000, 'ERROR');
    
    ELSIF (v_countsg=1) THEN
        
        SELECT DISTINCT CONCEPT_RVE INTO V_Concept FROM SFPR_RVE_DETAIL;
        
        DELETE FROM SSPR_Concept_Amount WHERE  SSPR_Concept_ID = V_Concept
        AND C_Period_ID = v_StartPeriod_ID;

        DELETE FROM SSPR_Concept_Amount WHERE C_Period_ID = v_StartPeriod_ID
	AND  SSPR_Concept_ID IN (SELECT CONCEPT_PAYMENT_RVE_ID FROM SFPR_RVE_DETAIL);
    
    END IF;    

		--Create the RVE and Copy Concepts by employee
		FOR Cur_Period IN 
		(
		  SELECT DISTINCT C_BPARTNER_ID,CONCEPT_RVE
		  FROM SFPR_RVE_DETAIL 
		  WHERE STATUS_RVE='CO' AND PROCESSED = 'N'	
		)
		LOOP

		v_BPartner_ID:=Cur_Period.C_BPARTNER_ID;
		v_amount:=0;
		v_detailRVE:='';
		v_conceptrve_id:= Cur_Period.CONCEPT_RVE;
		v_EMPLOYEERVE_ID := null;
		
		FOR Cur_RveDetail IN 
		(
		  SELECT SFPR_EMPLOYEE_RVE_ID, SFPR_RVE_DETAIL_ID,DESCRIPTION
		  FROM SFPR_RVE_DETAIL 
		  WHERE STATUS_RVE='CO' AND PROCESSED = 'N'	
		  AND C_BPARTNER_ID = v_BPartner_ID
		)
		LOOP

			v_EMPLOYEERVE_ID:=Cur_RveDetail.SFPR_EMPLOYEE_RVE_ID;
			v_RVEDETAIL_ID:= Cur_RveDetail.SFPR_RVE_DETAIL_ID;
			v_detailRVE:= v_detailRVE ||  Cur_RveDetail.DESCRIPTION;
			
		END LOOP;

		v_amountrve:=0;
		--v_conceptrve_id:='';
		

			FOR Cur_Conceptrve IN 
			(SELECT C_BPARTNER_ID,CONCEPT_RVE,SUM(GRANDTOTAL) AS GRANDTOTAL,
				COALESCE(TO_NUMBER(SUM(AMOUNT)),0) AS AMOUNT
			 FROM SFPR_RVE_DETAIL 
			 WHERE STATUS_RVE='CO' AND PROCESSED = 'N'
			 AND C_BPARTNER_ID = v_BPartner_ID
			 --AND ISPAYMENTRVE = 'Y'
			 GROUP BY C_BPARTNER_ID,CONCEPT_RVE
			 
			)
			LOOP

				v_amount:= Cur_Conceptrve.GRANDTOTAL-Cur_Conceptrve.AMOUNT;
			        v_amountrve:= COALESCE(TO_NUMBER(Cur_Conceptrve.AMOUNT),0);
			        v_conceptrve_id:= Cur_Conceptrve.CONCEPT_RVE; 
			END LOOP;

			INSERT INTO SSPR_Concept_Amount
			(SSPR_Concept_Amount_ID, AD_Client_ID, AD_Org_ID, IsActive,
			Created, CreatedBy, Updated, UpdatedBy,
			SSPR_Concept_ID, C_BPartner_ID, C_Period_ID, Amount
			,EM_SFPR_RVE_DETAIL_ID,EM_SFPR_DESCRIPTION)
			VALUES
			(get_uuid(), v_Client_ID, v_Org_ID, 'Y',
			now(), v_User_ID, now(), v_User_ID,
			v_conceptrve_id, v_BPartner_ID, v_StartPeriod_ID, v_amount
			,v_RVEDETAIL_ID,v_detailRVE);      
      
			IF v_amountrve > 0 THEN

				FOR Cur_RveAmount IN 
				(
				  SELECT C_BPARTNER_ID,GRANDTOTAL,AMOUNT,CONCEPT_PAYMENT_RVE_ID,DESCRIPTION
				  FROM SFPR_RVE_DETAIL 
				  WHERE STATUS_RVE='CO' 
				  AND PROCESSED = 'N' 
				  AND AMOUNT > 0 
				  AND ISPAYMENTRVE = 'Y' 
				  AND 	C_BPARTNER_ID = v_BPartner_ID
				)
				LOOP

					IF Cur_RveAmount.CONCEPT_PAYMENT_RVE_ID IS NOT NULL THEN

						INSERT INTO SSPR_Concept_Amount
						(SSPR_Concept_Amount_ID, AD_Client_ID, AD_Org_ID, IsActive,
						Created, CreatedBy, Updated, UpdatedBy,
						SSPR_Concept_ID, C_BPartner_ID, C_Period_ID, Amount
						,EM_SFPR_RVE_DETAIL_ID,EM_SFPR_DESCRIPTION)
						VALUES
						(get_uuid(), v_Client_ID, v_Org_ID, 'Y',
						now(), v_User_ID, now(), v_User_ID,
						Cur_RveAmount.CONCEPT_PAYMENT_RVE_ID, Cur_RveAmount.C_BPartner_ID, v_StartPeriod_ID, 							Cur_RveAmount.AMOUNT
						,v_RVEDETAIL_ID,Cur_RveAmount.DESCRIPTION);
						
					END IF;
					
				END LOOP;
		
			END IF;

			UPDATE SFPR_EMPLOYEE_RVE SET PROCESSED = 'Y'
			WHERE SFPR_EMPLOYEE_RVE_ID  = v_EMPLOYEERVE_ID;
			--IN (SELECT SFPR_EMPLOYEE_RVE_ID FROM SFPR_RVE_DETAIL
			--				WHERE STATUS_RVE='CO' AND PROCESSED = 'Y'
			--				AND C_PERIOD_ID = v_StartPeriod_ID
			--				AND C_BPARTNER_ID = v_BPartner_ID);

			v_n_insertions:= v_n_insertions +1;
			

		END LOOP;

		FOR Cur_Status IN 
		(
		  SELECT DISTINCT C_BPARTNER_ID,CONCEPT_RVE,SFPR_EMPLOYEE_RVE_ID
		  FROM SFPR_RVE_DETAIL 
		  WHERE STATUS_RVE='CO' AND PROCESSED = 'N'	
		)
		LOOP
    
		    UPDATE SFPR_EMPLOYEE_RVE 
		    SET PROCESSED = 'Y'
	            WHERE SFPR_EMPLOYEE_RVE_ID  = Cur_Status.SFPR_EMPLOYEE_RVE_ID;
		      
		END LOOP;
    
    		UPDATE SFPR_RVE_DETAIL SET PERIOD_PROCESSED = v_StartPeriod_ID
		,STATUS_RVE='CO', PROCESSED = 'Y'
		WHERE STATUS_RVE='CO' AND PROCESSED = 'N' ;
		   
	END IF;
    
    v_Message := '@RowsInserted@: ' || v_n_insertions || '.';
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  
  END; --END BODY
  EXCEPTION
  WHEN OTHERS THEN
    v_ResultStr:= '@ERROR=' || SQLERRM;
    DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
    RETURN;
END SFPR_CREATE_CONCEPT_RVE
]]></body>
    </function>
  </database>
