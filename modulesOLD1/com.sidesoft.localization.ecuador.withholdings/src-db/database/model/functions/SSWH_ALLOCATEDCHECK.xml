<?xml version="1.0"?>
  <database name="FUNCTION SSWH_ALLOCATEDCHECK">
    <function name="SSWH_ALLOCATEDCHECK" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[/*************************************************************************
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2001-2006 Openbravo SLU
* All Rights Reserved.
* Sidesoft Cia. Ltda.
* Contributor(s):  Santiago SimbaÃ±a v.22122011
* Descripcion: Atada en el extracto bancario
* Agrupa las lineas del extracto bancaria por tercero y asigna un numero
* de cheque, de la cheque especificada en la cabecera del extracto bancario.
*
************************************************************************/
  -- Logistice
  v_ResultStr VARCHAR2(2000):='';
  v_Message VARCHAR2(2000):='';
  v_Record_ID VARCHAR2(32);
  v_Bankstatement_ID VARCHAR2(32);
  v_Client_ID VARCHAR2(32);
  v_Org_ID VARCHAR2(32);
  v_User_ID VARCHAR2(32);
  V_em_sswh_checkbook VARCHAR2(32);
  v_checkbookline_id VARCHAR2(32);
  TYPE RECORD IS REF CURSOR;
  Cur_Parameter RECORD;
  Cur_Partner RECORD;
  Cur_BankStaLine RECORD;
  v_NoCheck NUMBER;
  v_Partner_ID VARCHAR2(32);
  v_Partner_Rec VARCHAR2(32);--Recupera el partner del efecto
  Cur_PartnerAsc RECORD;
  n_insert NUMBER;
  
  
BEGIN			
	------ CAPTURA DE LOS PARAMETROS DE CLIENTES, ORGANIZACION Y USUARIOS ACTUALES -----
	--  Update AD_PInstance
	--
	DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || PInstance_ID) ;
	v_ResultStr := 'PInstanceNotFound';	
 AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;
	BEGIN	

	--RAISE NOTICE '%','ENTRO A LA FUNCION';
	FOR Cur_Parameter IN (SELECT i.Record_ID,
				p.ParameterName,
				p.P_String,
				p.P_Number,
				p.P_Date,
				p.AD_Client_ID,
				p.AD_Org_ID,
				p.CreatedBy        
			FROM AD_PInstance i
			LEFT JOIN AD_PInstance_Para p
			ON i.AD_PInstance_ID = p.AD_PInstance_ID
			WHERE i.AD_PInstance_ID = PInstance_ID
			ORDER BY p.SeqNo
	)
	LOOP     	  	                        
		v_Bankstatement_ID:=Cur_Parameter.Record_ID;
		v_Client_ID := Cur_Parameter.AD_Client_ID;
		v_Org_ID := Cur_Parameter.AD_Org_ID;
		v_User_ID := Cur_Parameter.CreatedBy;
	END LOOP;



	--Recogo el ID de la chequere de la cabecera
	SELECT  em_sswh_checkbook  INTO  V_em_sswh_checkbook 
	FROM c_bankstatement
	WHERE c_bankstatement_id= v_Bankstatement_ID;

	---Barre Las lineas buscando sino existe el tercero y lo actualiza por el tercero del efecto.
	FOR Cur_BankStaLine in 
	(
	SELECT c_bankstatementline_id, em_sswh_partner_id, LINE
	FROM  c_bankstatementline
	WHERE c_bankstatement_id = v_Bankstatement_ID 
	ORDER BY LINE
	)
	LOOP
		IF Cur_BankStaLine.em_sswh_partner_id IS NULL THEN
			--Verificamos si existe el usuario
			SELECT cdp.c_bpartner_id INTO v_Partner_Rec FROM c_bankstatementline cbl
			LEFT JOIN c_debt_payment cdp ON cbl.c_debt_payment_id=cdp.c_debt_payment_id
			LEFT JOIN c_bankstatement cb ON cbl.c_bankstatement_id=cb.c_bankstatement_id
			WHERE cbl.c_bankstatement_id=v_Bankstatement_ID AND cbl.c_bankstatementline_id=Cur_BankStaLine.c_bankstatementline_id;

			UPDATE c_bankstatementline cbl SET em_sswh_partner_id= v_Partner_Rec
			WHERE cbl.c_bankstatement_id=v_Bankstatement_ID AND cbl.c_bankstatementline_id=Cur_BankStaLine.c_bankstatementline_id;
			--AND em_sswh_print='N';
		END IF;
	END LOOP;


	----Recorre los Terceros de las lineas del extracto
	/*FOR Cur_PartnerAsc	IN (
				SELECT em_sswh_partner_id, LINE
				FROM c_bankstatementline
				WHERE c_bankstatement_id = v_Bankstatement_ID ---AND em_sswh_print = 'N' 
				ORDER BY LINE
				)
				LOOP*/
				n_insert := 0;
					--raise exception '%', Cur_PartnerAsc.line ||'-'||Cur_PartnerAsc.em_sswh_partner_id;
					FOR Cur_Partner in 
						(
						SELECT em_sswh_partner_id
						FROM c_bankstatementline
						WHERE c_bankstatement_id = v_Bankstatement_ID  AND em_sswh_print = 'N' -- AND em_sswh_partner_id = Cur_PartnerAsc.em_sswh_partner_id
						GROUP by em_sswh_partner_id 
						---ORDER by line
						)
						LOOP
							v_Partner_ID := Cur_Partner.em_sswh_partner_id;
							--raise exception '%', Cur_PartnerAsc.line ||'-'||Cur_PartnerAsc.em_sswh_partner_id||'-'||v_Partner_ID||'-'||v_Bankstatement_ID;
										
							---Obtengo el primer cheque DISPONIBLE de la chequera solicitada
							SELECT min(cast(linecheck as NUMBER))  INTO v_NoCheck 
							FROM  sswh_checkbookline
							WHERE sswh_checkbook_id= V_em_sswh_checkbook AND doc_line_status='P';
							
							--group by sswh_checkbookline_id;
							---
							SELECT sswh_checkbookline_id  INTO  v_checkbookline_id FROM  sswh_checkbookline
							WHERE sswh_checkbook_id= V_em_sswh_checkbook AND linecheck=v_NoCheck;
							--raise exception '%',V_em_sswh_checkbook||'-'||v_NoCheck||'-'||v_checkbookline_id;
							
							---raise notice '%','varible banksta' ||v_Bankstatement_ID;

							---Actualizo el linecheck de cada los terceros
							UPDATE c_bankstatementline SET em_sswh_linecheck=v_NoCheck
							WHERE em_sswh_partner_id=v_Partner_ID AND c_bankstatement_id = v_Bankstatement_ID;

							---Actualizo el estado del cheque Ocupado
							UPDATE sswh_checkbookline SET doc_line_status='C' ,generate_status='Y' 
							WHERE  sswh_checkbookline_id=v_checkbookline_id and doc_line_status='P' and linecheck=v_NoCheck;
							n_insert := n_insert +1;
						END LOOP;
				--END LOOP;

		UPDATE c_bankstatement SET EM_Sswh_Check='Y' WHERE c_bankstatement_id= v_Bankstatement_ID;

 v_Message := '@RowsInserted@: ' || n_insert || '.';
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
    
RETURN;	
END; --BODY
EXCEPTION
  WHEN OTHERS THEN
    v_ResultStr:= '@ERROR=' || SQLERRM;
    DBMS_OUTPUT.PUT_LINE(v_ResultStr ||'-'||n_insert) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
    RETURN;
END SSWH_ALLOCATEDCHECK
]]></body>
    </function>
  </database>
