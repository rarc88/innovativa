// ============================================================================
//
// Copyright (c) 2005-2016, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 3.1.4.r29781).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package org.openbravo.idl.initial_data_load.businesspartnerjob_0_1;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.openbravo.idl.proc.Value;
import org.openbravo.model.ad.system.Language;
import org.openbravo.model.common.businesspartner.TaxCategory;
import org.openbravo.model.common.geography.Country;
import org.openbravo.model.common.geography.Region;
import org.openbravo.model.common.invoice.InvoiceSchedule;
import org.openbravo.model.financialmgmt.payment.FIN_FinancialAccount;
import org.openbravo.model.financialmgmt.payment.PaymentTerm;
import org.openbravo.model.pricing.pricelist.PriceList;

import routines.TalendString;
import routines.system.TDieException;

//the import part of tJavaRow_9
//import java.util.List;

//the import part of tJavaRow_18
//import java.util.List;

/**
 * Job: BusinessPartnerJob Purpose: <br>
 * Description: <br>
 * 
 * @author
 * @version 3.1.4.r29781
 * @status
 */
@SuppressWarnings({ "rawtypes", "unchecked", "hiding" })
public class BusinessPartnerJob {

  public final Object obj = new Object();
  // create and load default properties
  private java.util.Properties defaultProps = new java.util.Properties();

  // create application properties with default
  private class ContextProperties extends java.util.Properties {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;

    public ContextProperties(java.util.Properties properties) {
      super(properties);
    }

    public ContextProperties() {
      super();
    }

    @SuppressWarnings("unused")
    public void synchronizeContext() {

      if (executeInsert != null) {

        this.setProperty("executeInsert", executeInsert.toString());

      }

      if (filename != null) {

        this.setProperty("filename", filename.toString());

      }

      if (numLinesOk != null) {

        this.setProperty("numLinesOk", numLinesOk.toString());

      }

      if (numLinesRejected != null) {

        this.setProperty("numLinesRejected", numLinesRejected.toString());

      }

      if (validationFailCause != null) {

        this.setProperty("validationFailCause", validationFailCause.toString());

      }

    }

    public Boolean executeInsert;
    public String filename;
    public Integer numLinesOk;
    public Integer numLinesRejected;
    public String validationFailCause;
  }

  private ContextProperties context = new ContextProperties();
  public Integer errorCode = null;
  private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
  private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
  public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

  private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
  private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
      new java.io.BufferedOutputStream(baos));

  public String getExceptionStackTrace() {
    errorMessagePS.flush();
    return baos.toString();
  }

  @SuppressWarnings("serial")
  private class TalendException extends Exception {
    private java.util.Map<String, Object> globalMap = null;
    private Exception e = null;
    private String currentComponent = null;

    private TalendException(Exception e, String errorComponent,
        final java.util.Map<String, Object> globalMap) {
      this.currentComponent = errorComponent;
      this.globalMap = globalMap;
      this.e = e;
    }

    @Override
    public void printStackTrace() {
      if (!(e instanceof TalendException || e instanceof TDieException)) {
        globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
        System.err.println("Exception in component " + currentComponent);
      }
      if (!(e instanceof TDieException)) {
        if (e instanceof TalendException) {
          e.printStackTrace();
        } else {
          e.printStackTrace();
          e.printStackTrace(errorMessagePS);
        }
      }
      if (!(e instanceof TalendException)) {
        try {
          for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
            if (m.getName().compareTo(currentComponent + "_error") == 0) {
              m.invoke(BusinessPartnerJob.this, new Object[] { e, globalMap });
              break;
            }
          }

          if (!(e instanceof TDieException)) {
          }
        } catch (java.lang.SecurityException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalArgumentException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalAccessException e) {
          this.e.printStackTrace();
        } catch (java.lang.reflect.InvocationTargetException e) {
          this.e.printStackTrace();
        }
      }
    }
  }

  public void tFileInputDelimited_1_error(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
    end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_11_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_11", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_11_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_11", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_1_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_10_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_10", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_18_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_18", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_9_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_9", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_16_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_16", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFileInputDelimited_1_onSubJobError(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
  }

  static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Searchkey;
    String Name;
    String FiscalName;
    String Description;
    String TaxID;
    String TaxExempt;
    String ReferenceNo;
    String Category;
    String Language;
    String Adderss1stLine;
    String Address2ndLine;
    String PostalCode;
    String City;
    String Region;
    String Country;
    String Phone;
    String AlternativePhone;
    String Fax;
    String ShipToAddress;
    String PayFromAddress;
    String InvoiceToAddress;
    String RemitToAddress;
    String ConsumptionDays;
    String ShowGeneric;
    String ShowIban;
    String BankAccountNo;
    String IBAN;
    String ContactUser;
    String Firstname;
    String Lastname;
    String ContactDescription;
    String Email;
    String Position;
    String ContactPhone;
    String ContactAlternativePhone;
    String ContactFax;
    String Vendor;
    String POPaymentMethod;
    String POPaymentTerms;
    String PurchasePriceList;
    String TaxCategory;
    String POFinancialAccount;
    String Customer;
    String CustomerPaymentMethod;
    String PaymentTerm;
    String PriceList;
    String soTaxCategory;
    String CustomerFinancialAccount;
    String soInvoiceSchedule;
    String soInvoicesTerms;
    String Employee;
    String IsSalesRepresentative;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Searchkey == null) ? 0 : this.Searchkey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row3Struct other = (row3Struct) obj;

      if (this.Searchkey == null) {
        if (other.Searchkey != null)
          return false;
      } else if (!this.Searchkey.equals(other.Searchkey))
        return false;

      return true;
    }

    public void copyDataTo(row3Struct other) {

      other.Organization = this.Organization;
      other.Searchkey = this.Searchkey;
      other.Name = this.Name;
      other.FiscalName = this.FiscalName;
      other.Description = this.Description;
      other.TaxID = this.TaxID;
      other.TaxExempt = this.TaxExempt;
      other.ReferenceNo = this.ReferenceNo;
      other.Category = this.Category;
      other.Language = this.Language;
      other.Adderss1stLine = this.Adderss1stLine;
      other.Address2ndLine = this.Address2ndLine;
      other.PostalCode = this.PostalCode;
      other.City = this.City;
      other.Region = this.Region;
      other.Country = this.Country;
      other.Phone = this.Phone;
      other.AlternativePhone = this.AlternativePhone;
      other.Fax = this.Fax;
      other.ShipToAddress = this.ShipToAddress;
      other.PayFromAddress = this.PayFromAddress;
      other.InvoiceToAddress = this.InvoiceToAddress;
      other.RemitToAddress = this.RemitToAddress;
      other.ConsumptionDays = this.ConsumptionDays;
      other.ShowGeneric = this.ShowGeneric;
      other.ShowIban = this.ShowIban;
      other.BankAccountNo = this.BankAccountNo;
      other.IBAN = this.IBAN;
      other.ContactUser = this.ContactUser;
      other.Firstname = this.Firstname;
      other.Lastname = this.Lastname;
      other.ContactDescription = this.ContactDescription;
      other.Email = this.Email;
      other.Position = this.Position;
      other.ContactPhone = this.ContactPhone;
      other.ContactAlternativePhone = this.ContactAlternativePhone;
      other.ContactFax = this.ContactFax;
      other.Vendor = this.Vendor;
      other.POPaymentMethod = this.POPaymentMethod;
      other.POPaymentTerms = this.POPaymentTerms;
      other.PurchasePriceList = this.PurchasePriceList;
      other.TaxCategory = this.TaxCategory;
      other.POFinancialAccount = this.POFinancialAccount;
      other.Customer = this.Customer;
      other.CustomerPaymentMethod = this.CustomerPaymentMethod;
      other.PaymentTerm = this.PaymentTerm;
      other.PriceList = this.PriceList;
      other.soTaxCategory = this.soTaxCategory;
      other.CustomerFinancialAccount = this.CustomerFinancialAccount;
      other.soInvoiceSchedule = this.soInvoiceSchedule;
      other.soInvoicesTerms = this.soInvoicesTerms;
      other.Employee = this.Employee;
      other.IsSalesRepresentative = this.IsSalesRepresentative;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row3Struct other) {

      other.Searchkey = this.Searchkey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Searchkey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Searchkey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.FiscalName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.FiscalName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxID = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxID = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxExempt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxExempt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ReferenceNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ReferenceNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Category = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Category = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Language = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Language = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Adderss1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Adderss1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Address2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Address2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.City = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.City = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Region = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Region = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Country = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Country = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Phone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Phone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AlternativePhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AlternativePhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Fax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Fax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShipToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShipToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PayFromAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PayFromAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InvoiceToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InvoiceToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.RemitToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.RemitToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ConsumptionDays = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ConsumptionDays = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShowGeneric = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShowGeneric = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShowIban = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShowIban = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankAccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankAccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IBAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IBAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactUser = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactUser = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Firstname = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Firstname = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Lastname = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Lastname = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Email = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Email = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Position = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Position = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactPhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactPhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactAlternativePhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactAlternativePhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactFax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactFax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Vendor = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Vendor = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POPaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POPaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POPaymentTerms = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POPaymentTerms = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PurchasePriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PurchasePriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POFinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POFinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Customer = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Customer = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CustomerPaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CustomerPaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentTerm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentTerm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soTaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soTaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CustomerFinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CustomerFinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soInvoiceSchedule = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soInvoiceSchedule = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soInvoicesTerms = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soInvoicesTerms = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Employee = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Employee = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSalesRepresentative = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSalesRepresentative = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Searchkey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Searchkey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.FiscalName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.FiscalName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxID == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxID.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxExempt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxExempt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ReferenceNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ReferenceNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Category == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Category.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Language == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Language.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Adderss1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Adderss1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Address2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Address2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.City == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.City.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Region == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Region.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Country == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Country.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Phone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Phone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AlternativePhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AlternativePhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Fax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Fax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShipToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShipToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PayFromAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PayFromAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InvoiceToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InvoiceToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.RemitToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.RemitToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ConsumptionDays == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ConsumptionDays.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShowGeneric == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShowGeneric.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShowIban == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShowIban.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankAccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankAccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IBAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IBAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactUser == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactUser.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Firstname == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Firstname.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Lastname == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Lastname.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Email == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Email.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Position == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Position.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactPhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactPhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactAlternativePhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactAlternativePhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactFax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactFax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Vendor == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Vendor.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POPaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POPaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POPaymentTerms == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POPaymentTerms.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PurchasePriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PurchasePriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POFinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POFinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Customer == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Customer.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CustomerPaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CustomerPaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentTerm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentTerm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soTaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soTaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CustomerFinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CustomerFinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soInvoiceSchedule == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soInvoiceSchedule.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soInvoicesTerms == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soInvoicesTerms.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Employee == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Employee.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSalesRepresentative == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSalesRepresentative.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Searchkey");
      sb.append("=");
      sb.append(String.valueOf(this.Searchkey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("FiscalName");
      sb.append("=");
      sb.append(String.valueOf(this.FiscalName));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("TaxID");
      sb.append("=");
      sb.append(String.valueOf(this.TaxID));

      sb.append(", ");

      sb.append("TaxExempt");
      sb.append("=");
      sb.append(String.valueOf(this.TaxExempt));

      sb.append(", ");

      sb.append("ReferenceNo");
      sb.append("=");
      sb.append(String.valueOf(this.ReferenceNo));

      sb.append(", ");

      sb.append("Category");
      sb.append("=");
      sb.append(String.valueOf(this.Category));

      sb.append(", ");

      sb.append("Language");
      sb.append("=");
      sb.append(String.valueOf(this.Language));

      sb.append(", ");

      sb.append("Adderss1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Adderss1stLine));

      sb.append(", ");

      sb.append("Address2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Address2ndLine));

      sb.append(", ");

      sb.append("PostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.PostalCode));

      sb.append(", ");

      sb.append("City");
      sb.append("=");
      sb.append(String.valueOf(this.City));

      sb.append(", ");

      sb.append("Region");
      sb.append("=");
      sb.append(String.valueOf(this.Region));

      sb.append(", ");

      sb.append("Country");
      sb.append("=");
      sb.append(String.valueOf(this.Country));

      sb.append(", ");

      sb.append("Phone");
      sb.append("=");
      sb.append(String.valueOf(this.Phone));

      sb.append(", ");

      sb.append("AlternativePhone");
      sb.append("=");
      sb.append(String.valueOf(this.AlternativePhone));

      sb.append(", ");

      sb.append("Fax");
      sb.append("=");
      sb.append(String.valueOf(this.Fax));

      sb.append(", ");

      sb.append("ShipToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.ShipToAddress));

      sb.append(", ");

      sb.append("PayFromAddress");
      sb.append("=");
      sb.append(String.valueOf(this.PayFromAddress));

      sb.append(", ");

      sb.append("InvoiceToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.InvoiceToAddress));

      sb.append(", ");

      sb.append("RemitToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.RemitToAddress));

      sb.append(", ");

      sb.append("ConsumptionDays");
      sb.append("=");
      sb.append(String.valueOf(this.ConsumptionDays));

      sb.append(", ");

      sb.append("ShowGeneric");
      sb.append("=");
      sb.append(String.valueOf(this.ShowGeneric));

      sb.append(", ");

      sb.append("ShowIban");
      sb.append("=");
      sb.append(String.valueOf(this.ShowIban));

      sb.append(", ");

      sb.append("BankAccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.BankAccountNo));

      sb.append(", ");

      sb.append("IBAN");
      sb.append("=");
      sb.append(String.valueOf(this.IBAN));

      sb.append(", ");

      sb.append("ContactUser");
      sb.append("=");
      sb.append(String.valueOf(this.ContactUser));

      sb.append(", ");

      sb.append("Firstname");
      sb.append("=");
      sb.append(String.valueOf(this.Firstname));

      sb.append(", ");

      sb.append("Lastname");
      sb.append("=");
      sb.append(String.valueOf(this.Lastname));

      sb.append(", ");

      sb.append("ContactDescription");
      sb.append("=");
      sb.append(String.valueOf(this.ContactDescription));

      sb.append(", ");

      sb.append("Email");
      sb.append("=");
      sb.append(String.valueOf(this.Email));

      sb.append(", ");

      sb.append("Position");
      sb.append("=");
      sb.append(String.valueOf(this.Position));

      sb.append(", ");

      sb.append("ContactPhone");
      sb.append("=");
      sb.append(String.valueOf(this.ContactPhone));

      sb.append(", ");

      sb.append("ContactAlternativePhone");
      sb.append("=");
      sb.append(String.valueOf(this.ContactAlternativePhone));

      sb.append(", ");

      sb.append("ContactFax");
      sb.append("=");
      sb.append(String.valueOf(this.ContactFax));

      sb.append(", ");

      sb.append("Vendor");
      sb.append("=");
      sb.append(String.valueOf(this.Vendor));

      sb.append(", ");

      sb.append("POPaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.POPaymentMethod));

      sb.append(", ");

      sb.append("POPaymentTerms");
      sb.append("=");
      sb.append(String.valueOf(this.POPaymentTerms));

      sb.append(", ");

      sb.append("PurchasePriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PurchasePriceList));

      sb.append(", ");

      sb.append("TaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.TaxCategory));

      sb.append(", ");

      sb.append("POFinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.POFinancialAccount));

      sb.append(", ");

      sb.append("Customer");
      sb.append("=");
      sb.append(String.valueOf(this.Customer));

      sb.append(", ");

      sb.append("CustomerPaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.CustomerPaymentMethod));

      sb.append(", ");

      sb.append("PaymentTerm");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentTerm));

      sb.append(", ");

      sb.append("PriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PriceList));

      sb.append(", ");

      sb.append("soTaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.soTaxCategory));

      sb.append(", ");

      sb.append("CustomerFinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.CustomerFinancialAccount));

      sb.append(", ");

      sb.append("soInvoiceSchedule");
      sb.append("=");
      sb.append(String.valueOf(this.soInvoiceSchedule));

      sb.append(", ");

      sb.append("soInvoicesTerms");
      sb.append("=");
      sb.append(String.valueOf(this.soInvoicesTerms));

      sb.append(", ");

      sb.append("Employee");
      sb.append("=");
      sb.append(String.valueOf(this.Employee));

      sb.append(", ");

      sb.append("IsSalesRepresentative");
      sb.append("=");
      sb.append(String.valueOf(this.IsSalesRepresentative));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Searchkey, other.Searchkey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Searchkey;
    String Name;
    String FiscalName;
    String Description;
    String TaxID;
    String TaxExempt;
    String ReferenceNo;
    String Category;
    String Language;
    String Adderss1stLine;
    String Address2ndLine;
    String PostalCode;
    String City;
    String Region;
    String Country;
    String Phone;
    String AlternativePhone;
    String Fax;
    String ShipToAddress;
    String PayFromAddress;
    String InvoiceToAddress;
    String RemitToAddress;
    String ConsumptionDays;
    String ShowGeneric;
    String ShowIban;
    String BankAccountNo;
    String IBAN;
    String ContactUser;
    String Firstname;
    String Lastname;
    String ContactDescription;
    String Email;
    String Position;
    String ContactPhone;
    String ContactAlternativePhone;
    String ContactFax;
    String Vendor;
    String POPaymentMethod;
    String POPaymentTerms;
    String PurchasePriceList;
    String TaxCategory;
    String POFinancialAccount;
    String Customer;
    String CustomerPaymentMethod;
    String PaymentTerm;
    String PriceList;
    String soTaxCategory;
    String CustomerFinancialAccount;
    String soInvoiceSchedule;
    String soInvoicesTerms;
    String Employee;
    String IsSalesRepresentative;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Searchkey == null) ? 0 : this.Searchkey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row19Struct other = (row19Struct) obj;

      if (this.Searchkey == null) {
        if (other.Searchkey != null)
          return false;
      } else if (!this.Searchkey.equals(other.Searchkey))
        return false;

      return true;
    }

    public void copyDataTo(row19Struct other) {

      other.Organization = this.Organization;
      other.Searchkey = this.Searchkey;
      other.Name = this.Name;
      other.FiscalName = this.FiscalName;
      other.Description = this.Description;
      other.TaxID = this.TaxID;
      other.TaxExempt = this.TaxExempt;
      other.ReferenceNo = this.ReferenceNo;
      other.Category = this.Category;
      other.Language = this.Language;
      other.Adderss1stLine = this.Adderss1stLine;
      other.Address2ndLine = this.Address2ndLine;
      other.PostalCode = this.PostalCode;
      other.City = this.City;
      other.Region = this.Region;
      other.Country = this.Country;
      other.Phone = this.Phone;
      other.AlternativePhone = this.AlternativePhone;
      other.Fax = this.Fax;
      other.ShipToAddress = this.ShipToAddress;
      other.PayFromAddress = this.PayFromAddress;
      other.InvoiceToAddress = this.InvoiceToAddress;
      other.RemitToAddress = this.RemitToAddress;
      other.ConsumptionDays = this.ConsumptionDays;
      other.ShowGeneric = this.ShowGeneric;
      other.ShowIban = this.ShowIban;
      other.BankAccountNo = this.BankAccountNo;
      other.IBAN = this.IBAN;
      other.ContactUser = this.ContactUser;
      other.Firstname = this.Firstname;
      other.Lastname = this.Lastname;
      other.ContactDescription = this.ContactDescription;
      other.Email = this.Email;
      other.Position = this.Position;
      other.ContactPhone = this.ContactPhone;
      other.ContactAlternativePhone = this.ContactAlternativePhone;
      other.ContactFax = this.ContactFax;
      other.Vendor = this.Vendor;
      other.POPaymentMethod = this.POPaymentMethod;
      other.POPaymentTerms = this.POPaymentTerms;
      other.PurchasePriceList = this.PurchasePriceList;
      other.TaxCategory = this.TaxCategory;
      other.POFinancialAccount = this.POFinancialAccount;
      other.Customer = this.Customer;
      other.CustomerPaymentMethod = this.CustomerPaymentMethod;
      other.PaymentTerm = this.PaymentTerm;
      other.PriceList = this.PriceList;
      other.soTaxCategory = this.soTaxCategory;
      other.CustomerFinancialAccount = this.CustomerFinancialAccount;
      other.soInvoiceSchedule = this.soInvoiceSchedule;
      other.soInvoicesTerms = this.soInvoicesTerms;
      other.Employee = this.Employee;
      other.IsSalesRepresentative = this.IsSalesRepresentative;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row19Struct other) {

      other.Searchkey = this.Searchkey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Searchkey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Searchkey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.FiscalName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.FiscalName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxID = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxID = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxExempt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxExempt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ReferenceNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ReferenceNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Category = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Category = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Language = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Language = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Adderss1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Adderss1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Address2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Address2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.City = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.City = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Region = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Region = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Country = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Country = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Phone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Phone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AlternativePhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AlternativePhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Fax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Fax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShipToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShipToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PayFromAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PayFromAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InvoiceToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InvoiceToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.RemitToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.RemitToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ConsumptionDays = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ConsumptionDays = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShowGeneric = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShowGeneric = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShowIban = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShowIban = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankAccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankAccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IBAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IBAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactUser = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactUser = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Firstname = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Firstname = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Lastname = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Lastname = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Email = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Email = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Position = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Position = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactPhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactPhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactAlternativePhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactAlternativePhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactFax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactFax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Vendor = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Vendor = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POPaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POPaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POPaymentTerms = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POPaymentTerms = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PurchasePriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PurchasePriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POFinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POFinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Customer = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Customer = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CustomerPaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CustomerPaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentTerm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentTerm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soTaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soTaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CustomerFinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CustomerFinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soInvoiceSchedule = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soInvoiceSchedule = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soInvoicesTerms = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soInvoicesTerms = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Employee = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Employee = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSalesRepresentative = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSalesRepresentative = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Searchkey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Searchkey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.FiscalName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.FiscalName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxID == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxID.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxExempt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxExempt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ReferenceNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ReferenceNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Category == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Category.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Language == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Language.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Adderss1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Adderss1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Address2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Address2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.City == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.City.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Region == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Region.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Country == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Country.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Phone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Phone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AlternativePhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AlternativePhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Fax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Fax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShipToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShipToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PayFromAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PayFromAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InvoiceToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InvoiceToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.RemitToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.RemitToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ConsumptionDays == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ConsumptionDays.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShowGeneric == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShowGeneric.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShowIban == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShowIban.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankAccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankAccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IBAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IBAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactUser == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactUser.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Firstname == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Firstname.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Lastname == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Lastname.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Email == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Email.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Position == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Position.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactPhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactPhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactAlternativePhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactAlternativePhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactFax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactFax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Vendor == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Vendor.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POPaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POPaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POPaymentTerms == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POPaymentTerms.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PurchasePriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PurchasePriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POFinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POFinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Customer == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Customer.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CustomerPaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CustomerPaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentTerm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentTerm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soTaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soTaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CustomerFinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CustomerFinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soInvoiceSchedule == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soInvoiceSchedule.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soInvoicesTerms == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soInvoicesTerms.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Employee == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Employee.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSalesRepresentative == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSalesRepresentative.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Searchkey");
      sb.append("=");
      sb.append(String.valueOf(this.Searchkey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("FiscalName");
      sb.append("=");
      sb.append(String.valueOf(this.FiscalName));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("TaxID");
      sb.append("=");
      sb.append(String.valueOf(this.TaxID));

      sb.append(", ");

      sb.append("TaxExempt");
      sb.append("=");
      sb.append(String.valueOf(this.TaxExempt));

      sb.append(", ");

      sb.append("ReferenceNo");
      sb.append("=");
      sb.append(String.valueOf(this.ReferenceNo));

      sb.append(", ");

      sb.append("Category");
      sb.append("=");
      sb.append(String.valueOf(this.Category));

      sb.append(", ");

      sb.append("Language");
      sb.append("=");
      sb.append(String.valueOf(this.Language));

      sb.append(", ");

      sb.append("Adderss1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Adderss1stLine));

      sb.append(", ");

      sb.append("Address2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Address2ndLine));

      sb.append(", ");

      sb.append("PostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.PostalCode));

      sb.append(", ");

      sb.append("City");
      sb.append("=");
      sb.append(String.valueOf(this.City));

      sb.append(", ");

      sb.append("Region");
      sb.append("=");
      sb.append(String.valueOf(this.Region));

      sb.append(", ");

      sb.append("Country");
      sb.append("=");
      sb.append(String.valueOf(this.Country));

      sb.append(", ");

      sb.append("Phone");
      sb.append("=");
      sb.append(String.valueOf(this.Phone));

      sb.append(", ");

      sb.append("AlternativePhone");
      sb.append("=");
      sb.append(String.valueOf(this.AlternativePhone));

      sb.append(", ");

      sb.append("Fax");
      sb.append("=");
      sb.append(String.valueOf(this.Fax));

      sb.append(", ");

      sb.append("ShipToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.ShipToAddress));

      sb.append(", ");

      sb.append("PayFromAddress");
      sb.append("=");
      sb.append(String.valueOf(this.PayFromAddress));

      sb.append(", ");

      sb.append("InvoiceToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.InvoiceToAddress));

      sb.append(", ");

      sb.append("RemitToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.RemitToAddress));

      sb.append(", ");

      sb.append("ConsumptionDays");
      sb.append("=");
      sb.append(String.valueOf(this.ConsumptionDays));

      sb.append(", ");

      sb.append("ShowGeneric");
      sb.append("=");
      sb.append(String.valueOf(this.ShowGeneric));

      sb.append(", ");

      sb.append("ShowIban");
      sb.append("=");
      sb.append(String.valueOf(this.ShowIban));

      sb.append(", ");

      sb.append("BankAccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.BankAccountNo));

      sb.append(", ");

      sb.append("IBAN");
      sb.append("=");
      sb.append(String.valueOf(this.IBAN));

      sb.append(", ");

      sb.append("ContactUser");
      sb.append("=");
      sb.append(String.valueOf(this.ContactUser));

      sb.append(", ");

      sb.append("Firstname");
      sb.append("=");
      sb.append(String.valueOf(this.Firstname));

      sb.append(", ");

      sb.append("Lastname");
      sb.append("=");
      sb.append(String.valueOf(this.Lastname));

      sb.append(", ");

      sb.append("ContactDescription");
      sb.append("=");
      sb.append(String.valueOf(this.ContactDescription));

      sb.append(", ");

      sb.append("Email");
      sb.append("=");
      sb.append(String.valueOf(this.Email));

      sb.append(", ");

      sb.append("Position");
      sb.append("=");
      sb.append(String.valueOf(this.Position));

      sb.append(", ");

      sb.append("ContactPhone");
      sb.append("=");
      sb.append(String.valueOf(this.ContactPhone));

      sb.append(", ");

      sb.append("ContactAlternativePhone");
      sb.append("=");
      sb.append(String.valueOf(this.ContactAlternativePhone));

      sb.append(", ");

      sb.append("ContactFax");
      sb.append("=");
      sb.append(String.valueOf(this.ContactFax));

      sb.append(", ");

      sb.append("Vendor");
      sb.append("=");
      sb.append(String.valueOf(this.Vendor));

      sb.append(", ");

      sb.append("POPaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.POPaymentMethod));

      sb.append(", ");

      sb.append("POPaymentTerms");
      sb.append("=");
      sb.append(String.valueOf(this.POPaymentTerms));

      sb.append(", ");

      sb.append("PurchasePriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PurchasePriceList));

      sb.append(", ");

      sb.append("TaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.TaxCategory));

      sb.append(", ");

      sb.append("POFinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.POFinancialAccount));

      sb.append(", ");

      sb.append("Customer");
      sb.append("=");
      sb.append(String.valueOf(this.Customer));

      sb.append(", ");

      sb.append("CustomerPaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.CustomerPaymentMethod));

      sb.append(", ");

      sb.append("PaymentTerm");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentTerm));

      sb.append(", ");

      sb.append("PriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PriceList));

      sb.append(", ");

      sb.append("soTaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.soTaxCategory));

      sb.append(", ");

      sb.append("CustomerFinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.CustomerFinancialAccount));

      sb.append(", ");

      sb.append("soInvoiceSchedule");
      sb.append("=");
      sb.append(String.valueOf(this.soInvoiceSchedule));

      sb.append(", ");

      sb.append("soInvoicesTerms");
      sb.append("=");
      sb.append(String.valueOf(this.soInvoicesTerms));

      sb.append(", ");

      sb.append("Employee");
      sb.append("=");
      sb.append(String.valueOf(this.Employee));

      sb.append(", ");

      sb.append("IsSalesRepresentative");
      sb.append("=");
      sb.append(String.valueOf(this.IsSalesRepresentative));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Searchkey, other.Searchkey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Searchkey;
    String Name;
    String FiscalName;
    String Description;
    String TaxID;
    String TaxExempt;
    String ReferenceNo;
    String Category;
    String Language;
    String Adderss1stLine;
    String Address2ndLine;
    String PostalCode;
    String City;
    String Region;
    String Country;
    String Phone;
    String AlternativePhone;
    String Fax;
    String ShipToAddress;
    String PayFromAddress;
    String InvoiceToAddress;
    String RemitToAddress;
    String ConsumptionDays;
    String ShowGeneric;
    String ShowIban;
    String BankAccountNo;
    String IBAN;
    String ContactUser;
    String Firstname;
    String Lastname;
    String ContactDescription;
    String Email;
    String Position;
    String ContactPhone;
    String ContactAlternativePhone;
    String ContactFax;
    String Vendor;
    String POPaymentMethod;
    String POPaymentTerms;
    String PurchasePriceList;
    String TaxCategory;
    String POFinancialAccount;
    String Customer;
    String CustomerPaymentMethod;
    String PaymentTerm;
    String PriceList;
    String soTaxCategory;
    String CustomerFinancialAccount;
    String soInvoiceSchedule;
    String soInvoicesTerms;
    String Employee;
    String IsSalesRepresentative;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Searchkey == null) ? 0 : this.Searchkey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row2Struct other = (row2Struct) obj;

      if (this.Searchkey == null) {
        if (other.Searchkey != null)
          return false;
      } else if (!this.Searchkey.equals(other.Searchkey))
        return false;

      return true;
    }

    public void copyDataTo(row2Struct other) {

      other.Organization = this.Organization;
      other.Searchkey = this.Searchkey;
      other.Name = this.Name;
      other.FiscalName = this.FiscalName;
      other.Description = this.Description;
      other.TaxID = this.TaxID;
      other.TaxExempt = this.TaxExempt;
      other.ReferenceNo = this.ReferenceNo;
      other.Category = this.Category;
      other.Language = this.Language;
      other.Adderss1stLine = this.Adderss1stLine;
      other.Address2ndLine = this.Address2ndLine;
      other.PostalCode = this.PostalCode;
      other.City = this.City;
      other.Region = this.Region;
      other.Country = this.Country;
      other.Phone = this.Phone;
      other.AlternativePhone = this.AlternativePhone;
      other.Fax = this.Fax;
      other.ShipToAddress = this.ShipToAddress;
      other.PayFromAddress = this.PayFromAddress;
      other.InvoiceToAddress = this.InvoiceToAddress;
      other.RemitToAddress = this.RemitToAddress;
      other.ConsumptionDays = this.ConsumptionDays;
      other.ShowGeneric = this.ShowGeneric;
      other.ShowIban = this.ShowIban;
      other.BankAccountNo = this.BankAccountNo;
      other.IBAN = this.IBAN;
      other.ContactUser = this.ContactUser;
      other.Firstname = this.Firstname;
      other.Lastname = this.Lastname;
      other.ContactDescription = this.ContactDescription;
      other.Email = this.Email;
      other.Position = this.Position;
      other.ContactPhone = this.ContactPhone;
      other.ContactAlternativePhone = this.ContactAlternativePhone;
      other.ContactFax = this.ContactFax;
      other.Vendor = this.Vendor;
      other.POPaymentMethod = this.POPaymentMethod;
      other.POPaymentTerms = this.POPaymentTerms;
      other.PurchasePriceList = this.PurchasePriceList;
      other.TaxCategory = this.TaxCategory;
      other.POFinancialAccount = this.POFinancialAccount;
      other.Customer = this.Customer;
      other.CustomerPaymentMethod = this.CustomerPaymentMethod;
      other.PaymentTerm = this.PaymentTerm;
      other.PriceList = this.PriceList;
      other.soTaxCategory = this.soTaxCategory;
      other.CustomerFinancialAccount = this.CustomerFinancialAccount;
      other.soInvoiceSchedule = this.soInvoiceSchedule;
      other.soInvoicesTerms = this.soInvoicesTerms;
      other.Employee = this.Employee;
      other.IsSalesRepresentative = this.IsSalesRepresentative;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row2Struct other) {

      other.Searchkey = this.Searchkey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Searchkey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Searchkey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.FiscalName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.FiscalName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxID = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxID = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxExempt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxExempt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ReferenceNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ReferenceNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Category = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Category = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Language = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Language = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Adderss1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Adderss1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Address2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Address2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.City = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.City = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Region = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Region = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Country = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Country = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Phone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Phone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AlternativePhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AlternativePhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Fax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Fax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShipToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShipToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PayFromAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PayFromAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InvoiceToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InvoiceToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.RemitToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.RemitToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ConsumptionDays = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ConsumptionDays = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShowGeneric = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShowGeneric = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShowIban = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShowIban = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankAccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankAccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IBAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IBAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactUser = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactUser = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Firstname = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Firstname = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Lastname = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Lastname = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Email = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Email = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Position = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Position = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactPhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactPhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactAlternativePhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactAlternativePhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactFax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactFax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Vendor = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Vendor = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POPaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POPaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POPaymentTerms = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POPaymentTerms = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PurchasePriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PurchasePriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POFinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POFinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Customer = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Customer = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CustomerPaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CustomerPaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentTerm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentTerm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soTaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soTaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CustomerFinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CustomerFinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soInvoiceSchedule = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soInvoiceSchedule = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soInvoicesTerms = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soInvoicesTerms = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Employee = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Employee = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSalesRepresentative = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSalesRepresentative = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Searchkey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Searchkey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.FiscalName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.FiscalName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxID == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxID.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxExempt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxExempt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ReferenceNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ReferenceNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Category == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Category.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Language == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Language.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Adderss1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Adderss1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Address2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Address2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.City == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.City.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Region == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Region.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Country == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Country.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Phone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Phone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AlternativePhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AlternativePhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Fax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Fax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShipToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShipToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PayFromAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PayFromAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InvoiceToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InvoiceToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.RemitToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.RemitToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ConsumptionDays == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ConsumptionDays.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShowGeneric == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShowGeneric.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShowIban == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShowIban.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankAccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankAccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IBAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IBAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactUser == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactUser.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Firstname == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Firstname.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Lastname == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Lastname.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Email == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Email.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Position == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Position.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactPhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactPhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactAlternativePhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactAlternativePhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactFax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactFax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Vendor == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Vendor.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POPaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POPaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POPaymentTerms == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POPaymentTerms.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PurchasePriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PurchasePriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POFinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POFinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Customer == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Customer.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CustomerPaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CustomerPaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentTerm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentTerm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soTaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soTaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CustomerFinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CustomerFinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soInvoiceSchedule == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soInvoiceSchedule.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soInvoicesTerms == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soInvoicesTerms.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Employee == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Employee.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSalesRepresentative == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSalesRepresentative.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Searchkey");
      sb.append("=");
      sb.append(String.valueOf(this.Searchkey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("FiscalName");
      sb.append("=");
      sb.append(String.valueOf(this.FiscalName));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("TaxID");
      sb.append("=");
      sb.append(String.valueOf(this.TaxID));

      sb.append(", ");

      sb.append("TaxExempt");
      sb.append("=");
      sb.append(String.valueOf(this.TaxExempt));

      sb.append(", ");

      sb.append("ReferenceNo");
      sb.append("=");
      sb.append(String.valueOf(this.ReferenceNo));

      sb.append(", ");

      sb.append("Category");
      sb.append("=");
      sb.append(String.valueOf(this.Category));

      sb.append(", ");

      sb.append("Language");
      sb.append("=");
      sb.append(String.valueOf(this.Language));

      sb.append(", ");

      sb.append("Adderss1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Adderss1stLine));

      sb.append(", ");

      sb.append("Address2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Address2ndLine));

      sb.append(", ");

      sb.append("PostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.PostalCode));

      sb.append(", ");

      sb.append("City");
      sb.append("=");
      sb.append(String.valueOf(this.City));

      sb.append(", ");

      sb.append("Region");
      sb.append("=");
      sb.append(String.valueOf(this.Region));

      sb.append(", ");

      sb.append("Country");
      sb.append("=");
      sb.append(String.valueOf(this.Country));

      sb.append(", ");

      sb.append("Phone");
      sb.append("=");
      sb.append(String.valueOf(this.Phone));

      sb.append(", ");

      sb.append("AlternativePhone");
      sb.append("=");
      sb.append(String.valueOf(this.AlternativePhone));

      sb.append(", ");

      sb.append("Fax");
      sb.append("=");
      sb.append(String.valueOf(this.Fax));

      sb.append(", ");

      sb.append("ShipToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.ShipToAddress));

      sb.append(", ");

      sb.append("PayFromAddress");
      sb.append("=");
      sb.append(String.valueOf(this.PayFromAddress));

      sb.append(", ");

      sb.append("InvoiceToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.InvoiceToAddress));

      sb.append(", ");

      sb.append("RemitToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.RemitToAddress));

      sb.append(", ");

      sb.append("ConsumptionDays");
      sb.append("=");
      sb.append(String.valueOf(this.ConsumptionDays));

      sb.append(", ");

      sb.append("ShowGeneric");
      sb.append("=");
      sb.append(String.valueOf(this.ShowGeneric));

      sb.append(", ");

      sb.append("ShowIban");
      sb.append("=");
      sb.append(String.valueOf(this.ShowIban));

      sb.append(", ");

      sb.append("BankAccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.BankAccountNo));

      sb.append(", ");

      sb.append("IBAN");
      sb.append("=");
      sb.append(String.valueOf(this.IBAN));

      sb.append(", ");

      sb.append("ContactUser");
      sb.append("=");
      sb.append(String.valueOf(this.ContactUser));

      sb.append(", ");

      sb.append("Firstname");
      sb.append("=");
      sb.append(String.valueOf(this.Firstname));

      sb.append(", ");

      sb.append("Lastname");
      sb.append("=");
      sb.append(String.valueOf(this.Lastname));

      sb.append(", ");

      sb.append("ContactDescription");
      sb.append("=");
      sb.append(String.valueOf(this.ContactDescription));

      sb.append(", ");

      sb.append("Email");
      sb.append("=");
      sb.append(String.valueOf(this.Email));

      sb.append(", ");

      sb.append("Position");
      sb.append("=");
      sb.append(String.valueOf(this.Position));

      sb.append(", ");

      sb.append("ContactPhone");
      sb.append("=");
      sb.append(String.valueOf(this.ContactPhone));

      sb.append(", ");

      sb.append("ContactAlternativePhone");
      sb.append("=");
      sb.append(String.valueOf(this.ContactAlternativePhone));

      sb.append(", ");

      sb.append("ContactFax");
      sb.append("=");
      sb.append(String.valueOf(this.ContactFax));

      sb.append(", ");

      sb.append("Vendor");
      sb.append("=");
      sb.append(String.valueOf(this.Vendor));

      sb.append(", ");

      sb.append("POPaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.POPaymentMethod));

      sb.append(", ");

      sb.append("POPaymentTerms");
      sb.append("=");
      sb.append(String.valueOf(this.POPaymentTerms));

      sb.append(", ");

      sb.append("PurchasePriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PurchasePriceList));

      sb.append(", ");

      sb.append("TaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.TaxCategory));

      sb.append(", ");

      sb.append("POFinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.POFinancialAccount));

      sb.append(", ");

      sb.append("Customer");
      sb.append("=");
      sb.append(String.valueOf(this.Customer));

      sb.append(", ");

      sb.append("CustomerPaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.CustomerPaymentMethod));

      sb.append(", ");

      sb.append("PaymentTerm");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentTerm));

      sb.append(", ");

      sb.append("PriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PriceList));

      sb.append(", ");

      sb.append("soTaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.soTaxCategory));

      sb.append(", ");

      sb.append("CustomerFinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.CustomerFinancialAccount));

      sb.append(", ");

      sb.append("soInvoiceSchedule");
      sb.append("=");
      sb.append(String.valueOf(this.soInvoiceSchedule));

      sb.append(", ");

      sb.append("soInvoicesTerms");
      sb.append("=");
      sb.append(String.valueOf(this.soInvoicesTerms));

      sb.append(", ");

      sb.append("Employee");
      sb.append("=");
      sb.append(String.valueOf(this.Employee));

      sb.append(", ");

      sb.append("IsSalesRepresentative");
      sb.append("=");
      sb.append(String.valueOf(this.IsSalesRepresentative));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Searchkey, other.Searchkey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Searchkey;
    String Name;
    String FiscalName;
    String Description;
    String TaxID;
    String TaxExempt;
    String ReferenceNo;
    String Category;
    String Language;
    String Adderss1stLine;
    String Address2ndLine;
    String PostalCode;
    String City;
    String Region;
    String Country;
    String Phone;
    String AlternativePhone;
    String Fax;
    String ShipToAddress;
    String PayFromAddress;
    String InvoiceToAddress;
    String RemitToAddress;
    String ConsumptionDays;
    String ShowGeneric;
    String ShowIban;
    String BankAccountNo;
    String IBAN;
    String ContactUser;
    String Firstname;
    String Lastname;
    String ContactDescription;
    String Email;
    String Position;
    String ContactPhone;
    String ContactAlternativePhone;
    String ContactFax;
    String Vendor;
    String POPaymentMethod;
    String POPaymentTerms;
    String PurchasePriceList;
    String TaxCategory;
    String POFinancialAccount;
    String Customer;
    String CustomerPaymentMethod;
    String PaymentTerm;
    String PriceList;
    String soTaxCategory;
    String CustomerFinancialAccount;
    String soInvoiceSchedule;
    String soInvoicesTerms;
    String Employee;
    String IsSalesRepresentative;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Searchkey == null) ? 0 : this.Searchkey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row1Struct other = (row1Struct) obj;

      if (this.Searchkey == null) {
        if (other.Searchkey != null)
          return false;
      } else if (!this.Searchkey.equals(other.Searchkey))
        return false;

      return true;
    }

    public void copyDataTo(row1Struct other) {

      other.Organization = this.Organization;
      other.Searchkey = this.Searchkey;
      other.Name = this.Name;
      other.FiscalName = this.FiscalName;
      other.Description = this.Description;
      other.TaxID = this.TaxID;
      other.TaxExempt = this.TaxExempt;
      other.ReferenceNo = this.ReferenceNo;
      other.Category = this.Category;
      other.Language = this.Language;
      other.Adderss1stLine = this.Adderss1stLine;
      other.Address2ndLine = this.Address2ndLine;
      other.PostalCode = this.PostalCode;
      other.City = this.City;
      other.Region = this.Region;
      other.Country = this.Country;
      other.Phone = this.Phone;
      other.AlternativePhone = this.AlternativePhone;
      other.Fax = this.Fax;
      other.ShipToAddress = this.ShipToAddress;
      other.PayFromAddress = this.PayFromAddress;
      other.InvoiceToAddress = this.InvoiceToAddress;
      other.RemitToAddress = this.RemitToAddress;
      other.ConsumptionDays = this.ConsumptionDays;
      other.ShowGeneric = this.ShowGeneric;
      other.ShowIban = this.ShowIban;
      other.BankAccountNo = this.BankAccountNo;
      other.IBAN = this.IBAN;
      other.ContactUser = this.ContactUser;
      other.Firstname = this.Firstname;
      other.Lastname = this.Lastname;
      other.ContactDescription = this.ContactDescription;
      other.Email = this.Email;
      other.Position = this.Position;
      other.ContactPhone = this.ContactPhone;
      other.ContactAlternativePhone = this.ContactAlternativePhone;
      other.ContactFax = this.ContactFax;
      other.Vendor = this.Vendor;
      other.POPaymentMethod = this.POPaymentMethod;
      other.POPaymentTerms = this.POPaymentTerms;
      other.PurchasePriceList = this.PurchasePriceList;
      other.TaxCategory = this.TaxCategory;
      other.POFinancialAccount = this.POFinancialAccount;
      other.Customer = this.Customer;
      other.CustomerPaymentMethod = this.CustomerPaymentMethod;
      other.PaymentTerm = this.PaymentTerm;
      other.PriceList = this.PriceList;
      other.soTaxCategory = this.soTaxCategory;
      other.CustomerFinancialAccount = this.CustomerFinancialAccount;
      other.soInvoiceSchedule = this.soInvoiceSchedule;
      other.soInvoicesTerms = this.soInvoicesTerms;
      other.Employee = this.Employee;
      other.IsSalesRepresentative = this.IsSalesRepresentative;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row1Struct other) {

      other.Searchkey = this.Searchkey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Searchkey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Searchkey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.FiscalName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.FiscalName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxID = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxID = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxExempt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxExempt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ReferenceNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ReferenceNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Category = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Category = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Language = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Language = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Adderss1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Adderss1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Address2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Address2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.City = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.City = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Region = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Region = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Country = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Country = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Phone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Phone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AlternativePhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AlternativePhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Fax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Fax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShipToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShipToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PayFromAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PayFromAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InvoiceToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InvoiceToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.RemitToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.RemitToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ConsumptionDays = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ConsumptionDays = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShowGeneric = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShowGeneric = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShowIban = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShowIban = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankAccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankAccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IBAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IBAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactUser = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactUser = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Firstname = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Firstname = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Lastname = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Lastname = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Email = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Email = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Position = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Position = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactPhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactPhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactAlternativePhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactAlternativePhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactFax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactFax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Vendor = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Vendor = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POPaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POPaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POPaymentTerms = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POPaymentTerms = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PurchasePriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PurchasePriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POFinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POFinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Customer = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Customer = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CustomerPaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CustomerPaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentTerm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentTerm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soTaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soTaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CustomerFinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CustomerFinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soInvoiceSchedule = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soInvoiceSchedule = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soInvoicesTerms = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soInvoicesTerms = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Employee = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Employee = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSalesRepresentative = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSalesRepresentative = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Searchkey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Searchkey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.FiscalName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.FiscalName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxID == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxID.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxExempt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxExempt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ReferenceNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ReferenceNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Category == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Category.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Language == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Language.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Adderss1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Adderss1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Address2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Address2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.City == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.City.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Region == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Region.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Country == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Country.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Phone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Phone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AlternativePhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AlternativePhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Fax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Fax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShipToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShipToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PayFromAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PayFromAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InvoiceToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InvoiceToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.RemitToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.RemitToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ConsumptionDays == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ConsumptionDays.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShowGeneric == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShowGeneric.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShowIban == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShowIban.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankAccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankAccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IBAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IBAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactUser == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactUser.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Firstname == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Firstname.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Lastname == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Lastname.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Email == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Email.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Position == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Position.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactPhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactPhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactAlternativePhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactAlternativePhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactFax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactFax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Vendor == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Vendor.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POPaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POPaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POPaymentTerms == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POPaymentTerms.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PurchasePriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PurchasePriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POFinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POFinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Customer == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Customer.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CustomerPaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CustomerPaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentTerm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentTerm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soTaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soTaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CustomerFinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CustomerFinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soInvoiceSchedule == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soInvoiceSchedule.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soInvoicesTerms == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soInvoicesTerms.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Employee == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Employee.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSalesRepresentative == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSalesRepresentative.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Searchkey");
      sb.append("=");
      sb.append(String.valueOf(this.Searchkey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("FiscalName");
      sb.append("=");
      sb.append(String.valueOf(this.FiscalName));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("TaxID");
      sb.append("=");
      sb.append(String.valueOf(this.TaxID));

      sb.append(", ");

      sb.append("TaxExempt");
      sb.append("=");
      sb.append(String.valueOf(this.TaxExempt));

      sb.append(", ");

      sb.append("ReferenceNo");
      sb.append("=");
      sb.append(String.valueOf(this.ReferenceNo));

      sb.append(", ");

      sb.append("Category");
      sb.append("=");
      sb.append(String.valueOf(this.Category));

      sb.append(", ");

      sb.append("Language");
      sb.append("=");
      sb.append(String.valueOf(this.Language));

      sb.append(", ");

      sb.append("Adderss1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Adderss1stLine));

      sb.append(", ");

      sb.append("Address2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Address2ndLine));

      sb.append(", ");

      sb.append("PostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.PostalCode));

      sb.append(", ");

      sb.append("City");
      sb.append("=");
      sb.append(String.valueOf(this.City));

      sb.append(", ");

      sb.append("Region");
      sb.append("=");
      sb.append(String.valueOf(this.Region));

      sb.append(", ");

      sb.append("Country");
      sb.append("=");
      sb.append(String.valueOf(this.Country));

      sb.append(", ");

      sb.append("Phone");
      sb.append("=");
      sb.append(String.valueOf(this.Phone));

      sb.append(", ");

      sb.append("AlternativePhone");
      sb.append("=");
      sb.append(String.valueOf(this.AlternativePhone));

      sb.append(", ");

      sb.append("Fax");
      sb.append("=");
      sb.append(String.valueOf(this.Fax));

      sb.append(", ");

      sb.append("ShipToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.ShipToAddress));

      sb.append(", ");

      sb.append("PayFromAddress");
      sb.append("=");
      sb.append(String.valueOf(this.PayFromAddress));

      sb.append(", ");

      sb.append("InvoiceToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.InvoiceToAddress));

      sb.append(", ");

      sb.append("RemitToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.RemitToAddress));

      sb.append(", ");

      sb.append("ConsumptionDays");
      sb.append("=");
      sb.append(String.valueOf(this.ConsumptionDays));

      sb.append(", ");

      sb.append("ShowGeneric");
      sb.append("=");
      sb.append(String.valueOf(this.ShowGeneric));

      sb.append(", ");

      sb.append("ShowIban");
      sb.append("=");
      sb.append(String.valueOf(this.ShowIban));

      sb.append(", ");

      sb.append("BankAccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.BankAccountNo));

      sb.append(", ");

      sb.append("IBAN");
      sb.append("=");
      sb.append(String.valueOf(this.IBAN));

      sb.append(", ");

      sb.append("ContactUser");
      sb.append("=");
      sb.append(String.valueOf(this.ContactUser));

      sb.append(", ");

      sb.append("Firstname");
      sb.append("=");
      sb.append(String.valueOf(this.Firstname));

      sb.append(", ");

      sb.append("Lastname");
      sb.append("=");
      sb.append(String.valueOf(this.Lastname));

      sb.append(", ");

      sb.append("ContactDescription");
      sb.append("=");
      sb.append(String.valueOf(this.ContactDescription));

      sb.append(", ");

      sb.append("Email");
      sb.append("=");
      sb.append(String.valueOf(this.Email));

      sb.append(", ");

      sb.append("Position");
      sb.append("=");
      sb.append(String.valueOf(this.Position));

      sb.append(", ");

      sb.append("ContactPhone");
      sb.append("=");
      sb.append(String.valueOf(this.ContactPhone));

      sb.append(", ");

      sb.append("ContactAlternativePhone");
      sb.append("=");
      sb.append(String.valueOf(this.ContactAlternativePhone));

      sb.append(", ");

      sb.append("ContactFax");
      sb.append("=");
      sb.append(String.valueOf(this.ContactFax));

      sb.append(", ");

      sb.append("Vendor");
      sb.append("=");
      sb.append(String.valueOf(this.Vendor));

      sb.append(", ");

      sb.append("POPaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.POPaymentMethod));

      sb.append(", ");

      sb.append("POPaymentTerms");
      sb.append("=");
      sb.append(String.valueOf(this.POPaymentTerms));

      sb.append(", ");

      sb.append("PurchasePriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PurchasePriceList));

      sb.append(", ");

      sb.append("TaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.TaxCategory));

      sb.append(", ");

      sb.append("POFinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.POFinancialAccount));

      sb.append(", ");

      sb.append("Customer");
      sb.append("=");
      sb.append(String.valueOf(this.Customer));

      sb.append(", ");

      sb.append("CustomerPaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.CustomerPaymentMethod));

      sb.append(", ");

      sb.append("PaymentTerm");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentTerm));

      sb.append(", ");

      sb.append("PriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PriceList));

      sb.append(", ");

      sb.append("soTaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.soTaxCategory));

      sb.append(", ");

      sb.append("CustomerFinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.CustomerFinancialAccount));

      sb.append(", ");

      sb.append("soInvoiceSchedule");
      sb.append("=");
      sb.append(String.valueOf(this.soInvoiceSchedule));

      sb.append(", ");

      sb.append("soInvoicesTerms");
      sb.append("=");
      sb.append(String.valueOf(this.soInvoicesTerms));

      sb.append(", ");

      sb.append("Employee");
      sb.append("=");
      sb.append(String.valueOf(this.Employee));

      sb.append(", ");

      sb.append("IsSalesRepresentative");
      sb.append("=");
      sb.append(String.valueOf(this.IsSalesRepresentative));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Searchkey, other.Searchkey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Searchkey;
    String Name;
    String FiscalName;
    String Description;
    String TaxID;
    String TaxExempt;
    String ReferenceNo;
    String Category;
    String Language;
    String Adderss1stLine;
    String Address2ndLine;
    String PostalCode;
    String City;
    String Region;
    String Country;
    String Phone;
    String AlternativePhone;
    String Fax;
    String ShipToAddress;
    String PayFromAddress;
    String InvoiceToAddress;
    String RemitToAddress;
    String ConsumptionDays;
    String ShowGeneric;
    String ShowIban;
    String BankAccountNo;
    String IBAN;
    String ContactUser;
    String Firstname;
    String Lastname;
    String ContactDescription;
    String Email;
    String Position;
    String ContactPhone;
    String ContactAlternativePhone;
    String ContactFax;
    String Vendor;
    String POPaymentMethod;
    String POPaymentTerms;
    String PurchasePriceList;
    String TaxCategory;
    String POFinancialAccount;
    String Customer;
    String CustomerPaymentMethod;
    String PaymentTerm;
    String PriceList;
    String soTaxCategory;
    String CustomerFinancialAccount;
    String soInvoiceSchedule;
    String soInvoicesTerms;
    String Employee;
    String IsSalesRepresentative;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Searchkey == null) ? 0 : this.Searchkey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row23Struct other = (row23Struct) obj;

      if (this.Searchkey == null) {
        if (other.Searchkey != null)
          return false;
      } else if (!this.Searchkey.equals(other.Searchkey))
        return false;

      return true;
    }

    public void copyDataTo(row23Struct other) {

      other.Organization = this.Organization;
      other.Searchkey = this.Searchkey;
      other.Name = this.Name;
      other.FiscalName = this.FiscalName;
      other.Description = this.Description;
      other.TaxID = this.TaxID;
      other.TaxExempt = this.TaxExempt;
      other.ReferenceNo = this.ReferenceNo;
      other.Category = this.Category;
      other.Language = this.Language;
      other.Adderss1stLine = this.Adderss1stLine;
      other.Address2ndLine = this.Address2ndLine;
      other.PostalCode = this.PostalCode;
      other.City = this.City;
      other.Region = this.Region;
      other.Country = this.Country;
      other.Phone = this.Phone;
      other.AlternativePhone = this.AlternativePhone;
      other.Fax = this.Fax;
      other.ShipToAddress = this.ShipToAddress;
      other.PayFromAddress = this.PayFromAddress;
      other.InvoiceToAddress = this.InvoiceToAddress;
      other.RemitToAddress = this.RemitToAddress;
      other.ConsumptionDays = this.ConsumptionDays;
      other.ShowGeneric = this.ShowGeneric;
      other.ShowIban = this.ShowIban;
      other.BankAccountNo = this.BankAccountNo;
      other.IBAN = this.IBAN;
      other.ContactUser = this.ContactUser;
      other.Firstname = this.Firstname;
      other.Lastname = this.Lastname;
      other.ContactDescription = this.ContactDescription;
      other.Email = this.Email;
      other.Position = this.Position;
      other.ContactPhone = this.ContactPhone;
      other.ContactAlternativePhone = this.ContactAlternativePhone;
      other.ContactFax = this.ContactFax;
      other.Vendor = this.Vendor;
      other.POPaymentMethod = this.POPaymentMethod;
      other.POPaymentTerms = this.POPaymentTerms;
      other.PurchasePriceList = this.PurchasePriceList;
      other.TaxCategory = this.TaxCategory;
      other.POFinancialAccount = this.POFinancialAccount;
      other.Customer = this.Customer;
      other.CustomerPaymentMethod = this.CustomerPaymentMethod;
      other.PaymentTerm = this.PaymentTerm;
      other.PriceList = this.PriceList;
      other.soTaxCategory = this.soTaxCategory;
      other.CustomerFinancialAccount = this.CustomerFinancialAccount;
      other.soInvoiceSchedule = this.soInvoiceSchedule;
      other.soInvoicesTerms = this.soInvoicesTerms;
      other.Employee = this.Employee;
      other.IsSalesRepresentative = this.IsSalesRepresentative;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row23Struct other) {

      other.Searchkey = this.Searchkey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Searchkey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Searchkey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.FiscalName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.FiscalName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxID = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxID = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxExempt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxExempt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ReferenceNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ReferenceNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Category = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Category = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Language = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Language = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Adderss1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Adderss1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Address2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Address2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.City = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.City = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Region = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Region = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Country = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Country = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Phone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Phone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AlternativePhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AlternativePhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Fax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Fax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShipToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShipToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PayFromAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PayFromAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InvoiceToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InvoiceToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.RemitToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.RemitToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ConsumptionDays = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ConsumptionDays = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShowGeneric = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShowGeneric = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShowIban = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShowIban = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankAccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankAccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IBAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IBAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactUser = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactUser = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Firstname = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Firstname = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Lastname = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Lastname = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Email = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Email = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Position = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Position = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactPhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactPhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactAlternativePhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactAlternativePhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactFax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactFax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Vendor = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Vendor = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POPaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POPaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POPaymentTerms = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POPaymentTerms = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PurchasePriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PurchasePriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POFinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POFinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Customer = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Customer = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CustomerPaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CustomerPaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentTerm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentTerm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soTaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soTaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CustomerFinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CustomerFinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soInvoiceSchedule = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soInvoiceSchedule = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soInvoicesTerms = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soInvoicesTerms = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Employee = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Employee = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSalesRepresentative = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSalesRepresentative = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Searchkey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Searchkey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.FiscalName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.FiscalName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxID == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxID.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxExempt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxExempt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ReferenceNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ReferenceNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Category == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Category.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Language == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Language.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Adderss1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Adderss1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Address2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Address2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.City == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.City.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Region == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Region.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Country == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Country.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Phone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Phone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AlternativePhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AlternativePhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Fax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Fax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShipToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShipToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PayFromAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PayFromAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InvoiceToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InvoiceToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.RemitToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.RemitToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ConsumptionDays == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ConsumptionDays.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShowGeneric == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShowGeneric.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShowIban == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShowIban.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankAccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankAccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IBAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IBAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactUser == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactUser.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Firstname == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Firstname.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Lastname == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Lastname.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Email == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Email.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Position == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Position.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactPhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactPhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactAlternativePhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactAlternativePhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactFax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactFax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Vendor == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Vendor.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POPaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POPaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POPaymentTerms == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POPaymentTerms.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PurchasePriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PurchasePriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POFinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POFinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Customer == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Customer.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CustomerPaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CustomerPaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentTerm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentTerm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soTaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soTaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CustomerFinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CustomerFinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soInvoiceSchedule == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soInvoiceSchedule.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soInvoicesTerms == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soInvoicesTerms.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Employee == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Employee.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSalesRepresentative == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSalesRepresentative.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Searchkey");
      sb.append("=");
      sb.append(String.valueOf(this.Searchkey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("FiscalName");
      sb.append("=");
      sb.append(String.valueOf(this.FiscalName));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("TaxID");
      sb.append("=");
      sb.append(String.valueOf(this.TaxID));

      sb.append(", ");

      sb.append("TaxExempt");
      sb.append("=");
      sb.append(String.valueOf(this.TaxExempt));

      sb.append(", ");

      sb.append("ReferenceNo");
      sb.append("=");
      sb.append(String.valueOf(this.ReferenceNo));

      sb.append(", ");

      sb.append("Category");
      sb.append("=");
      sb.append(String.valueOf(this.Category));

      sb.append(", ");

      sb.append("Language");
      sb.append("=");
      sb.append(String.valueOf(this.Language));

      sb.append(", ");

      sb.append("Adderss1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Adderss1stLine));

      sb.append(", ");

      sb.append("Address2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Address2ndLine));

      sb.append(", ");

      sb.append("PostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.PostalCode));

      sb.append(", ");

      sb.append("City");
      sb.append("=");
      sb.append(String.valueOf(this.City));

      sb.append(", ");

      sb.append("Region");
      sb.append("=");
      sb.append(String.valueOf(this.Region));

      sb.append(", ");

      sb.append("Country");
      sb.append("=");
      sb.append(String.valueOf(this.Country));

      sb.append(", ");

      sb.append("Phone");
      sb.append("=");
      sb.append(String.valueOf(this.Phone));

      sb.append(", ");

      sb.append("AlternativePhone");
      sb.append("=");
      sb.append(String.valueOf(this.AlternativePhone));

      sb.append(", ");

      sb.append("Fax");
      sb.append("=");
      sb.append(String.valueOf(this.Fax));

      sb.append(", ");

      sb.append("ShipToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.ShipToAddress));

      sb.append(", ");

      sb.append("PayFromAddress");
      sb.append("=");
      sb.append(String.valueOf(this.PayFromAddress));

      sb.append(", ");

      sb.append("InvoiceToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.InvoiceToAddress));

      sb.append(", ");

      sb.append("RemitToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.RemitToAddress));

      sb.append(", ");

      sb.append("ConsumptionDays");
      sb.append("=");
      sb.append(String.valueOf(this.ConsumptionDays));

      sb.append(", ");

      sb.append("ShowGeneric");
      sb.append("=");
      sb.append(String.valueOf(this.ShowGeneric));

      sb.append(", ");

      sb.append("ShowIban");
      sb.append("=");
      sb.append(String.valueOf(this.ShowIban));

      sb.append(", ");

      sb.append("BankAccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.BankAccountNo));

      sb.append(", ");

      sb.append("IBAN");
      sb.append("=");
      sb.append(String.valueOf(this.IBAN));

      sb.append(", ");

      sb.append("ContactUser");
      sb.append("=");
      sb.append(String.valueOf(this.ContactUser));

      sb.append(", ");

      sb.append("Firstname");
      sb.append("=");
      sb.append(String.valueOf(this.Firstname));

      sb.append(", ");

      sb.append("Lastname");
      sb.append("=");
      sb.append(String.valueOf(this.Lastname));

      sb.append(", ");

      sb.append("ContactDescription");
      sb.append("=");
      sb.append(String.valueOf(this.ContactDescription));

      sb.append(", ");

      sb.append("Email");
      sb.append("=");
      sb.append(String.valueOf(this.Email));

      sb.append(", ");

      sb.append("Position");
      sb.append("=");
      sb.append(String.valueOf(this.Position));

      sb.append(", ");

      sb.append("ContactPhone");
      sb.append("=");
      sb.append(String.valueOf(this.ContactPhone));

      sb.append(", ");

      sb.append("ContactAlternativePhone");
      sb.append("=");
      sb.append(String.valueOf(this.ContactAlternativePhone));

      sb.append(", ");

      sb.append("ContactFax");
      sb.append("=");
      sb.append(String.valueOf(this.ContactFax));

      sb.append(", ");

      sb.append("Vendor");
      sb.append("=");
      sb.append(String.valueOf(this.Vendor));

      sb.append(", ");

      sb.append("POPaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.POPaymentMethod));

      sb.append(", ");

      sb.append("POPaymentTerms");
      sb.append("=");
      sb.append(String.valueOf(this.POPaymentTerms));

      sb.append(", ");

      sb.append("PurchasePriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PurchasePriceList));

      sb.append(", ");

      sb.append("TaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.TaxCategory));

      sb.append(", ");

      sb.append("POFinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.POFinancialAccount));

      sb.append(", ");

      sb.append("Customer");
      sb.append("=");
      sb.append(String.valueOf(this.Customer));

      sb.append(", ");

      sb.append("CustomerPaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.CustomerPaymentMethod));

      sb.append(", ");

      sb.append("PaymentTerm");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentTerm));

      sb.append(", ");

      sb.append("PriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PriceList));

      sb.append(", ");

      sb.append("soTaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.soTaxCategory));

      sb.append(", ");

      sb.append("CustomerFinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.CustomerFinancialAccount));

      sb.append(", ");

      sb.append("soInvoiceSchedule");
      sb.append("=");
      sb.append(String.valueOf(this.soInvoiceSchedule));

      sb.append(", ");

      sb.append("soInvoicesTerms");
      sb.append("=");
      sb.append(String.valueOf(this.soInvoicesTerms));

      sb.append(", ");

      sb.append("Employee");
      sb.append("=");
      sb.append(String.valueOf(this.Employee));

      sb.append(", ");

      sb.append("IsSalesRepresentative");
      sb.append("=");
      sb.append(String.valueOf(this.IsSalesRepresentative));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Searchkey, other.Searchkey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Searchkey;
    String Name;
    String FiscalName;
    String Description;
    String TaxID;
    String TaxExempt;
    String ReferenceNo;
    String Category;
    String Language;
    String Adderss1stLine;
    String Address2ndLine;
    String PostalCode;
    String City;
    String Region;
    String Country;
    String Phone;
    String AlternativePhone;
    String Fax;
    String ShipToAddress;
    String PayFromAddress;
    String InvoiceToAddress;
    String RemitToAddress;
    String ConsumptionDays;
    String ShowGeneric;
    String ShowIban;
    String BankAccountNo;
    String IBAN;
    String ContactUser;
    String Firstname;
    String Lastname;
    String ContactDescription;
    String Email;
    String Position;
    String ContactPhone;
    String ContactAlternativePhone;
    String ContactFax;
    String Vendor;
    String POPaymentMethod;
    String POPaymentTerms;
    String PurchasePriceList;
    String TaxCategory;
    String POFinancialAccount;
    String Customer;
    String CustomerPaymentMethod;
    String PaymentTerm;
    String PriceList;
    String soTaxCategory;
    String CustomerFinancialAccount;
    String soInvoiceSchedule;
    String soInvoicesTerms;
    String Employee;
    String IsSalesRepresentative;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Searchkey == null) ? 0 : this.Searchkey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row18Struct other = (row18Struct) obj;

      if (this.Searchkey == null) {
        if (other.Searchkey != null)
          return false;
      } else if (!this.Searchkey.equals(other.Searchkey))
        return false;

      return true;
    }

    public void copyDataTo(row18Struct other) {

      other.Organization = this.Organization;
      other.Searchkey = this.Searchkey;
      other.Name = this.Name;
      other.FiscalName = this.FiscalName;
      other.Description = this.Description;
      other.TaxID = this.TaxID;
      other.TaxExempt = this.TaxExempt;
      other.ReferenceNo = this.ReferenceNo;
      other.Category = this.Category;
      other.Language = this.Language;
      other.Adderss1stLine = this.Adderss1stLine;
      other.Address2ndLine = this.Address2ndLine;
      other.PostalCode = this.PostalCode;
      other.City = this.City;
      other.Region = this.Region;
      other.Country = this.Country;
      other.Phone = this.Phone;
      other.AlternativePhone = this.AlternativePhone;
      other.Fax = this.Fax;
      other.ShipToAddress = this.ShipToAddress;
      other.PayFromAddress = this.PayFromAddress;
      other.InvoiceToAddress = this.InvoiceToAddress;
      other.RemitToAddress = this.RemitToAddress;
      other.ConsumptionDays = this.ConsumptionDays;
      other.ShowGeneric = this.ShowGeneric;
      other.ShowIban = this.ShowIban;
      other.BankAccountNo = this.BankAccountNo;
      other.IBAN = this.IBAN;
      other.ContactUser = this.ContactUser;
      other.Firstname = this.Firstname;
      other.Lastname = this.Lastname;
      other.ContactDescription = this.ContactDescription;
      other.Email = this.Email;
      other.Position = this.Position;
      other.ContactPhone = this.ContactPhone;
      other.ContactAlternativePhone = this.ContactAlternativePhone;
      other.ContactFax = this.ContactFax;
      other.Vendor = this.Vendor;
      other.POPaymentMethod = this.POPaymentMethod;
      other.POPaymentTerms = this.POPaymentTerms;
      other.PurchasePriceList = this.PurchasePriceList;
      other.TaxCategory = this.TaxCategory;
      other.POFinancialAccount = this.POFinancialAccount;
      other.Customer = this.Customer;
      other.CustomerPaymentMethod = this.CustomerPaymentMethod;
      other.PaymentTerm = this.PaymentTerm;
      other.PriceList = this.PriceList;
      other.soTaxCategory = this.soTaxCategory;
      other.CustomerFinancialAccount = this.CustomerFinancialAccount;
      other.soInvoiceSchedule = this.soInvoiceSchedule;
      other.soInvoicesTerms = this.soInvoicesTerms;
      other.Employee = this.Employee;
      other.IsSalesRepresentative = this.IsSalesRepresentative;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row18Struct other) {

      other.Searchkey = this.Searchkey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Searchkey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Searchkey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.FiscalName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.FiscalName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxID = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxID = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxExempt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxExempt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ReferenceNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ReferenceNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Category = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Category = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Language = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Language = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Adderss1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Adderss1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Address2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Address2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.City = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.City = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Region = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Region = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Country = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Country = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Phone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Phone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AlternativePhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AlternativePhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Fax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Fax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShipToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShipToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PayFromAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PayFromAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InvoiceToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InvoiceToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.RemitToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.RemitToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ConsumptionDays = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ConsumptionDays = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShowGeneric = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShowGeneric = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShowIban = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShowIban = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankAccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankAccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IBAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IBAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactUser = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactUser = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Firstname = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Firstname = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Lastname = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Lastname = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Email = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Email = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Position = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Position = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactPhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactPhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactAlternativePhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactAlternativePhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactFax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactFax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Vendor = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Vendor = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POPaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POPaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POPaymentTerms = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POPaymentTerms = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PurchasePriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PurchasePriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POFinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POFinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Customer = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Customer = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CustomerPaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CustomerPaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentTerm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentTerm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soTaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soTaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CustomerFinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CustomerFinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soInvoiceSchedule = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soInvoiceSchedule = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soInvoicesTerms = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soInvoicesTerms = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Employee = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Employee = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSalesRepresentative = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSalesRepresentative = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Searchkey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Searchkey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.FiscalName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.FiscalName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxID == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxID.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxExempt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxExempt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ReferenceNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ReferenceNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Category == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Category.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Language == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Language.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Adderss1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Adderss1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Address2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Address2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.City == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.City.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Region == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Region.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Country == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Country.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Phone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Phone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AlternativePhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AlternativePhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Fax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Fax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShipToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShipToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PayFromAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PayFromAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InvoiceToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InvoiceToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.RemitToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.RemitToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ConsumptionDays == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ConsumptionDays.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShowGeneric == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShowGeneric.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShowIban == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShowIban.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankAccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankAccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IBAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IBAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactUser == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactUser.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Firstname == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Firstname.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Lastname == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Lastname.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Email == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Email.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Position == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Position.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactPhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactPhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactAlternativePhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactAlternativePhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactFax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactFax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Vendor == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Vendor.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POPaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POPaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POPaymentTerms == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POPaymentTerms.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PurchasePriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PurchasePriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POFinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POFinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Customer == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Customer.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CustomerPaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CustomerPaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentTerm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentTerm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soTaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soTaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CustomerFinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CustomerFinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soInvoiceSchedule == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soInvoiceSchedule.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soInvoicesTerms == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soInvoicesTerms.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Employee == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Employee.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSalesRepresentative == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSalesRepresentative.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Searchkey");
      sb.append("=");
      sb.append(String.valueOf(this.Searchkey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("FiscalName");
      sb.append("=");
      sb.append(String.valueOf(this.FiscalName));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("TaxID");
      sb.append("=");
      sb.append(String.valueOf(this.TaxID));

      sb.append(", ");

      sb.append("TaxExempt");
      sb.append("=");
      sb.append(String.valueOf(this.TaxExempt));

      sb.append(", ");

      sb.append("ReferenceNo");
      sb.append("=");
      sb.append(String.valueOf(this.ReferenceNo));

      sb.append(", ");

      sb.append("Category");
      sb.append("=");
      sb.append(String.valueOf(this.Category));

      sb.append(", ");

      sb.append("Language");
      sb.append("=");
      sb.append(String.valueOf(this.Language));

      sb.append(", ");

      sb.append("Adderss1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Adderss1stLine));

      sb.append(", ");

      sb.append("Address2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Address2ndLine));

      sb.append(", ");

      sb.append("PostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.PostalCode));

      sb.append(", ");

      sb.append("City");
      sb.append("=");
      sb.append(String.valueOf(this.City));

      sb.append(", ");

      sb.append("Region");
      sb.append("=");
      sb.append(String.valueOf(this.Region));

      sb.append(", ");

      sb.append("Country");
      sb.append("=");
      sb.append(String.valueOf(this.Country));

      sb.append(", ");

      sb.append("Phone");
      sb.append("=");
      sb.append(String.valueOf(this.Phone));

      sb.append(", ");

      sb.append("AlternativePhone");
      sb.append("=");
      sb.append(String.valueOf(this.AlternativePhone));

      sb.append(", ");

      sb.append("Fax");
      sb.append("=");
      sb.append(String.valueOf(this.Fax));

      sb.append(", ");

      sb.append("ShipToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.ShipToAddress));

      sb.append(", ");

      sb.append("PayFromAddress");
      sb.append("=");
      sb.append(String.valueOf(this.PayFromAddress));

      sb.append(", ");

      sb.append("InvoiceToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.InvoiceToAddress));

      sb.append(", ");

      sb.append("RemitToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.RemitToAddress));

      sb.append(", ");

      sb.append("ConsumptionDays");
      sb.append("=");
      sb.append(String.valueOf(this.ConsumptionDays));

      sb.append(", ");

      sb.append("ShowGeneric");
      sb.append("=");
      sb.append(String.valueOf(this.ShowGeneric));

      sb.append(", ");

      sb.append("ShowIban");
      sb.append("=");
      sb.append(String.valueOf(this.ShowIban));

      sb.append(", ");

      sb.append("BankAccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.BankAccountNo));

      sb.append(", ");

      sb.append("IBAN");
      sb.append("=");
      sb.append(String.valueOf(this.IBAN));

      sb.append(", ");

      sb.append("ContactUser");
      sb.append("=");
      sb.append(String.valueOf(this.ContactUser));

      sb.append(", ");

      sb.append("Firstname");
      sb.append("=");
      sb.append(String.valueOf(this.Firstname));

      sb.append(", ");

      sb.append("Lastname");
      sb.append("=");
      sb.append(String.valueOf(this.Lastname));

      sb.append(", ");

      sb.append("ContactDescription");
      sb.append("=");
      sb.append(String.valueOf(this.ContactDescription));

      sb.append(", ");

      sb.append("Email");
      sb.append("=");
      sb.append(String.valueOf(this.Email));

      sb.append(", ");

      sb.append("Position");
      sb.append("=");
      sb.append(String.valueOf(this.Position));

      sb.append(", ");

      sb.append("ContactPhone");
      sb.append("=");
      sb.append(String.valueOf(this.ContactPhone));

      sb.append(", ");

      sb.append("ContactAlternativePhone");
      sb.append("=");
      sb.append(String.valueOf(this.ContactAlternativePhone));

      sb.append(", ");

      sb.append("ContactFax");
      sb.append("=");
      sb.append(String.valueOf(this.ContactFax));

      sb.append(", ");

      sb.append("Vendor");
      sb.append("=");
      sb.append(String.valueOf(this.Vendor));

      sb.append(", ");

      sb.append("POPaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.POPaymentMethod));

      sb.append(", ");

      sb.append("POPaymentTerms");
      sb.append("=");
      sb.append(String.valueOf(this.POPaymentTerms));

      sb.append(", ");

      sb.append("PurchasePriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PurchasePriceList));

      sb.append(", ");

      sb.append("TaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.TaxCategory));

      sb.append(", ");

      sb.append("POFinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.POFinancialAccount));

      sb.append(", ");

      sb.append("Customer");
      sb.append("=");
      sb.append(String.valueOf(this.Customer));

      sb.append(", ");

      sb.append("CustomerPaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.CustomerPaymentMethod));

      sb.append(", ");

      sb.append("PaymentTerm");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentTerm));

      sb.append(", ");

      sb.append("PriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PriceList));

      sb.append(", ");

      sb.append("soTaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.soTaxCategory));

      sb.append(", ");

      sb.append("CustomerFinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.CustomerFinancialAccount));

      sb.append(", ");

      sb.append("soInvoiceSchedule");
      sb.append("=");
      sb.append(String.valueOf(this.soInvoiceSchedule));

      sb.append(", ");

      sb.append("soInvoicesTerms");
      sb.append("=");
      sb.append(String.valueOf(this.soInvoicesTerms));

      sb.append(", ");

      sb.append("Employee");
      sb.append("=");
      sb.append(String.valueOf(this.Employee));

      sb.append(", ");

      sb.append("IsSalesRepresentative");
      sb.append("=");
      sb.append(String.valueOf(this.IsSalesRepresentative));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Searchkey, other.Searchkey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Searchkey;
    String Name;
    String FiscalName;
    String Description;
    String TaxID;
    String TaxExempt;
    String ReferenceNo;
    String Category;
    String Language;
    String Adderss1stLine;
    String Address2ndLine;
    String PostalCode;
    String City;
    String Region;
    String Country;
    String Phone;
    String AlternativePhone;
    String Fax;
    String ShipToAddress;
    String PayFromAddress;
    String InvoiceToAddress;
    String RemitToAddress;
    String ConsumptionDays;
    String ShowGeneric;
    String ShowIban;
    String BankAccountNo;
    String IBAN;
    String ContactUser;
    String Firstname;
    String Lastname;
    String ContactDescription;
    String Email;
    String Position;
    String ContactPhone;
    String ContactAlternativePhone;
    String ContactFax;
    String Vendor;
    String POPaymentMethod;
    String POPaymentTerms;
    String PurchasePriceList;
    String TaxCategory;
    String POFinancialAccount;
    String Customer;
    String CustomerPaymentMethod;
    String PaymentTerm;
    String PriceList;
    String soTaxCategory;
    String CustomerFinancialAccount;
    String soInvoiceSchedule;
    String soInvoicesTerms;
    String Employee;
    String IsSalesRepresentative;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Searchkey == null) ? 0 : this.Searchkey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row16Struct other = (row16Struct) obj;

      if (this.Searchkey == null) {
        if (other.Searchkey != null)
          return false;
      } else if (!this.Searchkey.equals(other.Searchkey))
        return false;

      return true;
    }

    public void copyDataTo(row16Struct other) {

      other.Organization = this.Organization;
      other.Searchkey = this.Searchkey;
      other.Name = this.Name;
      other.FiscalName = this.FiscalName;
      other.Description = this.Description;
      other.TaxID = this.TaxID;
      other.TaxExempt = this.TaxExempt;
      other.ReferenceNo = this.ReferenceNo;
      other.Category = this.Category;
      other.Language = this.Language;
      other.Adderss1stLine = this.Adderss1stLine;
      other.Address2ndLine = this.Address2ndLine;
      other.PostalCode = this.PostalCode;
      other.City = this.City;
      other.Region = this.Region;
      other.Country = this.Country;
      other.Phone = this.Phone;
      other.AlternativePhone = this.AlternativePhone;
      other.Fax = this.Fax;
      other.ShipToAddress = this.ShipToAddress;
      other.PayFromAddress = this.PayFromAddress;
      other.InvoiceToAddress = this.InvoiceToAddress;
      other.RemitToAddress = this.RemitToAddress;
      other.ConsumptionDays = this.ConsumptionDays;
      other.ShowGeneric = this.ShowGeneric;
      other.ShowIban = this.ShowIban;
      other.BankAccountNo = this.BankAccountNo;
      other.IBAN = this.IBAN;
      other.ContactUser = this.ContactUser;
      other.Firstname = this.Firstname;
      other.Lastname = this.Lastname;
      other.ContactDescription = this.ContactDescription;
      other.Email = this.Email;
      other.Position = this.Position;
      other.ContactPhone = this.ContactPhone;
      other.ContactAlternativePhone = this.ContactAlternativePhone;
      other.ContactFax = this.ContactFax;
      other.Vendor = this.Vendor;
      other.POPaymentMethod = this.POPaymentMethod;
      other.POPaymentTerms = this.POPaymentTerms;
      other.PurchasePriceList = this.PurchasePriceList;
      other.TaxCategory = this.TaxCategory;
      other.POFinancialAccount = this.POFinancialAccount;
      other.Customer = this.Customer;
      other.CustomerPaymentMethod = this.CustomerPaymentMethod;
      other.PaymentTerm = this.PaymentTerm;
      other.PriceList = this.PriceList;
      other.soTaxCategory = this.soTaxCategory;
      other.CustomerFinancialAccount = this.CustomerFinancialAccount;
      other.soInvoiceSchedule = this.soInvoiceSchedule;
      other.soInvoicesTerms = this.soInvoicesTerms;
      other.Employee = this.Employee;
      other.IsSalesRepresentative = this.IsSalesRepresentative;

    }

    public void copyKeysDataTo(row16Struct other) {

      other.Searchkey = this.Searchkey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Searchkey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Searchkey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.FiscalName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.FiscalName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxID = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxID = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxExempt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxExempt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ReferenceNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ReferenceNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Category = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Category = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Language = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Language = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Adderss1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Adderss1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Address2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Address2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.City = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.City = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Region = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Region = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Country = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Country = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Phone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Phone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AlternativePhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AlternativePhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Fax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Fax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShipToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShipToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PayFromAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PayFromAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InvoiceToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InvoiceToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.RemitToAddress = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.RemitToAddress = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ConsumptionDays = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ConsumptionDays = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShowGeneric = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShowGeneric = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ShowIban = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ShowIban = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankAccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankAccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IBAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IBAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactUser = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactUser = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Firstname = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Firstname = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Lastname = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Lastname = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Email = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Email = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Position = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Position = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactPhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactPhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactAlternativePhone = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactAlternativePhone = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ContactFax = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ContactFax = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Vendor = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Vendor = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POPaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POPaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POPaymentTerms = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POPaymentTerms = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PurchasePriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PurchasePriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POFinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POFinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Customer = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Customer = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CustomerPaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CustomerPaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentTerm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentTerm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soTaxCategory = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soTaxCategory = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CustomerFinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CustomerFinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soInvoiceSchedule = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soInvoiceSchedule = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.soInvoicesTerms = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.soInvoicesTerms = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Employee = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Employee = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsSalesRepresentative = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsSalesRepresentative = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Searchkey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Searchkey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.FiscalName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.FiscalName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxID == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxID.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxExempt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxExempt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ReferenceNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ReferenceNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Category == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Category.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Language == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Language.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Adderss1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Adderss1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Address2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Address2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.City == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.City.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Region == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Region.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Country == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Country.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Phone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Phone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AlternativePhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AlternativePhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Fax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Fax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShipToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShipToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PayFromAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PayFromAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InvoiceToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InvoiceToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.RemitToAddress == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.RemitToAddress.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ConsumptionDays == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ConsumptionDays.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShowGeneric == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShowGeneric.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ShowIban == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ShowIban.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankAccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankAccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IBAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IBAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactUser == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactUser.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Firstname == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Firstname.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Lastname == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Lastname.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Email == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Email.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Position == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Position.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactPhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactPhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactAlternativePhone == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactAlternativePhone.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ContactFax == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ContactFax.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Vendor == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Vendor.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POPaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POPaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POPaymentTerms == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POPaymentTerms.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PurchasePriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PurchasePriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POFinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POFinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Customer == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Customer.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CustomerPaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CustomerPaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentTerm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentTerm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soTaxCategory == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soTaxCategory.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CustomerFinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CustomerFinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soInvoiceSchedule == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soInvoiceSchedule.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.soInvoicesTerms == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.soInvoicesTerms.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Employee == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Employee.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsSalesRepresentative == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsSalesRepresentative.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Searchkey");
      sb.append("=");
      sb.append(String.valueOf(this.Searchkey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("FiscalName");
      sb.append("=");
      sb.append(String.valueOf(this.FiscalName));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("TaxID");
      sb.append("=");
      sb.append(String.valueOf(this.TaxID));

      sb.append(", ");

      sb.append("TaxExempt");
      sb.append("=");
      sb.append(String.valueOf(this.TaxExempt));

      sb.append(", ");

      sb.append("ReferenceNo");
      sb.append("=");
      sb.append(String.valueOf(this.ReferenceNo));

      sb.append(", ");

      sb.append("Category");
      sb.append("=");
      sb.append(String.valueOf(this.Category));

      sb.append(", ");

      sb.append("Language");
      sb.append("=");
      sb.append(String.valueOf(this.Language));

      sb.append(", ");

      sb.append("Adderss1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Adderss1stLine));

      sb.append(", ");

      sb.append("Address2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Address2ndLine));

      sb.append(", ");

      sb.append("PostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.PostalCode));

      sb.append(", ");

      sb.append("City");
      sb.append("=");
      sb.append(String.valueOf(this.City));

      sb.append(", ");

      sb.append("Region");
      sb.append("=");
      sb.append(String.valueOf(this.Region));

      sb.append(", ");

      sb.append("Country");
      sb.append("=");
      sb.append(String.valueOf(this.Country));

      sb.append(", ");

      sb.append("Phone");
      sb.append("=");
      sb.append(String.valueOf(this.Phone));

      sb.append(", ");

      sb.append("AlternativePhone");
      sb.append("=");
      sb.append(String.valueOf(this.AlternativePhone));

      sb.append(", ");

      sb.append("Fax");
      sb.append("=");
      sb.append(String.valueOf(this.Fax));

      sb.append(", ");

      sb.append("ShipToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.ShipToAddress));

      sb.append(", ");

      sb.append("PayFromAddress");
      sb.append("=");
      sb.append(String.valueOf(this.PayFromAddress));

      sb.append(", ");

      sb.append("InvoiceToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.InvoiceToAddress));

      sb.append(", ");

      sb.append("RemitToAddress");
      sb.append("=");
      sb.append(String.valueOf(this.RemitToAddress));

      sb.append(", ");

      sb.append("ConsumptionDays");
      sb.append("=");
      sb.append(String.valueOf(this.ConsumptionDays));

      sb.append(", ");

      sb.append("ShowGeneric");
      sb.append("=");
      sb.append(String.valueOf(this.ShowGeneric));

      sb.append(", ");

      sb.append("ShowIban");
      sb.append("=");
      sb.append(String.valueOf(this.ShowIban));

      sb.append(", ");

      sb.append("BankAccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.BankAccountNo));

      sb.append(", ");

      sb.append("IBAN");
      sb.append("=");
      sb.append(String.valueOf(this.IBAN));

      sb.append(", ");

      sb.append("ContactUser");
      sb.append("=");
      sb.append(String.valueOf(this.ContactUser));

      sb.append(", ");

      sb.append("Firstname");
      sb.append("=");
      sb.append(String.valueOf(this.Firstname));

      sb.append(", ");

      sb.append("Lastname");
      sb.append("=");
      sb.append(String.valueOf(this.Lastname));

      sb.append(", ");

      sb.append("ContactDescription");
      sb.append("=");
      sb.append(String.valueOf(this.ContactDescription));

      sb.append(", ");

      sb.append("Email");
      sb.append("=");
      sb.append(String.valueOf(this.Email));

      sb.append(", ");

      sb.append("Position");
      sb.append("=");
      sb.append(String.valueOf(this.Position));

      sb.append(", ");

      sb.append("ContactPhone");
      sb.append("=");
      sb.append(String.valueOf(this.ContactPhone));

      sb.append(", ");

      sb.append("ContactAlternativePhone");
      sb.append("=");
      sb.append(String.valueOf(this.ContactAlternativePhone));

      sb.append(", ");

      sb.append("ContactFax");
      sb.append("=");
      sb.append(String.valueOf(this.ContactFax));

      sb.append(", ");

      sb.append("Vendor");
      sb.append("=");
      sb.append(String.valueOf(this.Vendor));

      sb.append(", ");

      sb.append("POPaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.POPaymentMethod));

      sb.append(", ");

      sb.append("POPaymentTerms");
      sb.append("=");
      sb.append(String.valueOf(this.POPaymentTerms));

      sb.append(", ");

      sb.append("PurchasePriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PurchasePriceList));

      sb.append(", ");

      sb.append("TaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.TaxCategory));

      sb.append(", ");

      sb.append("POFinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.POFinancialAccount));

      sb.append(", ");

      sb.append("Customer");
      sb.append("=");
      sb.append(String.valueOf(this.Customer));

      sb.append(", ");

      sb.append("CustomerPaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.CustomerPaymentMethod));

      sb.append(", ");

      sb.append("PaymentTerm");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentTerm));

      sb.append(", ");

      sb.append("PriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PriceList));

      sb.append(", ");

      sb.append("soTaxCategory");
      sb.append("=");
      sb.append(String.valueOf(this.soTaxCategory));

      sb.append(", ");

      sb.append("CustomerFinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.CustomerFinancialAccount));

      sb.append(", ");

      sb.append("soInvoiceSchedule");
      sb.append("=");
      sb.append(String.valueOf(this.soInvoiceSchedule));

      sb.append(", ");

      sb.append("soInvoicesTerms");
      sb.append("=");
      sb.append(String.valueOf(this.soInvoicesTerms));

      sb.append(", ");

      sb.append("Employee");
      sb.append("=");
      sb.append(String.valueOf(this.Employee));

      sb.append(", ");

      sb.append("IsSalesRepresentative");
      sb.append("=");
      sb.append(String.valueOf(this.IsSalesRepresentative));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Searchkey, other.Searchkey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap)
      throws TalendException {
    globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

    String currentComponent = "";

    try {

      row16Struct row16 = new row16Struct();
      row18Struct row18 = new row18Struct();
      row1Struct row1 = new row1Struct();
      row2Struct row2 = new row2Struct();
      row3Struct row3 = new row3Struct();
      row19Struct row19 = new row19Struct();
      row23Struct row23 = new row23Struct();

      /**
       * [tJavaRow_18 begin ] start
       */

      ok_Hash.put("tJavaRow_18", false);
      start_Hash.put("tJavaRow_18", System.currentTimeMillis());
      currentComponent = "tJavaRow_18";

      int nb_line_tJavaRow_18 = 0;

      /**
       * [tJavaRow_18 begin ] stop
       */

      /**
       * [tJavaRow_9 begin ] start
       */

      ok_Hash.put("tJavaRow_9", false);
      start_Hash.put("tJavaRow_9", System.currentTimeMillis());
      currentComponent = "tJavaRow_9";

      int nb_line_tJavaRow_9 = 0;

      /**
       * [tJavaRow_9 begin ] stop
       */

      /**
       * [tFilterRow_10 begin ] start
       */

      ok_Hash.put("tFilterRow_10", false);
      start_Hash.put("tFilterRow_10", System.currentTimeMillis());
      currentComponent = "tFilterRow_10";

      int nb_line_tFilterRow_10 = 0;
      int nb_line_ok_tFilterRow_10 = 0;
      int nb_line_reject_tFilterRow_10 = 0;

      /**
       * [tFilterRow_10 begin ] stop
       */

      /**
       * [tJavaRow_1 begin ] start
       */

      ok_Hash.put("tJavaRow_1", false);
      start_Hash.put("tJavaRow_1", System.currentTimeMillis());
      currentComponent = "tJavaRow_1";

      int nb_line_tJavaRow_1 = 0;

      /**
       * [tJavaRow_1 begin ] stop
       */

      /**
       * [tJavaRow_16 begin ] start
       */

      ok_Hash.put("tJavaRow_16", false);
      start_Hash.put("tJavaRow_16", System.currentTimeMillis());
      currentComponent = "tJavaRow_16";

      int nb_line_tJavaRow_16 = 0;

      /**
       * [tJavaRow_16 begin ] stop
       */

      /**
       * [tFilterRow_11 begin ] start
       */

      ok_Hash.put("tFilterRow_11", false);
      start_Hash.put("tFilterRow_11", System.currentTimeMillis());
      currentComponent = "tFilterRow_11";

      int nb_line_tFilterRow_11 = 0;
      int nb_line_ok_tFilterRow_11 = 0;
      int nb_line_reject_tFilterRow_11 = 0;

      /**
       * [tFilterRow_11 begin ] stop
       */

      /**
       * [tJavaRow_11 begin ] start
       */

      ok_Hash.put("tJavaRow_11", false);
      start_Hash.put("tJavaRow_11", System.currentTimeMillis());
      currentComponent = "tJavaRow_11";

      int nb_line_tJavaRow_11 = 0;

      /**
       * [tJavaRow_11 begin ] stop
       */

      /**
       * [tFileInputDelimited_1 begin ] start
       */

      ok_Hash.put("tFileInputDelimited_1", false);
      start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
      currentComponent = "tFileInputDelimited_1";

      int nb_line_tFileInputDelimited_1 = 0;
      int footer_tFileInputDelimited_1 = 0;
      int totalLinetFileInputDelimited_1 = 0;
      int limittFileInputDelimited_1 = -1;
      int lastLinetFileInputDelimited_1 = -1;

      char fieldSeparator_tFileInputDelimited_1[] = null;

      // support passing value (property: Field Separator) by 'context.fs'
      // or 'globalMap.get("fs")'.
      if (((String) ",").length() > 0) {
        fieldSeparator_tFileInputDelimited_1 = ((String) ",").toCharArray();
      } else {
        throw new IllegalArgumentException("Field Separator must be assigned a char.");
      }

      char rowSeparator_tFileInputDelimited_1[] = null;

      // support passing value (property: Row Separator) by 'context.rs'
      // or 'globalMap.get("rs")'.
      if (((String) "\n").length() > 0) {
        rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
      } else {
        throw new IllegalArgumentException("Row Separator must be assigned a char.");
      }

      com.csvreader.CsvReader csvReadertFileInputDelimited_1 = new com.csvreader.CsvReader(
          new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(/**
           * 
           * Start field tFileInputDelimited_1:FILENAME
           */
          context.getProperty("filename")/**
           * End field tFileInputDelimited_1:FILENAME
           */
          ), "UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);

      if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
          && (rowSeparator_tFileInputDelimited_1[0] != '\r'))
        csvReadertFileInputDelimited_1.setRecordDelimiter(rowSeparator_tFileInputDelimited_1[0]);

      csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
      csvReadertFileInputDelimited_1.setTextQualifier('"');

      csvReadertFileInputDelimited_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      String[] rowtFileInputDelimited_1 = null;

      if (footer_tFileInputDelimited_1 > 0) {

        while (csvReadertFileInputDelimited_1.readRecord()) {
          rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();
          if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
              .equals(rowtFileInputDelimited_1[0]))) {// empty
            // line when
            // row
            // separator
            // is '\n'

            totalLinetFileInputDelimited_1++;

          }

        }
        int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
            - footer_tFileInputDelimited_1 < 0 ? 0 : totalLinetFileInputDelimited_1
            - footer_tFileInputDelimited_1;
        if (lastLinetFileInputDelimited_1 > 0) {
          lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
              : lastLineTemptFileInputDelimited_1;
        } else {
          lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
        }

        csvReadertFileInputDelimited_1.close();

        csvReadertFileInputDelimited_1 = new com.csvreader.CsvReader(new java.io.BufferedReader(
            new java.io.InputStreamReader(new java.io.FileInputStream(/**
             * Start field
             * tFileInputDelimited_1:FILENAME
             */
            context.getProperty("filename")/**
             * End field tFileInputDelimited_1:FILENAME
             */
            ), "UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);

        if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
            && (rowSeparator_tFileInputDelimited_1[0] != '\r'))
          csvReadertFileInputDelimited_1.setRecordDelimiter(rowSeparator_tFileInputDelimited_1[0]);
        csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
        csvReadertFileInputDelimited_1.setTextQualifier('"');
        csvReadertFileInputDelimited_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      }

      int currentLinetFileInputDelimited_1 = 0;
      int outputLinetFileInputDelimited_1 = 0;

      while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1.readRecord()) {

        rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

        if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
          // line
          // when
          // row
          // separator
          // is
          // '\n'
          continue;
        }

        currentLinetFileInputDelimited_1++;
        if (currentLinetFileInputDelimited_1 < 1 + 1) {
          continue;
        }

        if (lastLinetFileInputDelimited_1 > -1
            && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
          break;
        }
        outputLinetFileInputDelimited_1++;
        if (limittFileInputDelimited_1 > 0
            && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
          break;
        }

        row16 = null;
        row16 = new row16Struct();
        try {

          if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
            // line
            // when
            // row
            // separator
            // is
            // '\n'

            row16.Organization = null;

            row16.Searchkey = null;

            row16.Name = null;

            row16.FiscalName = null;

            row16.Description = null;

            row16.TaxID = null;

            row16.TaxExempt = null;

            row16.ReferenceNo = null;

            row16.Category = null;

            row16.Language = null;

            row16.Adderss1stLine = null;

            row16.Address2ndLine = null;

            row16.PostalCode = null;

            row16.City = null;

            row16.Region = null;

            row16.Country = null;

            row16.Phone = null;

            row16.AlternativePhone = null;

            row16.Fax = null;

            row16.ShipToAddress = null;

            row16.PayFromAddress = null;

            row16.InvoiceToAddress = null;

            row16.RemitToAddress = null;

            row16.ConsumptionDays = null;

            row16.ShowGeneric = null;

            row16.ShowIban = null;

            row16.BankAccountNo = null;

            row16.IBAN = null;

            row16.ContactUser = null;

            row16.Firstname = null;

            row16.Lastname = null;

            row16.ContactDescription = null;

            row16.Email = null;

            row16.Position = null;

            row16.ContactPhone = null;

            row16.ContactAlternativePhone = null;

            row16.ContactFax = null;

            row16.Vendor = null;

            row16.POPaymentMethod = null;

            row16.POPaymentTerms = null;

            row16.PurchasePriceList = null;

            row16.TaxCategory = null;

            row16.POFinancialAccount = null;

            row16.Customer = null;

            row16.CustomerPaymentMethod = null;

            row16.PaymentTerm = null;

            row16.PriceList = null;

            row16.soTaxCategory = null;

            row16.CustomerFinancialAccount = null;

            row16.soInvoiceSchedule = null;

            row16.soInvoicesTerms = null;

            row16.Employee = null;

            row16.IsSalesRepresentative = null;

          } else {

            if (0 < rowtFileInputDelimited_1.length) {
              row16.Organization = rowtFileInputDelimited_1[0].trim();

            } else {
              row16.Organization = null;
            }

            if (1 < rowtFileInputDelimited_1.length) {
              row16.Searchkey = rowtFileInputDelimited_1[1].trim();

            } else {
              row16.Searchkey = null;
            }

            if (2 < rowtFileInputDelimited_1.length) {
              row16.Name = rowtFileInputDelimited_1[2].trim();

            } else {
              row16.Name = null;
            }

            if (3 < rowtFileInputDelimited_1.length) {
              row16.FiscalName = rowtFileInputDelimited_1[3].trim();

            } else {
              row16.FiscalName = null;
            }

            if (4 < rowtFileInputDelimited_1.length) {
              row16.Description = rowtFileInputDelimited_1[4].trim();

            } else {
              row16.Description = null;
            }

            if (5 < rowtFileInputDelimited_1.length) {
              row16.TaxID = rowtFileInputDelimited_1[5].trim();

            } else {
              row16.TaxID = null;
            }

            if (6 < rowtFileInputDelimited_1.length) {
              row16.TaxExempt = rowtFileInputDelimited_1[6].trim();

            } else {
              row16.TaxExempt = null;
            }

            if (7 < rowtFileInputDelimited_1.length) {
              row16.ReferenceNo = rowtFileInputDelimited_1[7].trim();

            } else {
              row16.ReferenceNo = null;
            }

            if (8 < rowtFileInputDelimited_1.length) {
              row16.Category = rowtFileInputDelimited_1[8].trim();

            } else {
              row16.Category = null;
            }

            if (9 < rowtFileInputDelimited_1.length) {
              row16.Language = rowtFileInputDelimited_1[9].trim();

            } else {
              row16.Language = null;
            }

            if (10 < rowtFileInputDelimited_1.length) {
              row16.Adderss1stLine = rowtFileInputDelimited_1[10].trim();

            } else {
              row16.Adderss1stLine = null;
            }

            if (11 < rowtFileInputDelimited_1.length) {
              row16.Address2ndLine = rowtFileInputDelimited_1[11].trim();

            } else {
              row16.Address2ndLine = null;
            }

            if (12 < rowtFileInputDelimited_1.length) {
              row16.PostalCode = rowtFileInputDelimited_1[12].trim();

            } else {
              row16.PostalCode = null;
            }

            if (13 < rowtFileInputDelimited_1.length) {
              row16.City = rowtFileInputDelimited_1[13].trim();

            } else {
              row16.City = null;
            }

            if (14 < rowtFileInputDelimited_1.length) {
              row16.Region = rowtFileInputDelimited_1[14].trim();

            } else {
              row16.Region = null;
            }

            if (15 < rowtFileInputDelimited_1.length) {
              row16.Country = rowtFileInputDelimited_1[15].trim();

            } else {
              row16.Country = null;
            }

            if (16 < rowtFileInputDelimited_1.length) {
              row16.Phone = rowtFileInputDelimited_1[16].trim();

            } else {
              row16.Phone = null;
            }

            if (17 < rowtFileInputDelimited_1.length) {
              row16.AlternativePhone = rowtFileInputDelimited_1[17].trim();

            } else {
              row16.AlternativePhone = null;
            }

            if (18 < rowtFileInputDelimited_1.length) {
              row16.Fax = rowtFileInputDelimited_1[18].trim();

            } else {
              row16.Fax = null;
            }

            if (19 < rowtFileInputDelimited_1.length) {
              row16.ShipToAddress = rowtFileInputDelimited_1[19].trim();

            } else {
              row16.ShipToAddress = null;
            }

            if (20 < rowtFileInputDelimited_1.length) {
              row16.PayFromAddress = rowtFileInputDelimited_1[20].trim();

            } else {
              row16.PayFromAddress = null;
            }

            if (21 < rowtFileInputDelimited_1.length) {
              row16.InvoiceToAddress = rowtFileInputDelimited_1[21].trim();

            } else {
              row16.InvoiceToAddress = null;
            }

            if (22 < rowtFileInputDelimited_1.length) {
              row16.RemitToAddress = rowtFileInputDelimited_1[22].trim();

            } else {
              row16.RemitToAddress = null;
            }

            if (23 < rowtFileInputDelimited_1.length) {
              row16.ConsumptionDays = rowtFileInputDelimited_1[23].trim();

            } else {
              row16.ConsumptionDays = null;
            }

            if (24 < rowtFileInputDelimited_1.length) {
              row16.ShowGeneric = rowtFileInputDelimited_1[24].trim();

            } else {
              row16.ShowGeneric = null;
            }

            if (25 < rowtFileInputDelimited_1.length) {
              row16.ShowIban = rowtFileInputDelimited_1[25].trim();

            } else {
              row16.ShowIban = null;
            }

            if (26 < rowtFileInputDelimited_1.length) {
              row16.BankAccountNo = rowtFileInputDelimited_1[26].trim();

            } else {
              row16.BankAccountNo = null;
            }

            if (27 < rowtFileInputDelimited_1.length) {
              row16.IBAN = rowtFileInputDelimited_1[27].trim();

            } else {
              row16.IBAN = null;
            }

            if (28 < rowtFileInputDelimited_1.length) {
              row16.ContactUser = rowtFileInputDelimited_1[28].trim();

            } else {
              row16.ContactUser = null;
            }

            if (29 < rowtFileInputDelimited_1.length) {
              row16.Firstname = rowtFileInputDelimited_1[29].trim();

            } else {
              row16.Firstname = null;
            }

            if (30 < rowtFileInputDelimited_1.length) {
              row16.Lastname = rowtFileInputDelimited_1[30].trim();

            } else {
              row16.Lastname = null;
            }

            if (31 < rowtFileInputDelimited_1.length) {
              row16.ContactDescription = rowtFileInputDelimited_1[31].trim();

            } else {
              row16.ContactDescription = null;
            }

            if (32 < rowtFileInputDelimited_1.length) {
              row16.Email = rowtFileInputDelimited_1[32].trim();

            } else {
              row16.Email = null;
            }

            if (33 < rowtFileInputDelimited_1.length) {
              row16.Position = rowtFileInputDelimited_1[33].trim();

            } else {
              row16.Position = null;
            }

            if (34 < rowtFileInputDelimited_1.length) {
              row16.ContactPhone = rowtFileInputDelimited_1[34].trim();

            } else {
              row16.ContactPhone = null;
            }

            if (35 < rowtFileInputDelimited_1.length) {
              row16.ContactAlternativePhone = rowtFileInputDelimited_1[35].trim();

            } else {
              row16.ContactAlternativePhone = null;
            }

            if (36 < rowtFileInputDelimited_1.length) {
              row16.ContactFax = rowtFileInputDelimited_1[36].trim();

            } else {
              row16.ContactFax = null;
            }

            if (37 < rowtFileInputDelimited_1.length) {
              row16.Vendor = rowtFileInputDelimited_1[37].trim();

            } else {
              row16.Vendor = null;
            }

            if (38 < rowtFileInputDelimited_1.length) {
              row16.POPaymentMethod = rowtFileInputDelimited_1[38].trim();

            } else {
              row16.POPaymentMethod = null;
            }

            if (39 < rowtFileInputDelimited_1.length) {
              row16.POPaymentTerms = rowtFileInputDelimited_1[39].trim();

            } else {
              row16.POPaymentTerms = null;
            }

            if (40 < rowtFileInputDelimited_1.length) {
              row16.PurchasePriceList = rowtFileInputDelimited_1[40].trim();

            } else {
              row16.PurchasePriceList = null;
            }

            if (41 < rowtFileInputDelimited_1.length) {
              row16.TaxCategory = rowtFileInputDelimited_1[41].trim();

            } else {
              row16.TaxCategory = null;
            }

            if (42 < rowtFileInputDelimited_1.length) {
              row16.POFinancialAccount = rowtFileInputDelimited_1[42].trim();

            } else {
              row16.POFinancialAccount = null;
            }

            if (43 < rowtFileInputDelimited_1.length) {
              row16.Customer = rowtFileInputDelimited_1[43].trim();

            } else {
              row16.Customer = null;
            }

            if (44 < rowtFileInputDelimited_1.length) {
              row16.CustomerPaymentMethod = rowtFileInputDelimited_1[44].trim();

            } else {
              row16.CustomerPaymentMethod = null;
            }

            if (45 < rowtFileInputDelimited_1.length) {
              row16.PaymentTerm = rowtFileInputDelimited_1[45].trim();

            } else {
              row16.PaymentTerm = null;
            }

            if (46 < rowtFileInputDelimited_1.length) {
              row16.PriceList = rowtFileInputDelimited_1[46].trim();

            } else {
              row16.PriceList = null;
            }

            if (47 < rowtFileInputDelimited_1.length) {
              row16.soTaxCategory = rowtFileInputDelimited_1[47].trim();

            } else {
              row16.soTaxCategory = null;
            }

            if (48 < rowtFileInputDelimited_1.length) {
              row16.CustomerFinancialAccount = rowtFileInputDelimited_1[48].trim();

            } else {
              row16.CustomerFinancialAccount = null;
            }

            if (49 < rowtFileInputDelimited_1.length) {
              row16.soInvoiceSchedule = rowtFileInputDelimited_1[49].trim();

            } else {
              row16.soInvoiceSchedule = null;
            }

            if (50 < rowtFileInputDelimited_1.length) {
              row16.soInvoicesTerms = rowtFileInputDelimited_1[50].trim();

            } else {
              row16.soInvoicesTerms = null;
            }

            if (51 < rowtFileInputDelimited_1.length) {
              row16.Employee = rowtFileInputDelimited_1[51].trim();

            } else {
              row16.Employee = null;
            }

            if (52 < rowtFileInputDelimited_1.length) {
              row16.IsSalesRepresentative = rowtFileInputDelimited_1[52].trim();

            } else {
              row16.IsSalesRepresentative = null;
            }

          }

        } catch (Exception e) {
          System.err.println(e.getMessage());
          row16 = null;
        }

        /**
         * [tFileInputDelimited_1 begin ] stop
         */
        /**
         * [tFileInputDelimited_1 main ] start
         */

        currentComponent = "tFileInputDelimited_1";

        /**
         * [tFileInputDelimited_1 main ] stop
         */
        // Start of branch "row16"
        if (row16 != null) {

          /**
           * [tJavaRow_11 main ] start
           */

          currentComponent = "tJavaRow_11";

          org.openbravo.idl.proc.IdlService service = org.openbravo.idl.proc.IdlIntService
              .getInstance().getService("Business Partner");

          org.openbravo.idl.proc.Validator validator = service.getValidator("Business Partner");

          row18.flag = "0";
          row18.whyError = "";

          row18.Organization = validator.checkOrganization(row16.Organization);

          row18.Searchkey = validator.checkNotNull(validator.checkString(row16.Searchkey, 40),
              "SearchKey");

          row18.Name = validator.checkNotNull(validator.checkString(row16.Name, 60), "Name");

          row18.FiscalName = validator.checkString(row16.FiscalName, 60);

          row18.Description = validator.checkString(row16.Description, 255);

          row18.TaxID = validator.checkString(row16.TaxID, 20, "TaxID");

          row18.TaxExempt = validator.checkBoolean(row16.TaxExempt);

          row18.ReferenceNo = validator.checkString(row16.ReferenceNo, 40);

          row18.Category = validator.checkNotNull(
              validator.checkString(row16.Category, 60, "Category"), "Category");

          row18.Language = validator.checkString(row16.Language, 6, "Language");

          row18.Adderss1stLine = validator.checkString(row16.Adderss1stLine, 60);

          row18.Address2ndLine = validator.checkString(row16.Address2ndLine, 60);

          row18.PostalCode = validator.checkString(row16.PostalCode, 10);

          row18.City = validator.checkString(row16.City, 60);

          row18.Region = validator.checkString(row16.Region, 60);

          row18.Country = validator.checkString(row16.Country, 60, "Country");

          row18.Phone = validator.checkString(row16.Phone, 40);

          row18.AlternativePhone = validator.checkString(row16.AlternativePhone, 40);

          row18.Fax = validator.checkString(row16.Fax, 40);

          row18.ShipToAddress = validator.checkBoolean(row16.ShipToAddress);

          row18.PayFromAddress = validator.checkBoolean(row16.PayFromAddress);

          row18.InvoiceToAddress = validator.checkBoolean(row16.InvoiceToAddress);

          row18.RemitToAddress = validator.checkBoolean(row16.RemitToAddress);

          row18.ConsumptionDays = validator.checkLong(row16.ConsumptionDays);

          row18.ShowGeneric = validator.checkBoolean(row16.ShowGeneric);

          row18.ShowIban = validator.checkBoolean(row16.ShowIban);

          row18.BankAccountNo = validator.checkString(row16.BankAccountNo, 20);

          row18.IBAN = validator.checkString(row16.IBAN, 34);

          row18.ContactUser = validator.checkString(row16.ContactUser, 60);

          row18.Firstname = validator.checkString(row16.Firstname, 60);

          row18.Lastname = validator.checkString(row16.Lastname, 60);

          row18.ContactDescription = validator.checkString(row16.ContactDescription, 255);

          row18.Email = validator.checkString(row16.Email, 255);

          row18.Position = validator.checkString(row16.Position, 40);

          row18.ContactPhone = validator.checkString(row16.ContactPhone, 40);

          row18.ContactAlternativePhone = validator.checkString(row16.ContactAlternativePhone, 40);

          row18.ContactFax = validator.checkString(row16.ContactFax, 40);

          row18.Vendor = validator.checkNotNull(validator.checkBoolean(row16.Vendor, "Vendor"),
              "Vendor");

          row18.POPaymentMethod = validator.checkString(row16.POPaymentMethod, 60);

          row18.POPaymentTerms = validator.checkString(row16.POPaymentTerms, 40, "POPaymentTerm");

          row18.PurchasePriceList = validator.checkString(row16.PurchasePriceList, 60,
              "PurchasePriceList");

          row18.TaxCategory = validator.checkString(row16.TaxCategory, 60);

          row18.POFinancialAccount = validator.checkString(row16.POFinancialAccount, 60,
              "POFinancialAccount");

          row18.Customer = validator.checkNotNull(
              validator.checkBoolean(row16.Customer, "Customer"), "Customer");

          row18.CustomerPaymentMethod = validator.checkString(row16.CustomerPaymentMethod, 60);

          row18.PaymentTerm = validator.checkString(row16.PaymentTerm, 40, "PaymentTerm");

          row18.PriceList = validator.checkString(row16.PriceList, 60, "SalePriceList");

          row18.soTaxCategory = validator.checkString(row16.soTaxCategory, 60);

          row18.CustomerFinancialAccount = validator.checkString(row16.CustomerFinancialAccount,
              60, "SOFinancialAccount");

          row18.soInvoiceSchedule = validator.checkString(row16.soInvoiceSchedule, 60,
              "InvoiceSchedule");

          row18.soInvoicesTerms = validator.checkString(row16.soInvoicesTerms, 60, "InvoiceTerm");

          row18.Employee = validator.checkNotNull(
              validator.checkBoolean(row16.Employee, "Employee"), "Employee");

          row18.IsSalesRepresentative = validator.checkBoolean(row16.IsSalesRepresentative,
              "IsSalesRepresentative");

          row18.flag = validator.getErrorCode();
          row18.whyError = validator.getErrorMessage();

          nb_line_tJavaRow_11++;

          /**
           * [tJavaRow_11 main ] stop
           */

          /**
           * [tFilterRow_11 main ] start
           */

          currentComponent = "tFilterRow_11";

          row1 = null;
          row23 = null;

          if (

          (row18.flag == null ? false : row18.flag.toLowerCase().compareTo("0") == 0)

          )

          {
            if (row1 == null) {
              row1 = new row1Struct();
            }
            row1.Organization = row18.Organization;
            row1.Searchkey = row18.Searchkey;
            row1.Name = row18.Name;
            row1.FiscalName = row18.FiscalName;
            row1.Description = row18.Description;
            row1.TaxID = row18.TaxID;
            row1.TaxExempt = row18.TaxExempt;
            row1.ReferenceNo = row18.ReferenceNo;
            row1.Category = row18.Category;
            row1.Language = row18.Language;
            row1.Adderss1stLine = row18.Adderss1stLine;
            row1.Address2ndLine = row18.Address2ndLine;
            row1.PostalCode = row18.PostalCode;
            row1.City = row18.City;
            row1.Region = row18.Region;
            row1.Country = row18.Country;
            row1.Phone = row18.Phone;
            row1.AlternativePhone = row18.AlternativePhone;
            row1.Fax = row18.Fax;
            row1.ShipToAddress = row18.ShipToAddress;
            row1.PayFromAddress = row18.PayFromAddress;
            row1.InvoiceToAddress = row18.InvoiceToAddress;
            row1.RemitToAddress = row18.RemitToAddress;
            row1.ConsumptionDays = row18.ConsumptionDays;
            row1.ShowGeneric = row18.ShowGeneric;
            row1.ShowIban = row18.ShowIban;
            row1.BankAccountNo = row18.BankAccountNo;
            row1.IBAN = row18.IBAN;
            row1.ContactUser = row18.ContactUser;
            row1.Firstname = row18.Firstname;
            row1.Lastname = row18.Lastname;
            row1.ContactDescription = row18.ContactDescription;
            row1.Email = row18.Email;
            row1.Position = row18.Position;
            row1.ContactPhone = row18.ContactPhone;
            row1.ContactAlternativePhone = row18.ContactAlternativePhone;
            row1.ContactFax = row18.ContactFax;
            row1.Vendor = row18.Vendor;
            row1.POPaymentMethod = row18.POPaymentMethod;
            row1.POPaymentTerms = row18.POPaymentTerms;
            row1.PurchasePriceList = row18.PurchasePriceList;
            row1.TaxCategory = row18.TaxCategory;
            row1.POFinancialAccount = row18.POFinancialAccount;
            row1.Customer = row18.Customer;
            row1.CustomerPaymentMethod = row18.CustomerPaymentMethod;
            row1.PaymentTerm = row18.PaymentTerm;
            row1.PriceList = row18.PriceList;
            row1.soTaxCategory = row18.soTaxCategory;
            row1.CustomerFinancialAccount = row18.CustomerFinancialAccount;
            row1.soInvoiceSchedule = row18.soInvoiceSchedule;
            row1.soInvoicesTerms = row18.soInvoicesTerms;
            row1.Employee = row18.Employee;
            row1.IsSalesRepresentative = row18.IsSalesRepresentative;
            row1.flag = row18.flag;
            row1.whyError = row18.whyError;
            nb_line_ok_tFilterRow_11++;
          } else {
            if (row23 == null) {
              row23 = new row23Struct();
            }
            row23.Organization = row18.Organization;
            row23.Searchkey = row18.Searchkey;
            row23.Name = row18.Name;
            row23.FiscalName = row18.FiscalName;
            row23.Description = row18.Description;
            row23.TaxID = row18.TaxID;
            row23.TaxExempt = row18.TaxExempt;
            row23.ReferenceNo = row18.ReferenceNo;
            row23.Category = row18.Category;
            row23.Language = row18.Language;
            row23.Adderss1stLine = row18.Adderss1stLine;
            row23.Address2ndLine = row18.Address2ndLine;
            row23.PostalCode = row18.PostalCode;
            row23.City = row18.City;
            row23.Region = row18.Region;
            row23.Country = row18.Country;
            row23.Phone = row18.Phone;
            row23.AlternativePhone = row18.AlternativePhone;
            row23.Fax = row18.Fax;
            row23.ShipToAddress = row18.ShipToAddress;
            row23.PayFromAddress = row18.PayFromAddress;
            row23.InvoiceToAddress = row18.InvoiceToAddress;
            row23.RemitToAddress = row18.RemitToAddress;
            row23.ConsumptionDays = row18.ConsumptionDays;
            row23.ShowGeneric = row18.ShowGeneric;
            row23.ShowIban = row18.ShowIban;
            row23.BankAccountNo = row18.BankAccountNo;
            row23.IBAN = row18.IBAN;
            row23.ContactUser = row18.ContactUser;
            row23.Firstname = row18.Firstname;
            row23.Lastname = row18.Lastname;
            row23.ContactDescription = row18.ContactDescription;
            row23.Email = row18.Email;
            row23.Position = row18.Position;
            row23.ContactPhone = row18.ContactPhone;
            row23.ContactAlternativePhone = row18.ContactAlternativePhone;
            row23.ContactFax = row18.ContactFax;
            row23.Vendor = row18.Vendor;
            row23.POPaymentMethod = row18.POPaymentMethod;
            row23.POPaymentTerms = row18.POPaymentTerms;
            row23.PurchasePriceList = row18.PurchasePriceList;
            row23.TaxCategory = row18.TaxCategory;
            row23.POFinancialAccount = row18.POFinancialAccount;
            row23.Customer = row18.Customer;
            row23.CustomerPaymentMethod = row18.CustomerPaymentMethod;
            row23.PaymentTerm = row18.PaymentTerm;
            row23.PriceList = row18.PriceList;
            row23.soTaxCategory = row18.soTaxCategory;
            row23.CustomerFinancialAccount = row18.CustomerFinancialAccount;
            row23.soInvoiceSchedule = row18.soInvoiceSchedule;
            row23.soInvoicesTerms = row18.soInvoicesTerms;
            row23.Employee = row18.Employee;
            row23.IsSalesRepresentative = row18.IsSalesRepresentative;
            row23.flag = row18.flag;
            row23.whyError = row18.whyError;
            nb_line_reject_tFilterRow_11++;
          }
          nb_line_tFilterRow_11++;

          /**
           * [tFilterRow_11 main ] stop
           */
          // Start of branch "row1"
          if (row1 != null) {

            /**
             * [tJavaRow_1 main ] start
             */

            currentComponent = "tJavaRow_1";

            row2.flag = "0";
            row2.whyError = "";

            row2.Organization = row1.Organization;
            row2.Searchkey = row1.Searchkey;
            row2.Name = row1.Name;
            row2.FiscalName = row1.FiscalName;
            row2.Description = row1.Description;
            row2.TaxID = row1.TaxID;
            row2.TaxExempt = row1.TaxExempt;
            row2.ReferenceNo = row1.ReferenceNo;
            row2.Category = row1.Category;

            row2.Language = row1.Language;
            if (row1.Language != null) {
              Language objLang = service.findDALInstance(false, Language.class, new Value(
                  Language.PROPERTY_LANGUAGE, row1.Language));
              if (objLang == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row1.Language
                    + "\n";
              }
            }

            row2.Adderss1stLine = row1.Adderss1stLine;
            row2.Address2ndLine = row1.Address2ndLine;
            row2.PostalCode = row1.PostalCode;
            row2.City = row1.City;

            row2.Region = row1.Region;
            row2.Country = row1.Country;
            // Region and Country
            if (row1.Country != null) {
              Country country = service.findDALInstance(false, Country.class, new Value("name",
                  row1.Country));
              if (country == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row1.Country
                    + "\n";
              } else {
                if (row1.Region != null) {
                  Region region = service.findDALInstance(false, Region.class, new Value("country",
                      country), new Value("name", row1.Region));
                  if (region == null) {
                    row2.flag = "-1";
                    row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row1.Region
                        + "\n";
                  } else {
                    row2.Country = row1.Country;
                    row2.Region = row1.Region;
                  }
                }
              }
            }

            row2.Phone = row1.Phone;
            row2.AlternativePhone = row1.AlternativePhone;
            row2.Fax = row1.Fax;
            row2.ShipToAddress = row1.ShipToAddress;
            row2.PayFromAddress = row1.PayFromAddress;
            row2.InvoiceToAddress = row1.InvoiceToAddress;
            row2.RemitToAddress = row1.RemitToAddress;
            row2.ConsumptionDays = row1.ConsumptionDays;
            row2.ShowGeneric = row1.ShowGeneric;
            row2.ShowIban = row1.ShowIban;
            row2.BankAccountNo = row1.BankAccountNo;
            row2.IBAN = row1.IBAN;
            row2.ContactUser = row1.ContactUser;
            row2.Firstname = row1.Firstname;
            row2.Lastname = row1.Lastname;
            row2.ContactDescription = row1.ContactDescription;
            row2.Email = row1.Email;
            row2.Position = row1.Position;
            row2.ContactPhone = row1.ContactPhone;
            row2.ContactAlternativePhone = row1.ContactAlternativePhone;
            row2.ContactFax = row1.ContactFax;
            row2.Vendor = row1.Vendor;

            // PO Payment Method
            row2.POPaymentMethod = row1.POPaymentMethod;

            // PO Payment Term
            row2.POPaymentTerms = row1.POPaymentTerms;
            if (row1.POPaymentTerms != null) {
              PaymentTerm objPOPaymentTermn = service.findDALInstance(false, PaymentTerm.class,
                  new Value("searchKey", row1.POPaymentTerms));
              if (objPOPaymentTermn == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE")
                    + row1.POPaymentTerms + "\n";
              }
            }

            // Purchase Price list
            row2.PurchasePriceList = row1.PurchasePriceList;
            if (row1.PurchasePriceList != null) {
              PriceList objPurchasePriceList = service.findDALInstance(false, PriceList.class,
                  new Value("name", row1.PurchasePriceList), new Value("salesPriceList", false));
              if (objPurchasePriceList == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE")
                    + row1.PurchasePriceList + "\n";
              }
            }

            // Tax Category
            row2.TaxCategory = row1.TaxCategory;
            if (row1.TaxCategory != null) {
              TaxCategory objTaxCategory = service.findDALInstance(false, TaxCategory.class,
                  new Value("name", row1.TaxCategory));
              if (objTaxCategory == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row1.TaxCategory
                    + "\n";
              }
            }

            // PO Financial Account
            row2.POFinancialAccount = row1.POFinancialAccount;
            if (row1.POFinancialAccount != null) {
              FIN_FinancialAccount objFinancialAccount = service.findDALInstance(false,
                  FIN_FinancialAccount.class, new Value("name", row1.POFinancialAccount));
              if (objFinancialAccount == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE")
                    + row1.POFinancialAccount + "\n";
              }
            }

            row2.Customer = row1.Customer;

            // Customer Payment Method
            row2.CustomerPaymentMethod = row1.CustomerPaymentMethod;

            // Payment term
            row2.PaymentTerm = row1.PaymentTerm;
            if (row1.PaymentTerm != null) {
              PaymentTerm objPaymentTermn = service.findDALInstance(false, PaymentTerm.class,
                  new Value("searchKey", row1.PaymentTerm));
              if (objPaymentTermn == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row1.PaymentTerm
                    + "\n";
              }
            }

            // Sales price list
            row2.PriceList = row1.PriceList;
            if (row1.PriceList != null) {
              PriceList objPriceList = service.findDALInstance(false, PriceList.class, new Value(
                  "name", row1.PriceList), new Value("salesPriceList", true));
              if (objPriceList == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row1.PriceList
                    + "\n";
              }
            }

            // Customer tax category
            row2.soTaxCategory = row1.soTaxCategory;
            if (row1.soTaxCategory != null) {
              TaxCategory objSoTaxCat = service.findDALInstance(false, TaxCategory.class,
                  new Value("name", row1.soTaxCategory));
              if (objSoTaxCat == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE")
                    + row1.soTaxCategory + "\n";
              }
            }

            // Customer bank account
            row2.CustomerFinancialAccount = row1.CustomerFinancialAccount;
            if (row1.CustomerFinancialAccount != null) {
              FIN_FinancialAccount objFinancialAccount = service.findDALInstance(false,
                  FIN_FinancialAccount.class, new Value("name", row1.CustomerFinancialAccount));
              if (objFinancialAccount == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE")
                    + row1.CustomerFinancialAccount + "\n";
              }
            }

            // Invoice schedule
            row2.soInvoiceSchedule = row1.soInvoiceSchedule;
            if (row1.soInvoiceSchedule != null) {
              InvoiceSchedule objInvoSche = service.findDALInstance(false, InvoiceSchedule.class,
                  new Value("name", row1.soInvoiceSchedule));
              if (objInvoSche == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE")
                    + row1.soInvoiceSchedule + "\n";
              }
            }

            // Customer Invoice terms
            row2.soInvoicesTerms = row1.soInvoicesTerms;
            if (service.getReferenceValue("C_Order InvoiceRule", row1.soInvoicesTerms) == null
                && row1.soInvoicesTerms != null) {
              row2.flag = "-1";
              row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE")
                  + row1.soInvoicesTerms + "\n";
            }

            row2.Employee = row1.Employee;
            row2.IsSalesRepresentative = row1.IsSalesRepresentative;

            nb_line_tJavaRow_1++;

            /**
             * [tJavaRow_1 main ] stop
             */

            /**
             * [tFilterRow_10 main ] start
             */

            currentComponent = "tFilterRow_10";

            row3 = null;
            row19 = null;

            if (

            (row2.flag == null ? false : row2.flag.toLowerCase().compareTo("0") == 0)

            )

            {
              if (row3 == null) {
                row3 = new row3Struct();
              }
              row3.Organization = row2.Organization;
              row3.Searchkey = row2.Searchkey;
              row3.Name = row2.Name;
              row3.FiscalName = row2.FiscalName;
              row3.Description = row2.Description;
              row3.TaxID = row2.TaxID;
              row3.TaxExempt = row2.TaxExempt;
              row3.ReferenceNo = row2.ReferenceNo;
              row3.Category = row2.Category;
              row3.Language = row2.Language;
              row3.Adderss1stLine = row2.Adderss1stLine;
              row3.Address2ndLine = row2.Address2ndLine;
              row3.PostalCode = row2.PostalCode;
              row3.City = row2.City;
              row3.Region = row2.Region;
              row3.Country = row2.Country;
              row3.Phone = row2.Phone;
              row3.AlternativePhone = row2.AlternativePhone;
              row3.Fax = row2.Fax;
              row3.ShipToAddress = row2.ShipToAddress;
              row3.PayFromAddress = row2.PayFromAddress;
              row3.InvoiceToAddress = row2.InvoiceToAddress;
              row3.RemitToAddress = row2.RemitToAddress;
              row3.ConsumptionDays = row2.ConsumptionDays;
              row3.ShowGeneric = row2.ShowGeneric;
              row3.ShowIban = row2.ShowIban;
              row3.BankAccountNo = row2.BankAccountNo;
              row3.IBAN = row2.IBAN;
              row3.ContactUser = row2.ContactUser;
              row3.Firstname = row2.Firstname;
              row3.Lastname = row2.Lastname;
              row3.ContactDescription = row2.ContactDescription;
              row3.Email = row2.Email;
              row3.Position = row2.Position;
              row3.ContactPhone = row2.ContactPhone;
              row3.ContactAlternativePhone = row2.ContactAlternativePhone;
              row3.ContactFax = row2.ContactFax;
              row3.Vendor = row2.Vendor;
              row3.POPaymentMethod = row2.POPaymentMethod;
              row3.POPaymentTerms = row2.POPaymentTerms;
              row3.PurchasePriceList = row2.PurchasePriceList;
              row3.TaxCategory = row2.TaxCategory;
              row3.POFinancialAccount = row2.POFinancialAccount;
              row3.Customer = row2.Customer;
              row3.CustomerPaymentMethod = row2.CustomerPaymentMethod;
              row3.PaymentTerm = row2.PaymentTerm;
              row3.PriceList = row2.PriceList;
              row3.soTaxCategory = row2.soTaxCategory;
              row3.CustomerFinancialAccount = row2.CustomerFinancialAccount;
              row3.soInvoiceSchedule = row2.soInvoiceSchedule;
              row3.soInvoicesTerms = row2.soInvoicesTerms;
              row3.Employee = row2.Employee;
              row3.IsSalesRepresentative = row2.IsSalesRepresentative;
              row3.flag = row2.flag;
              row3.whyError = row2.whyError;
              nb_line_ok_tFilterRow_10++;
            } else {
              if (row19 == null) {
                row19 = new row19Struct();
              }
              row19.Organization = row2.Organization;
              row19.Searchkey = row2.Searchkey;
              row19.Name = row2.Name;
              row19.FiscalName = row2.FiscalName;
              row19.Description = row2.Description;
              row19.TaxID = row2.TaxID;
              row19.TaxExempt = row2.TaxExempt;
              row19.ReferenceNo = row2.ReferenceNo;
              row19.Category = row2.Category;
              row19.Language = row2.Language;
              row19.Adderss1stLine = row2.Adderss1stLine;
              row19.Address2ndLine = row2.Address2ndLine;
              row19.PostalCode = row2.PostalCode;
              row19.City = row2.City;
              row19.Region = row2.Region;
              row19.Country = row2.Country;
              row19.Phone = row2.Phone;
              row19.AlternativePhone = row2.AlternativePhone;
              row19.Fax = row2.Fax;
              row19.ShipToAddress = row2.ShipToAddress;
              row19.PayFromAddress = row2.PayFromAddress;
              row19.InvoiceToAddress = row2.InvoiceToAddress;
              row19.RemitToAddress = row2.RemitToAddress;
              row19.ConsumptionDays = row2.ConsumptionDays;
              row19.ShowGeneric = row2.ShowGeneric;
              row19.ShowIban = row2.ShowIban;
              row19.BankAccountNo = row2.BankAccountNo;
              row19.IBAN = row2.IBAN;
              row19.ContactUser = row2.ContactUser;
              row19.Firstname = row2.Firstname;
              row19.Lastname = row2.Lastname;
              row19.ContactDescription = row2.ContactDescription;
              row19.Email = row2.Email;
              row19.Position = row2.Position;
              row19.ContactPhone = row2.ContactPhone;
              row19.ContactAlternativePhone = row2.ContactAlternativePhone;
              row19.ContactFax = row2.ContactFax;
              row19.Vendor = row2.Vendor;
              row19.POPaymentMethod = row2.POPaymentMethod;
              row19.POPaymentTerms = row2.POPaymentTerms;
              row19.PurchasePriceList = row2.PurchasePriceList;
              row19.TaxCategory = row2.TaxCategory;
              row19.POFinancialAccount = row2.POFinancialAccount;
              row19.Customer = row2.Customer;
              row19.CustomerPaymentMethod = row2.CustomerPaymentMethod;
              row19.PaymentTerm = row2.PaymentTerm;
              row19.PriceList = row2.PriceList;
              row19.soTaxCategory = row2.soTaxCategory;
              row19.CustomerFinancialAccount = row2.CustomerFinancialAccount;
              row19.soInvoiceSchedule = row2.soInvoiceSchedule;
              row19.soInvoicesTerms = row2.soInvoicesTerms;
              row19.Employee = row2.Employee;
              row19.IsSalesRepresentative = row2.IsSalesRepresentative;
              row19.flag = row2.flag;
              row19.whyError = row2.whyError;
              nb_line_reject_tFilterRow_10++;
            }
            nb_line_tFilterRow_10++;

            /**
             * [tFilterRow_10 main ] stop
             */
            // Start of branch "row3"
            if (row3 != null) {

              /**
               * [tJavaRow_18 main ] start
               */

              currentComponent = "tJavaRow_18";

              service.finishRecordProcess(row3.Organization, row3.Searchkey, row3.Name,
                  row3.FiscalName, row3.Description, row3.TaxID, row3.TaxExempt, row3.ReferenceNo,
                  row3.Category, row3.Language, row3.Adderss1stLine, row3.Address2ndLine,
                  row3.PostalCode, row3.City, row3.Region, row3.Country, row3.Phone,
                  row3.AlternativePhone, row3.Fax, row3.ShipToAddress, row3.PayFromAddress,
                  row3.InvoiceToAddress, row3.RemitToAddress, row3.ConsumptionDays,
                  row3.ShowGeneric, row3.ShowIban, row3.BankAccountNo, row3.IBAN, row3.ContactUser,
                  row3.Firstname, row3.Lastname, row3.ContactDescription, row3.Email,
                  row3.Position, row3.ContactPhone, row3.ContactAlternativePhone, row3.ContactFax,
                  row3.Vendor, row3.POPaymentMethod, row3.POPaymentTerms, row3.PurchasePriceList,
                  row3.TaxCategory, row3.POFinancialAccount, row3.Customer,
                  row3.CustomerPaymentMethod, row3.PaymentTerm, row3.PriceList, row3.soTaxCategory,
                  row3.CustomerFinancialAccount, row3.soInvoiceSchedule, row3.soInvoicesTerms,
                  row3.Employee, row3.IsSalesRepresentative);
              nb_line_tJavaRow_18++;

              /**
               * [tJavaRow_18 main ] stop
               */

            } // End of branch "row3"

            // Start of branch "row19"
            if (row19 != null) {

              /**
               * [tJavaRow_9 main ] start
               */

              currentComponent = "tJavaRow_9";

              service.logRecordError(row19.whyError, row19.Organization, row19.Searchkey,
                  row19.Name, row19.FiscalName, row19.Description, row19.TaxID, row19.TaxExempt,
                  row19.ReferenceNo, row19.Category, row19.Language, row19.Adderss1stLine,
                  row19.Address2ndLine, row19.PostalCode, row19.City, row19.Region, row19.Country,
                  row19.Phone, row19.AlternativePhone, row19.Fax, row19.ShipToAddress,
                  row19.PayFromAddress, row19.InvoiceToAddress, row19.RemitToAddress,
                  row19.ConsumptionDays, row19.ShowGeneric, row19.ShowIban, row19.BankAccountNo,
                  row19.IBAN, row19.ContactUser, row19.Firstname, row19.Lastname,
                  row19.ContactDescription, row19.Email, row19.Position, row19.ContactPhone,
                  row19.ContactAlternativePhone, row19.ContactFax, row19.Vendor,
                  row19.POPaymentMethod, row19.POPaymentTerms, row19.PurchasePriceList,
                  row19.TaxCategory, row19.POFinancialAccount, row19.Customer,
                  row19.CustomerPaymentMethod, row19.PaymentTerm, row19.PriceList,
                  row19.soTaxCategory, row19.CustomerFinancialAccount, row19.soInvoiceSchedule,
                  row19.soInvoicesTerms, row19.Employee, row19.IsSalesRepresentative);
              nb_line_tJavaRow_9++;

              /**
               * [tJavaRow_9 main ] stop
               */

            } // End of branch "row19"

          } // End of branch "row1"

          // Start of branch "row23"
          if (row23 != null) {

            /**
             * [tJavaRow_16 main ] start
             */

            currentComponent = "tJavaRow_16";

            service.logRecordError(row23.whyError, row23.Organization, row23.Searchkey, row23.Name,
                row23.FiscalName, row23.Description, row23.TaxID, row23.TaxExempt,
                row23.ReferenceNo, row23.Category, row23.Language, row23.Adderss1stLine,
                row23.Address2ndLine, row23.PostalCode, row23.City, row23.Region, row23.Country,
                row23.Phone, row23.AlternativePhone, row23.Fax, row23.ShipToAddress,
                row23.PayFromAddress, row23.InvoiceToAddress, row23.RemitToAddress,
                row23.ConsumptionDays, row23.ShowGeneric, row23.ShowIban, row23.BankAccountNo,
                row23.IBAN, row23.ContactUser, row23.Firstname, row23.Lastname,
                row23.ContactDescription, row23.Email, row23.Position, row23.ContactPhone,
                row23.ContactAlternativePhone, row23.ContactFax, row23.Vendor,
                row23.POPaymentMethod, row23.POPaymentTerms, row23.PurchasePriceList,
                row23.TaxCategory, row23.POFinancialAccount, row23.Customer,
                row23.CustomerPaymentMethod, row23.PaymentTerm, row23.PriceList,
                row23.soTaxCategory, row23.CustomerFinancialAccount, row23.soInvoiceSchedule,
                row23.soInvoicesTerms, row23.Employee, row23.IsSalesRepresentative);
            nb_line_tJavaRow_16++;

            /**
             * [tJavaRow_16 main ] stop
             */

          } // End of branch "row23"

        } // End of branch "row16"

        /**
         * [tFileInputDelimited_1 end ] start
         */

        currentComponent = "tFileInputDelimited_1";

        nb_line_tFileInputDelimited_1++;
      }
      csvReadertFileInputDelimited_1.close();
      globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);

      ok_Hash.put("tFileInputDelimited_1", true);
      end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

      /**
       * [tFileInputDelimited_1 end ] stop
       */

      /**
       * [tJavaRow_11 end ] start
       */

      currentComponent = "tJavaRow_11";

      globalMap.put("tJavaRow_11_NB_LINE", nb_line_tJavaRow_11);

      ok_Hash.put("tJavaRow_11", true);
      end_Hash.put("tJavaRow_11", System.currentTimeMillis());

      /**
       * [tJavaRow_11 end ] stop
       */

      /**
       * [tFilterRow_11 end ] start
       */

      currentComponent = "tFilterRow_11";

      globalMap.put("tFilterRow_11_NB_LINE", nb_line_tFilterRow_11);
      globalMap.put("tFilterRow_11_NB_LINE_OK", nb_line_ok_tFilterRow_11);
      globalMap.put("tFilterRow_11_NB_LINE_REJECT", nb_line_reject_tFilterRow_11);

      ok_Hash.put("tFilterRow_11", true);
      end_Hash.put("tFilterRow_11", System.currentTimeMillis());

      /**
       * [tFilterRow_11 end ] stop
       */

      /**
       * [tJavaRow_1 end ] start
       */

      currentComponent = "tJavaRow_1";

      globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

      ok_Hash.put("tJavaRow_1", true);
      end_Hash.put("tJavaRow_1", System.currentTimeMillis());

      /**
       * [tJavaRow_1 end ] stop
       */

      /**
       * [tFilterRow_10 end ] start
       */

      currentComponent = "tFilterRow_10";

      globalMap.put("tFilterRow_10_NB_LINE", nb_line_tFilterRow_10);
      globalMap.put("tFilterRow_10_NB_LINE_OK", nb_line_ok_tFilterRow_10);
      globalMap.put("tFilterRow_10_NB_LINE_REJECT", nb_line_reject_tFilterRow_10);

      ok_Hash.put("tFilterRow_10", true);
      end_Hash.put("tFilterRow_10", System.currentTimeMillis());

      /**
       * [tFilterRow_10 end ] stop
       */

      /**
       * [tJavaRow_18 end ] start
       */

      currentComponent = "tJavaRow_18";

      globalMap.put("tJavaRow_18_NB_LINE", nb_line_tJavaRow_18);

      ok_Hash.put("tJavaRow_18", true);
      end_Hash.put("tJavaRow_18", System.currentTimeMillis());

      /**
       * [tJavaRow_18 end ] stop
       */

      /**
       * [tJavaRow_9 end ] start
       */

      currentComponent = "tJavaRow_9";

      globalMap.put("tJavaRow_9_NB_LINE", nb_line_tJavaRow_9);

      ok_Hash.put("tJavaRow_9", true);
      end_Hash.put("tJavaRow_9", System.currentTimeMillis());

      /**
       * [tJavaRow_9 end ] stop
       */

      /**
       * [tJavaRow_16 end ] start
       */

      currentComponent = "tJavaRow_16";

      globalMap.put("tJavaRow_16_NB_LINE", nb_line_tJavaRow_16);

      ok_Hash.put("tJavaRow_16", true);
      end_Hash.put("tJavaRow_16", System.currentTimeMillis());

      /**
       * [tJavaRow_16 end ] stop
       */

    } catch (Exception e) {

      throw new TalendException(e, currentComponent, globalMap);

    }

    globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
  }

  public boolean watch = false;
  public int portStats = 3334;
  public int portTraces = 4334;
  public String clientHost;
  public String defaultClientHost = "localhost";
  public String contextStr = "Default";
  public String pid = "0";
  public String rootPid = null;
  public String fatherPid = null;
  public long startTime = 0;
  public boolean isChildJob = false;

  private ThreadLocal threadLocal = new ThreadLocal();
  {
    java.util.Map threadRunResultMap = new java.util.HashMap();
    threadRunResultMap.put("errorCode", null);
    threadRunResultMap.put("status", "");
    threadLocal.set(threadRunResultMap);
  }

  private java.util.Properties context_param = new java.util.Properties();

  public String status = "";

  public static void main(String[] args) {
    final BusinessPartnerJob BusinessPartnerJobClass = new BusinessPartnerJob();

    int exitCode = BusinessPartnerJobClass.runJobInTOS(args);

    System.exit(exitCode);
  }

  public String[][] runJob(String[] args) {

    int exitCode = runJobInTOS(args);
    String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

    return bufferValue;
  }

  public int runJobInTOS(String[] args) {

    String lastStr = "";
    for (String arg : args) {
      if (arg.equalsIgnoreCase("--context_param")) {
        lastStr = arg;
      } else if (lastStr.equals("")) {
        evalParam(arg);
      } else {
        evalParam(lastStr + " " + arg);
        lastStr = "";
      }
    }

    if (clientHost == null) {
      clientHost = defaultClientHost;
    }

    if (pid == null || "0".equals(pid)) {
      pid = TalendString.getAsciiRandomString(6);
    }

    if (rootPid == null) {
      rootPid = pid;
    }
    if (fatherPid == null) {
      fatherPid = pid;
    } else {
      isChildJob = true;
    }

    try {
      java.io.InputStream inContext = BusinessPartnerJob.class.getClassLoader()
          .getResourceAsStream(
              "initial_data_load/businesspartnerjob_0_1/contexts/Default.properties");
      if (inContext != null) {
        defaultProps.load(inContext);
        inContext.close();
        context = new ContextProperties(defaultProps);
      }

      if (contextStr.compareTo("Default") != 0) {
        inContext = BusinessPartnerJob.class.getClassLoader().getResourceAsStream(
            "initial_data_load/businesspartnerjob_0_1/contexts/" + contextStr + ".properties");
        if (inContext != null) {
          context.load(inContext);
          inContext.close();
        }
      }

      if (!context_param.isEmpty()) {
        context.putAll(context_param);
      }

      try {
        context.executeInsert = Boolean.parseBoolean(context.getProperty("executeInsert"));
      } catch (NumberFormatException e) {
        context.executeInsert = null;
      }

      context.filename = (String) context.getProperty("filename");

      try {
        context.numLinesOk = Integer.parseInt(context.getProperty("numLinesOk"));
      } catch (NumberFormatException e) {
        context.numLinesOk = null;
      }

      try {
        context.numLinesRejected = Integer.parseInt(context.getProperty("numLinesRejected"));
      } catch (NumberFormatException e) {
        context.numLinesRejected = null;
      }

      context.validationFailCause = (String) context.getProperty("validationFailCause");

    } catch (java.io.IOException ie) {
      System.err.println("Could not load context " + contextStr);
      ie.printStackTrace();
    }

    long end = 0;

    startTime = System.currentTimeMillis();

    try {
      errorCode = null;
      tFileInputDelimited_1Process(globalMap);
      status = "end";
    } catch (TalendException e_tFileInputDelimited_1) {
      status = "failure";
      e_tFileInputDelimited_1.printStackTrace();
      globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

    } finally {
    }

    end = System.currentTimeMillis();

    if (watch) {
      System.out.println((end - startTime) + " milliseconds");
    }

    if (errorCode == null) {
      return status != null && status.equals("failure") ? 1 : 0;
    } else {
      return errorCode.intValue();
    }
  }

  private void evalParam(String arg) {
    if (arg.startsWith("--watch")) {
      watch = true;
    } else if (arg.startsWith("--stat_port=")) {
      portStats = Integer.parseInt(arg.substring(12));
    } else if (arg.startsWith("--trace_port=")) {
      portTraces = Integer.parseInt(arg.substring(13));
    } else if (arg.startsWith("--client_host=")) {
      clientHost = arg.substring(14);
    } else if (arg.startsWith("--context=")) {
      contextStr = arg.substring(10);
    } else if (arg.startsWith("--father_pid=")) {
      fatherPid = arg.substring(13);
    } else if (arg.startsWith("--root_pid=")) {
      rootPid = arg.substring(11);
    } else if (arg.startsWith("--pid=")) {
      pid = arg.substring(6);
    } else if (arg.startsWith("--context_param")) {
      String keyValue = arg.substring(16);
      int index = -1;
      if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
        context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
      }
    }

  }

  public Integer getErrorCode() {
    return errorCode;
  }

  public String getStatus() {
    return status;
  }
}
/************************************************************************************************
 * 506018 characters generated by Talend Open Studio on the 2 de febrero de 2012 13:16:11 CET
 ************************************************************************************************/
