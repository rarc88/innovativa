// ============================================================================
//
// Copyright (c) 2005-2016, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 3.1.4.r29781).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package org.openbravo.idl.initial_data_load.costingjob_0_1;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.openbravo.idl.proc.Value;
import org.openbravo.model.common.currency.Currency;
import org.openbravo.model.common.enterprise.Warehouse;
import org.openbravo.model.common.plm.Product;

import routines.TalendString;
import routines.system.TDieException;

//the import part of tJavaRow_8
//import java.util.List;

/**
 * Job: CostingJob Purpose: <br>
 * Description: <br>
 * 
 * @author
 * @version 3.1.4.r29781
 * @status
 */
@SuppressWarnings({ "rawtypes", "unchecked", "hiding" })
public class CostingJob {

  public final Object obj = new Object();
  // create and load default properties
  private java.util.Properties defaultProps = new java.util.Properties();

  // create application properties with default
  private class ContextProperties extends java.util.Properties {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;

    public ContextProperties(java.util.Properties properties) {
      super(properties);
    }

    public ContextProperties() {
      super();
    }

    @SuppressWarnings("unused")
    public void synchronizeContext() {

    }

  }

  private ContextProperties context = new ContextProperties();
  public Integer errorCode = null;
  private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
  private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
  public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

  private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
  private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
      new java.io.BufferedOutputStream(baos));

  public String getExceptionStackTrace() {
    errorMessagePS.flush();
    return baos.toString();
  }

  @SuppressWarnings("serial")
  private class TalendException extends Exception {
    private java.util.Map<String, Object> globalMap = null;
    private Exception e = null;
    private String currentComponent = null;

    private TalendException(Exception e, String errorComponent,
        final java.util.Map<String, Object> globalMap) {
      this.currentComponent = errorComponent;
      this.globalMap = globalMap;
      this.e = e;
    }

    @Override
    public void printStackTrace() {
      if (!(e instanceof TalendException || e instanceof TDieException)) {
        globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
        System.err.println("Exception in component " + currentComponent);
      }
      if (!(e instanceof TDieException)) {
        if (e instanceof TalendException) {
          e.printStackTrace();
        } else {
          e.printStackTrace();
          e.printStackTrace(errorMessagePS);
        }
      }
      if (!(e instanceof TalendException)) {
        try {
          for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
            if (m.getName().compareTo(currentComponent + "_error") == 0) {
              m.invoke(CostingJob.this, new Object[] { e, globalMap });
              break;
            }
          }

          if (!(e instanceof TDieException)) {
          }
        } catch (java.lang.SecurityException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalArgumentException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalAccessException e) {
          this.e.printStackTrace();
        } catch (java.lang.reflect.InvocationTargetException e) {
          this.e.printStackTrace();
        }
      }
    }
  }

  public void tFileInputDelimited_2_error(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
    end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
    tFileInputDelimited_2_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_1_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_1", System.currentTimeMillis());
    tFileInputDelimited_2_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_1_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_1", System.currentTimeMillis());
    tFileInputDelimited_2_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_5_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_5", System.currentTimeMillis());
    tFileInputDelimited_2_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_2_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_2", System.currentTimeMillis());
    tFileInputDelimited_2_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_8_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_8", System.currentTimeMillis());
    tFileInputDelimited_2_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_4_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_4", System.currentTimeMillis());
    tFileInputDelimited_2_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_3_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_3", System.currentTimeMillis());
    tFileInputDelimited_2_onSubJobError(exception, globalMap);
  }

  public void tFileInputDelimited_2_onSubJobError(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
  }

  static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String Product;
    String CostType;
    String Cost;
    String StartingDate;
    String EndingDate;
    String Quantity;
    String TotalMovementQuantity;
    String Price;
    String Warehouse;
    String Currency;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CostType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CostType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Cost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Cost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StartingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StartingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EndingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EndingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TotalMovementQuantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TotalMovementQuantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CostType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CostType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Cost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Cost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StartingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StartingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EndingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EndingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TotalMovementQuantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TotalMovementQuantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("CostType");
      sb.append("=");
      sb.append(String.valueOf(this.CostType));

      sb.append(", ");

      sb.append("Cost");
      sb.append("=");
      sb.append(String.valueOf(this.Cost));

      sb.append(", ");

      sb.append("StartingDate");
      sb.append("=");
      sb.append(String.valueOf(this.StartingDate));

      sb.append(", ");

      sb.append("EndingDate");
      sb.append("=");
      sb.append(String.valueOf(this.EndingDate));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("TotalMovementQuantity");
      sb.append("=");
      sb.append(String.valueOf(this.TotalMovementQuantity));

      sb.append(", ");

      sb.append("Price");
      sb.append("=");
      sb.append(String.valueOf(this.Price));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String Product;
    String CostType;
    String Cost;
    String StartingDate;
    String EndingDate;
    String Quantity;
    String TotalMovementQuantity;
    String Price;
    String Warehouse;
    String Currency;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CostType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CostType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Cost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Cost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StartingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StartingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EndingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EndingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TotalMovementQuantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TotalMovementQuantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CostType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CostType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Cost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Cost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StartingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StartingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EndingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EndingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TotalMovementQuantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TotalMovementQuantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("CostType");
      sb.append("=");
      sb.append(String.valueOf(this.CostType));

      sb.append(", ");

      sb.append("Cost");
      sb.append("=");
      sb.append(String.valueOf(this.Cost));

      sb.append(", ");

      sb.append("StartingDate");
      sb.append("=");
      sb.append(String.valueOf(this.StartingDate));

      sb.append(", ");

      sb.append("EndingDate");
      sb.append("=");
      sb.append(String.valueOf(this.EndingDate));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("TotalMovementQuantity");
      sb.append("=");
      sb.append(String.valueOf(this.TotalMovementQuantity));

      sb.append(", ");

      sb.append("Price");
      sb.append("=");
      sb.append(String.valueOf(this.Price));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String Product;
    String CostType;
    String Cost;
    String StartingDate;
    String EndingDate;
    String Quantity;
    String TotalMovementQuantity;
    String Price;
    String Warehouse;
    String Currency;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CostType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CostType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Cost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Cost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StartingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StartingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EndingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EndingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TotalMovementQuantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TotalMovementQuantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CostType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CostType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Cost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Cost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StartingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StartingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EndingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EndingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TotalMovementQuantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TotalMovementQuantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("CostType");
      sb.append("=");
      sb.append(String.valueOf(this.CostType));

      sb.append(", ");

      sb.append("Cost");
      sb.append("=");
      sb.append(String.valueOf(this.Cost));

      sb.append(", ");

      sb.append("StartingDate");
      sb.append("=");
      sb.append(String.valueOf(this.StartingDate));

      sb.append(", ");

      sb.append("EndingDate");
      sb.append("=");
      sb.append(String.valueOf(this.EndingDate));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("TotalMovementQuantity");
      sb.append("=");
      sb.append(String.valueOf(this.TotalMovementQuantity));

      sb.append(", ");

      sb.append("Price");
      sb.append("=");
      sb.append(String.valueOf(this.Price));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String Product;
    String CostType;
    String Cost;
    String StartingDate;
    String EndingDate;
    String Quantity;
    String TotalMovementQuantity;
    String Price;
    String Warehouse;
    String Currency;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CostType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CostType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Cost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Cost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StartingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StartingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EndingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EndingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TotalMovementQuantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TotalMovementQuantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CostType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CostType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Cost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Cost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StartingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StartingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EndingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EndingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TotalMovementQuantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TotalMovementQuantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("CostType");
      sb.append("=");
      sb.append(String.valueOf(this.CostType));

      sb.append(", ");

      sb.append("Cost");
      sb.append("=");
      sb.append(String.valueOf(this.Cost));

      sb.append(", ");

      sb.append("StartingDate");
      sb.append("=");
      sb.append(String.valueOf(this.StartingDate));

      sb.append(", ");

      sb.append("EndingDate");
      sb.append("=");
      sb.append(String.valueOf(this.EndingDate));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("TotalMovementQuantity");
      sb.append("=");
      sb.append(String.valueOf(this.TotalMovementQuantity));

      sb.append(", ");

      sb.append("Price");
      sb.append("=");
      sb.append(String.valueOf(this.Price));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String Product;
    String CostType;
    String Cost;
    String StartingDate;
    String EndingDate;
    String Quantity;
    String TotalMovementQuantity;
    String Price;
    String Warehouse;
    String Currency;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CostType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CostType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Cost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Cost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StartingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StartingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EndingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EndingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TotalMovementQuantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TotalMovementQuantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CostType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CostType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Cost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Cost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StartingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StartingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EndingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EndingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TotalMovementQuantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TotalMovementQuantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("CostType");
      sb.append("=");
      sb.append(String.valueOf(this.CostType));

      sb.append(", ");

      sb.append("Cost");
      sb.append("=");
      sb.append(String.valueOf(this.Cost));

      sb.append(", ");

      sb.append("StartingDate");
      sb.append("=");
      sb.append(String.valueOf(this.StartingDate));

      sb.append(", ");

      sb.append("EndingDate");
      sb.append("=");
      sb.append(String.valueOf(this.EndingDate));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("TotalMovementQuantity");
      sb.append("=");
      sb.append(String.valueOf(this.TotalMovementQuantity));

      sb.append(", ");

      sb.append("Price");
      sb.append("=");
      sb.append(String.valueOf(this.Price));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String Product;
    String CostType;
    String Cost;
    String StartingDate;
    String EndingDate;
    String Quantity;
    String TotalMovementQuantity;
    String Price;
    String Warehouse;
    String Currency;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CostType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CostType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Cost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Cost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StartingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StartingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EndingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EndingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TotalMovementQuantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TotalMovementQuantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CostType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CostType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Cost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Cost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StartingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StartingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EndingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EndingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TotalMovementQuantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TotalMovementQuantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("CostType");
      sb.append("=");
      sb.append(String.valueOf(this.CostType));

      sb.append(", ");

      sb.append("Cost");
      sb.append("=");
      sb.append(String.valueOf(this.Cost));

      sb.append(", ");

      sb.append("StartingDate");
      sb.append("=");
      sb.append(String.valueOf(this.StartingDate));

      sb.append(", ");

      sb.append("EndingDate");
      sb.append("=");
      sb.append(String.valueOf(this.EndingDate));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("TotalMovementQuantity");
      sb.append("=");
      sb.append(String.valueOf(this.TotalMovementQuantity));

      sb.append(", ");

      sb.append("Price");
      sb.append("=");
      sb.append(String.valueOf(this.Price));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String Product;
    String CostType;
    String Cost;
    String StartingDate;
    String EndingDate;
    String Quantity;
    String TotalMovementQuantity;
    String Price;
    String Warehouse;
    String Currency;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CostType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CostType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Cost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Cost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StartingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StartingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.EndingDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.EndingDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TotalMovementQuantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TotalMovementQuantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Price = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Price = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CostType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CostType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Cost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Cost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StartingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StartingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.EndingDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.EndingDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TotalMovementQuantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TotalMovementQuantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Price == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Price.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("CostType");
      sb.append("=");
      sb.append(String.valueOf(this.CostType));

      sb.append(", ");

      sb.append("Cost");
      sb.append("=");
      sb.append(String.valueOf(this.Cost));

      sb.append(", ");

      sb.append("StartingDate");
      sb.append("=");
      sb.append(String.valueOf(this.StartingDate));

      sb.append(", ");

      sb.append("EndingDate");
      sb.append("=");
      sb.append(String.valueOf(this.EndingDate));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("TotalMovementQuantity");
      sb.append("=");
      sb.append(String.valueOf(this.TotalMovementQuantity));

      sb.append(", ");

      sb.append("Price");
      sb.append("=");
      sb.append(String.valueOf(this.Price));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap)
      throws TalendException {
    globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

    String currentComponent = "";

    try {

      row1Struct row1 = new row1Struct();
      row2Struct row2 = new row2Struct();
      row4Struct row4 = new row4Struct();
      row7Struct row7 = new row7Struct();
      row3Struct row3 = new row3Struct();
      row8Struct row8 = new row8Struct();
      row5Struct row5 = new row5Struct();

      /**
       * [tJavaRow_8 begin ] start
       */

      ok_Hash.put("tJavaRow_8", false);
      start_Hash.put("tJavaRow_8", System.currentTimeMillis());
      currentComponent = "tJavaRow_8";

      int nb_line_tJavaRow_8 = 0;

      /**
       * [tJavaRow_8 begin ] stop
       */

      /**
       * [tJavaRow_4 begin ] start
       */

      ok_Hash.put("tJavaRow_4", false);
      start_Hash.put("tJavaRow_4", System.currentTimeMillis());
      currentComponent = "tJavaRow_4";

      int nb_line_tJavaRow_4 = 0;

      /**
       * [tJavaRow_4 begin ] stop
       */

      /**
       * [tFilterRow_2 begin ] start
       */

      ok_Hash.put("tFilterRow_2", false);
      start_Hash.put("tFilterRow_2", System.currentTimeMillis());
      currentComponent = "tFilterRow_2";

      int nb_line_tFilterRow_2 = 0;
      int nb_line_ok_tFilterRow_2 = 0;
      int nb_line_reject_tFilterRow_2 = 0;

      /**
       * [tFilterRow_2 begin ] stop
       */

      /**
       * [tJavaRow_5 begin ] start
       */

      ok_Hash.put("tJavaRow_5", false);
      start_Hash.put("tJavaRow_5", System.currentTimeMillis());
      currentComponent = "tJavaRow_5";

      int nb_line_tJavaRow_5 = 0;

      /**
       * [tJavaRow_5 begin ] stop
       */

      /**
       * [tJavaRow_3 begin ] start
       */

      ok_Hash.put("tJavaRow_3", false);
      start_Hash.put("tJavaRow_3", System.currentTimeMillis());
      currentComponent = "tJavaRow_3";

      int nb_line_tJavaRow_3 = 0;

      /**
       * [tJavaRow_3 begin ] stop
       */

      /**
       * [tFilterRow_1 begin ] start
       */

      ok_Hash.put("tFilterRow_1", false);
      start_Hash.put("tFilterRow_1", System.currentTimeMillis());
      currentComponent = "tFilterRow_1";

      int nb_line_tFilterRow_1 = 0;
      int nb_line_ok_tFilterRow_1 = 0;
      int nb_line_reject_tFilterRow_1 = 0;

      /**
       * [tFilterRow_1 begin ] stop
       */

      /**
       * [tJavaRow_1 begin ] start
       */

      ok_Hash.put("tJavaRow_1", false);
      start_Hash.put("tJavaRow_1", System.currentTimeMillis());
      currentComponent = "tJavaRow_1";

      int nb_line_tJavaRow_1 = 0;

      /**
       * [tJavaRow_1 begin ] stop
       */

      /**
       * [tFileInputDelimited_2 begin ] start
       */

      ok_Hash.put("tFileInputDelimited_2", false);
      start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
      currentComponent = "tFileInputDelimited_2";

      int nb_line_tFileInputDelimited_2 = 0;
      int footer_tFileInputDelimited_2 = 0;
      int totalLinetFileInputDelimited_2 = 0;
      int limittFileInputDelimited_2 = -1;
      int lastLinetFileInputDelimited_2 = -1;

      char fieldSeparator_tFileInputDelimited_2[] = null;

      // support passing value (property: Field Separator) by 'context.fs'
      // or 'globalMap.get("fs")'.
      if (((String) ",").length() > 0) {
        fieldSeparator_tFileInputDelimited_2 = ((String) ",").toCharArray();
      } else {
        throw new IllegalArgumentException("Field Separator must be assigned a char.");
      }

      char rowSeparator_tFileInputDelimited_2[] = null;

      // support passing value (property: Row Separator) by 'context.rs'
      // or 'globalMap.get("rs")'.
      if (((String) "\n").length() > 0) {
        rowSeparator_tFileInputDelimited_2 = ((String) "\n").toCharArray();
      } else {
        throw new IllegalArgumentException("Row Separator must be assigned a char.");
      }

      com.csvreader.CsvReader csvReadertFileInputDelimited_2 = new com.csvreader.CsvReader(
          new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(/**
           * 
           * Start field tFileInputDelimited_2:FILENAME
           */
          context.getProperty("filename")/**
           * End field tFileInputDelimited_2:FILENAME
           */
          ), "UTF-8")), fieldSeparator_tFileInputDelimited_2[0]);

      if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
          && (rowSeparator_tFileInputDelimited_2[0] != '\r'))
        csvReadertFileInputDelimited_2.setRecordDelimiter(rowSeparator_tFileInputDelimited_2[0]);

      csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
      csvReadertFileInputDelimited_2.setTextQualifier('"');

      csvReadertFileInputDelimited_2.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      String[] rowtFileInputDelimited_2 = null;

      if (footer_tFileInputDelimited_2 > 0) {

        while (csvReadertFileInputDelimited_2.readRecord()) {
          rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2.getValues();
          if (!(rowtFileInputDelimited_2.length == 1 && ("\015")
              .equals(rowtFileInputDelimited_2[0]))) {// empty
            // line when
            // row
            // separator
            // is '\n'

            totalLinetFileInputDelimited_2++;

          }

        }
        int lastLineTemptFileInputDelimited_2 = totalLinetFileInputDelimited_2
            - footer_tFileInputDelimited_2 < 0 ? 0 : totalLinetFileInputDelimited_2
            - footer_tFileInputDelimited_2;
        if (lastLinetFileInputDelimited_2 > 0) {
          lastLinetFileInputDelimited_2 = lastLinetFileInputDelimited_2 < lastLineTemptFileInputDelimited_2 ? lastLinetFileInputDelimited_2
              : lastLineTemptFileInputDelimited_2;
        } else {
          lastLinetFileInputDelimited_2 = lastLineTemptFileInputDelimited_2;
        }

        csvReadertFileInputDelimited_2.close();

        csvReadertFileInputDelimited_2 = new com.csvreader.CsvReader(new java.io.BufferedReader(
            new java.io.InputStreamReader(new java.io.FileInputStream(/**
             * Start field
             * tFileInputDelimited_2:FILENAME
             */
            context.getProperty("filename")/**
             * End field tFileInputDelimited_2:FILENAME
             */
            ), "UTF-8")), fieldSeparator_tFileInputDelimited_2[0]);

        if ((rowSeparator_tFileInputDelimited_2[0] != '\n')
            && (rowSeparator_tFileInputDelimited_2[0] != '\r'))
          csvReadertFileInputDelimited_2.setRecordDelimiter(rowSeparator_tFileInputDelimited_2[0]);
        csvReadertFileInputDelimited_2.setSkipEmptyRecords(true);
        csvReadertFileInputDelimited_2.setTextQualifier('"');
        csvReadertFileInputDelimited_2.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      }

      int currentLinetFileInputDelimited_2 = 0;
      int outputLinetFileInputDelimited_2 = 0;

      while (limittFileInputDelimited_2 != 0 && csvReadertFileInputDelimited_2.readRecord()) {

        rowtFileInputDelimited_2 = csvReadertFileInputDelimited_2.getValues();

        if (rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
          // line
          // when
          // row
          // separator
          // is
          // '\n'
          continue;
        }

        currentLinetFileInputDelimited_2++;
        if (currentLinetFileInputDelimited_2 < 1 + 1) {
          continue;
        }

        if (lastLinetFileInputDelimited_2 > -1
            && currentLinetFileInputDelimited_2 > lastLinetFileInputDelimited_2) {
          break;
        }
        outputLinetFileInputDelimited_2++;
        if (limittFileInputDelimited_2 > 0
            && outputLinetFileInputDelimited_2 > limittFileInputDelimited_2) {
          break;
        }

        row1 = null;
        row1 = new row1Struct();
        try {

          if (rowtFileInputDelimited_2.length == 1 && ("\015").equals(rowtFileInputDelimited_2[0])) {// empty
            // line
            // when
            // row
            // separator
            // is
            // '\n'

            row1.Organization = null;

            row1.Product = null;

            row1.CostType = null;

            row1.Cost = null;

            row1.StartingDate = null;

            row1.EndingDate = null;

            row1.Quantity = null;

            row1.TotalMovementQuantity = null;

            row1.Price = null;

            row1.Warehouse = null;

            row1.Currency = null;

          } else {

            if (0 < rowtFileInputDelimited_2.length) {
              row1.Organization = rowtFileInputDelimited_2[0];

            } else {
              row1.Organization = null;
            }

            if (1 < rowtFileInputDelimited_2.length) {
              row1.Product = rowtFileInputDelimited_2[1];

            } else {
              row1.Product = null;
            }

            if (2 < rowtFileInputDelimited_2.length) {
              row1.CostType = rowtFileInputDelimited_2[2];

            } else {
              row1.CostType = null;
            }

            if (3 < rowtFileInputDelimited_2.length) {
              row1.Cost = rowtFileInputDelimited_2[3];

            } else {
              row1.Cost = null;
            }

            if (4 < rowtFileInputDelimited_2.length) {
              row1.StartingDate = rowtFileInputDelimited_2[4];

            } else {
              row1.StartingDate = null;
            }

            if (5 < rowtFileInputDelimited_2.length) {
              row1.EndingDate = rowtFileInputDelimited_2[5];

            } else {
              row1.EndingDate = null;
            }

            if (6 < rowtFileInputDelimited_2.length) {
              row1.Quantity = rowtFileInputDelimited_2[6];

            } else {
              row1.Quantity = null;
            }

            if (7 < rowtFileInputDelimited_2.length) {
              row1.TotalMovementQuantity = rowtFileInputDelimited_2[7];

            } else {
              row1.TotalMovementQuantity = null;
            }

            if (8 < rowtFileInputDelimited_2.length) {
              row1.Price = rowtFileInputDelimited_2[8];

            } else {
              row1.Price = null;
            }

            if (9 < rowtFileInputDelimited_2.length) {
              row1.Warehouse = rowtFileInputDelimited_2[9];

            } else {
              row1.Warehouse = null;
            }

            if (10 < rowtFileInputDelimited_2.length) {
              row1.Currency = rowtFileInputDelimited_2[10];

            } else {
              row1.Currency = null;
            }

          }

        } catch (Exception e) {
          System.err.println(e.getMessage());
          row1 = null;
        }

        /**
         * [tFileInputDelimited_2 begin ] stop
         */
        /**
         * [tFileInputDelimited_2 main ] start
         */

        currentComponent = "tFileInputDelimited_2";

        /**
         * [tFileInputDelimited_2 main ] stop
         */
        // Start of branch "row1"
        if (row1 != null) {

          /**
           * [tJavaRow_1 main ] start
           */

          currentComponent = "tJavaRow_1";

          org.openbravo.idl.proc.IdlService service = org.openbravo.idl.proc.IdlIntService
              .getInstance().getService("Costing");
          org.openbravo.idl.proc.Validator validator = service.getValidator("Costing");

          row2.Organization = validator.checkOrganization(row1.Organization);
          row2.Product = validator.checkNotNull(validator.checkString(row1.Product, 40), "Product");
          row2.CostType = validator.checkNotNull(
              validator.checkString(row1.CostType, 32, "CostType"), "CostType");
          row2.Cost = validator.checkNotNull(validator.checkBigDecimal(row1.Cost), "Cost");
          row2.StartingDate = validator.checkNotNull(
              validator.checkDate(row1.StartingDate, "StartingDate"), "StartingDate");
          row2.EndingDate = validator.checkNotNull(
              validator.checkDate(row1.EndingDate, "EndingDate"), "EndingDate");
          row2.Quantity = validator.checkBigDecimal(row1.Quantity);
          row2.TotalMovementQuantity = validator.checkBigDecimal(row1.TotalMovementQuantity);
          row2.Price = validator.checkBigDecimal(row1.Price);
          row2.Warehouse = validator.checkString(row1.Warehouse, 40);
          row2.Currency = validator.checkString(row1.Currency, 3);

          row2.flag = validator.getErrorCode();
          row2.whyError = validator.getErrorMessage();
          nb_line_tJavaRow_1++;

          /**
           * [tJavaRow_1 main ] stop
           */

          /**
           * [tFilterRow_1 main ] start
           */

          currentComponent = "tFilterRow_1";

          row4 = null;
          row5 = null;

          if (

          (row2.flag == null ? false : row2.flag.toLowerCase().compareTo("0") == 0)

          )

          {
            if (row4 == null) {
              row4 = new row4Struct();
            }
            row4.Organization = row2.Organization;
            row4.Product = row2.Product;
            row4.CostType = row2.CostType;
            row4.Cost = row2.Cost;
            row4.StartingDate = row2.StartingDate;
            row4.EndingDate = row2.EndingDate;
            row4.Quantity = row2.Quantity;
            row4.TotalMovementQuantity = row2.TotalMovementQuantity;
            row4.Price = row2.Price;
            row4.Warehouse = row2.Warehouse;
            row4.Currency = row2.Currency;
            row4.flag = row2.flag;
            row4.whyError = row2.whyError;
            nb_line_ok_tFilterRow_1++;
          } else {
            if (row5 == null) {
              row5 = new row5Struct();
            }
            row5.Organization = row2.Organization;
            row5.Product = row2.Product;
            row5.CostType = row2.CostType;
            row5.Cost = row2.Cost;
            row5.StartingDate = row2.StartingDate;
            row5.EndingDate = row2.EndingDate;
            row5.Quantity = row2.Quantity;
            row5.TotalMovementQuantity = row2.TotalMovementQuantity;
            row5.Price = row2.Price;
            row5.Warehouse = row2.Warehouse;
            row5.Currency = row2.Currency;
            row5.flag = row2.flag;
            row5.whyError = row2.whyError;
            nb_line_reject_tFilterRow_1++;
          }
          nb_line_tFilterRow_1++;

          /**
           * [tFilterRow_1 main ] stop
           */
          // Start of branch "row4"
          if (row4 != null) {

            /**
             * [tJavaRow_5 main ] start
             */

            currentComponent = "tJavaRow_5";

            Product product = service.findDALInstance(true, Product.class, new Value(
                Product.PROPERTY_SEARCHKEY, row4.Product));
            row7.flag = product == null ? "-1" : "0";
            row7.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.Product;
            Warehouse warehouse = service.findDALInstance(true, Warehouse.class, new Value(
                Warehouse.PROPERTY_SEARCHKEY, row4.Warehouse));
            row7.flag = warehouse == null ? "-1" : "0";
            row7.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.Warehouse;
            Currency currency = service.findDALInstance(true, Currency.class, new Value(
                Currency.PROPERTY_ISOCODE, row4.Currency));
            row7.flag = (currency == null && row4.Currency != null) ? "-1" : "0";
            row7.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.Currency;

            // fields transfer
            row7.Organization = row4.Organization;
            row7.Product = row4.Product;
            row7.CostType = row4.CostType;
            row7.Cost = row4.Cost;
            row7.StartingDate = row4.StartingDate;
            row7.EndingDate = row4.EndingDate;
            row7.Quantity = row4.Quantity;
            row7.TotalMovementQuantity = row4.TotalMovementQuantity;
            row7.Price = row4.Price;
            row7.Warehouse = row4.Warehouse;
            row7.Currency = row4.Currency;
            nb_line_tJavaRow_5++;

            /**
             * [tJavaRow_5 main ] stop
             */

            /**
             * [tFilterRow_2 main ] start
             */

            currentComponent = "tFilterRow_2";

            row3 = null;
            row8 = null;

            if (

            (row7.flag == null ? false : row7.flag.toLowerCase().compareTo("0") == 0)

            )

            {
              if (row3 == null) {
                row3 = new row3Struct();
              }
              row3.Organization = row7.Organization;
              row3.Product = row7.Product;
              row3.CostType = row7.CostType;
              row3.Cost = row7.Cost;
              row3.StartingDate = row7.StartingDate;
              row3.EndingDate = row7.EndingDate;
              row3.Quantity = row7.Quantity;
              row3.TotalMovementQuantity = row7.TotalMovementQuantity;
              row3.Price = row7.Price;
              row3.Warehouse = row7.Warehouse;
              row3.Currency = row7.Currency;
              row3.flag = row7.flag;
              row3.whyError = row7.whyError;
              nb_line_ok_tFilterRow_2++;
            } else {
              if (row8 == null) {
                row8 = new row8Struct();
              }
              row8.Organization = row7.Organization;
              row8.Product = row7.Product;
              row8.CostType = row7.CostType;
              row8.Cost = row7.Cost;
              row8.StartingDate = row7.StartingDate;
              row8.EndingDate = row7.EndingDate;
              row8.Quantity = row7.Quantity;
              row8.TotalMovementQuantity = row7.TotalMovementQuantity;
              row8.Price = row7.Price;
              row8.Warehouse = row7.Warehouse;
              row8.Currency = row7.Currency;
              row8.flag = row7.flag;
              row8.whyError = row7.whyError;
              nb_line_reject_tFilterRow_2++;
            }
            nb_line_tFilterRow_2++;

            /**
             * [tFilterRow_2 main ] stop
             */
            // Start of branch "row3"
            if (row3 != null) {

              /**
               * [tJavaRow_8 main ] start
               */

              currentComponent = "tJavaRow_8";

              org.openbravo.idl.proc.IdlService service3 = org.openbravo.idl.proc.IdlIntService
                  .getInstance().getService("Costing");

              service3.finishRecordProcess(row3.Organization, row3.Product, row3.CostType,
                  row3.Cost, row3.StartingDate, row3.EndingDate, row3.Quantity,
                  row3.TotalMovementQuantity, row3.Price, row3.Warehouse, row3.Currency);

              nb_line_tJavaRow_8++;

              /**
               * [tJavaRow_8 main ] stop
               */

            } // End of branch "row3"

            // Start of branch "row8"
            if (row8 != null) {

              /**
               * [tJavaRow_4 main ] start
               */

              currentComponent = "tJavaRow_4";

              org.openbravo.idl.proc.IdlService service6 = org.openbravo.idl.proc.IdlIntService
                  .getInstance().getService("Costing");

              service6.logRecordError(row8.whyError, row8.Organization, row8.Product,
                  row8.CostType, row8.Cost, row8.StartingDate, row8.EndingDate, row8.Quantity,
                  row8.TotalMovementQuantity, row8.Price, row8.Warehouse, row8.Currency);

              nb_line_tJavaRow_4++;

              /**
               * [tJavaRow_4 main ] stop
               */

            } // End of branch "row8"

          } // End of branch "row4"

          // Start of branch "row5"
          if (row5 != null) {

            /**
             * [tJavaRow_3 main ] start
             */

            currentComponent = "tJavaRow_3";

            org.openbravo.idl.proc.IdlService service2 = org.openbravo.idl.proc.IdlIntService
                .getInstance().getService("Costing");

            service2.logRecordError(row5.whyError, row5.Organization, row5.Product, row5.CostType,
                row5.Cost, row5.StartingDate, row5.EndingDate, row5.Quantity,
                row5.TotalMovementQuantity, row5.Price, row5.Warehouse, row5.Currency);

            nb_line_tJavaRow_3++;

            /**
             * [tJavaRow_3 main ] stop
             */

          } // End of branch "row5"

        } // End of branch "row1"

        /**
         * [tFileInputDelimited_2 end ] start
         */

        currentComponent = "tFileInputDelimited_2";

        nb_line_tFileInputDelimited_2++;
      }
      csvReadertFileInputDelimited_2.close();
      globalMap.put("tFileInputDelimited_2_NB_LINE", nb_line_tFileInputDelimited_2);

      ok_Hash.put("tFileInputDelimited_2", true);
      end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

      /**
       * [tFileInputDelimited_2 end ] stop
       */

      /**
       * [tJavaRow_1 end ] start
       */

      currentComponent = "tJavaRow_1";

      globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

      ok_Hash.put("tJavaRow_1", true);
      end_Hash.put("tJavaRow_1", System.currentTimeMillis());

      /**
       * [tJavaRow_1 end ] stop
       */

      /**
       * [tFilterRow_1 end ] start
       */

      currentComponent = "tFilterRow_1";

      globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
      globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
      globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

      ok_Hash.put("tFilterRow_1", true);
      end_Hash.put("tFilterRow_1", System.currentTimeMillis());

      /**
       * [tFilterRow_1 end ] stop
       */

      /**
       * [tJavaRow_5 end ] start
       */

      currentComponent = "tJavaRow_5";

      globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);

      ok_Hash.put("tJavaRow_5", true);
      end_Hash.put("tJavaRow_5", System.currentTimeMillis());

      /**
       * [tJavaRow_5 end ] stop
       */

      /**
       * [tFilterRow_2 end ] start
       */

      currentComponent = "tFilterRow_2";

      globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
      globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
      globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

      ok_Hash.put("tFilterRow_2", true);
      end_Hash.put("tFilterRow_2", System.currentTimeMillis());

      /**
       * [tFilterRow_2 end ] stop
       */

      /**
       * [tJavaRow_8 end ] start
       */

      currentComponent = "tJavaRow_8";

      globalMap.put("tJavaRow_8_NB_LINE", nb_line_tJavaRow_8);

      ok_Hash.put("tJavaRow_8", true);
      end_Hash.put("tJavaRow_8", System.currentTimeMillis());

      /**
       * [tJavaRow_8 end ] stop
       */

      /**
       * [tJavaRow_4 end ] start
       */

      currentComponent = "tJavaRow_4";

      globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

      ok_Hash.put("tJavaRow_4", true);
      end_Hash.put("tJavaRow_4", System.currentTimeMillis());

      /**
       * [tJavaRow_4 end ] stop
       */

      /**
       * [tJavaRow_3 end ] start
       */

      currentComponent = "tJavaRow_3";

      globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

      ok_Hash.put("tJavaRow_3", true);
      end_Hash.put("tJavaRow_3", System.currentTimeMillis());

      /**
       * [tJavaRow_3 end ] stop
       */

    } catch (Exception e) {

      throw new TalendException(e, currentComponent, globalMap);

    }

    globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
  }

  public boolean watch = false;
  public int portStats = 3334;
  public int portTraces = 4334;
  public String clientHost;
  public String defaultClientHost = "localhost";
  public String contextStr = "Default";
  public String pid = "0";
  public String rootPid = null;
  public String fatherPid = null;
  public long startTime = 0;
  public boolean isChildJob = false;

  private ThreadLocal threadLocal = new ThreadLocal();
  {
    java.util.Map threadRunResultMap = new java.util.HashMap();
    threadRunResultMap.put("errorCode", null);
    threadRunResultMap.put("status", "");
    threadLocal.set(threadRunResultMap);
  }

  private java.util.Properties context_param = new java.util.Properties();

  public String status = "";

  public static void main(String[] args) {
    final CostingJob CostingJobClass = new CostingJob();

    int exitCode = CostingJobClass.runJobInTOS(args);

    System.exit(exitCode);
  }

  public String[][] runJob(String[] args) {

    int exitCode = runJobInTOS(args);
    String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

    return bufferValue;
  }

  public int runJobInTOS(String[] args) {

    String lastStr = "";
    for (String arg : args) {
      if (arg.equalsIgnoreCase("--context_param")) {
        lastStr = arg;
      } else if (lastStr.equals("")) {
        evalParam(arg);
      } else {
        evalParam(lastStr + " " + arg);
        lastStr = "";
      }
    }

    if (clientHost == null) {
      clientHost = defaultClientHost;
    }

    if (pid == null || "0".equals(pid)) {
      pid = TalendString.getAsciiRandomString(6);
    }

    if (rootPid == null) {
      rootPid = pid;
    }
    if (fatherPid == null) {
      fatherPid = pid;
    } else {
      isChildJob = true;
    }

    try {
      java.io.InputStream inContext = CostingJob.class.getClassLoader().getResourceAsStream(
          "initial_data_load/costingjob_0_1/contexts/Default.properties");
      if (inContext != null) {
        defaultProps.load(inContext);
        inContext.close();
        context = new ContextProperties(defaultProps);
      }

      if (contextStr.compareTo("Default") != 0) {
        inContext = CostingJob.class.getClassLoader().getResourceAsStream(
            "initial_data_load/costingjob_0_1/contexts/" + contextStr + ".properties");
        if (inContext != null) {
          context.load(inContext);
          inContext.close();
        }
      }

      if (!context_param.isEmpty()) {
        context.putAll(context_param);
      }

    } catch (java.io.IOException ie) {
      System.err.println("Could not load context " + contextStr);
      ie.printStackTrace();
    }

    long end = 0;

    startTime = System.currentTimeMillis();

    try {
      errorCode = null;
      tFileInputDelimited_2Process(globalMap);
      status = "end";
    } catch (TalendException e_tFileInputDelimited_2) {
      status = "failure";
      e_tFileInputDelimited_2.printStackTrace();
      globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", -1);

    } finally {
    }

    end = System.currentTimeMillis();

    if (watch) {
      System.out.println((end - startTime) + " milliseconds");
    }

    if (errorCode == null) {
      return status != null && status.equals("failure") ? 1 : 0;
    } else {
      return errorCode.intValue();
    }
  }

  private void evalParam(String arg) {
    if (arg.startsWith("--watch")) {
      watch = true;
    } else if (arg.startsWith("--stat_port=")) {
      portStats = Integer.parseInt(arg.substring(12));
    } else if (arg.startsWith("--trace_port=")) {
      portTraces = Integer.parseInt(arg.substring(13));
    } else if (arg.startsWith("--client_host=")) {
      clientHost = arg.substring(14);
    } else if (arg.startsWith("--context=")) {
      contextStr = arg.substring(10);
    } else if (arg.startsWith("--father_pid=")) {
      fatherPid = arg.substring(13);
    } else if (arg.startsWith("--root_pid=")) {
      rootPid = arg.substring(11);
    } else if (arg.startsWith("--pid=")) {
      pid = arg.substring(6);
    } else if (arg.startsWith("--context_param")) {
      String keyValue = arg.substring(16);
      int index = -1;
      if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
        context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
      }
    }

  }

  public Integer getErrorCode() {
    return errorCode;
  }

  public String getStatus() {
    return status;
  }
}
/************************************************************************************************
 * 139747 characters generated by Talend Open Studio on the April 11, 2013 1:51:29 PM CEST
 ************************************************************************************************/

