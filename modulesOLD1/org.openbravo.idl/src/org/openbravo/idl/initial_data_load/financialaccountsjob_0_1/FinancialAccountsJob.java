// ============================================================================
//
// Copyright (c) 2005-2016, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 3.1.4.r29781).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
/*
 * The original Talend job is
 * Copyright (C) 2010-2016 Openbravo S.L.U.
 * Licensed under the Openbravo Commercial License version 1.0
 * You may obtain a copy of the License at http://www.openbravo.com/legal/obcl.html
 * or in the legal folder of this module distribution.
 */
package org.openbravo.idl.initial_data_load.financialaccountsjob_0_1;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.openbravo.idl.proc.Value;
import org.openbravo.model.common.currency.Currency;
import org.openbravo.model.common.geography.Country;
import org.openbravo.model.common.geography.Region;
import org.openbravo.model.financialmgmt.payment.MatchingAlgorithm;

import routines.TalendString;
import routines.system.TDieException;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJavaRow_5
//import java.util.List;

/**
 * Job: FinancialAccountsJob Purpose: <br>
 * Description: <br>
 * 
 * @author adrianromero@openbravo.com
 * @version 3.1.4.r29781
 * @status
 */
@SuppressWarnings({ "rawtypes", "unchecked", "hiding" })
public class FinancialAccountsJob {

  public final Object obj = new Object();
  // create and load default properties
  private java.util.Properties defaultProps = new java.util.Properties();

  // create application properties with default
  private class ContextProperties extends java.util.Properties {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;

    public ContextProperties(java.util.Properties properties) {
      super(properties);
    }

    public ContextProperties() {
      super();
    }

    @SuppressWarnings("unused")
    public void synchronizeContext() {

    }

  }

  private ContextProperties context = new ContextProperties();
  public Integer errorCode = null;
  private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
  private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
  public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

  private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
  private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
      new java.io.BufferedOutputStream(baos));

  public String getExceptionStackTrace() {
    errorMessagePS.flush();
    return baos.toString();
  }

  @SuppressWarnings("serial")
  private class TalendException extends Exception {
    private java.util.Map<String, Object> globalMap = null;
    private Exception e = null;
    private String currentComponent = null;

    private TalendException(Exception e, String errorComponent,
        final java.util.Map<String, Object> globalMap) {
      this.currentComponent = errorComponent;
      this.globalMap = globalMap;
      this.e = e;
    }

    @Override
    public void printStackTrace() {
      if (!(e instanceof TalendException || e instanceof TDieException)) {
        globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
        System.err.println("Exception in component " + currentComponent);
      }
      if (!(e instanceof TDieException)) {
        if (e instanceof TalendException) {
          e.printStackTrace();
        } else {
          e.printStackTrace();
          e.printStackTrace(errorMessagePS);
        }
      }
      if (!(e instanceof TalendException)) {
        try {
          for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
            if (m.getName().compareTo(currentComponent + "_error") == 0) {
              m.invoke(FinancialAccountsJob.this, new Object[] { e, globalMap });
              break;
            }
          }

          if (!(e instanceof TDieException)) {
          }
        } catch (java.lang.SecurityException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalArgumentException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalAccessException e) {
          this.e.printStackTrace();
        } catch (java.lang.reflect.InvocationTargetException e) {
          this.e.printStackTrace();
        }
      }
    }
  }

  public void tFileInputDelimited_1_error(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
    end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_1_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_1_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_3_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_3", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_2_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_2", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_5_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_5", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_4_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_4", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_2_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_2", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFileInputDelimited_1_onSubJobError(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
  }

  static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Name;
    String Description;
    String Currency;
    String Type;
    String IsDefault;
    String BusinessPartner;
    String Location1stLine;
    String Location2ndLine;
    String LocationPostalCode;
    String LocationCity;
    String LocationRegion;
    String LocationCountry;
    String BankCode;
    String BranchCode;
    String BankControlDigit;
    String INENo;
    String SwiftCode;
    String AccountControlDigit;
    String PartialAccountNo;
    String AccountNo;
    String IBAN;
    String InitialBalance;
    String CreditLimit;
    String MatchingAlgorithm;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Name == null) ? 0 : this.Name.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row7Struct other = (row7Struct) obj;

      if (this.Name == null) {
        if (other.Name != null)
          return false;
      } else if (!this.Name.equals(other.Name))
        return false;

      return true;
    }

    public void copyDataTo(row7Struct other) {

      other.Organization = this.Organization;
      other.Name = this.Name;
      other.Description = this.Description;
      other.Currency = this.Currency;
      other.Type = this.Type;
      other.IsDefault = this.IsDefault;
      other.BusinessPartner = this.BusinessPartner;
      other.Location1stLine = this.Location1stLine;
      other.Location2ndLine = this.Location2ndLine;
      other.LocationPostalCode = this.LocationPostalCode;
      other.LocationCity = this.LocationCity;
      other.LocationRegion = this.LocationRegion;
      other.LocationCountry = this.LocationCountry;
      other.BankCode = this.BankCode;
      other.BranchCode = this.BranchCode;
      other.BankControlDigit = this.BankControlDigit;
      other.INENo = this.INENo;
      other.SwiftCode = this.SwiftCode;
      other.AccountControlDigit = this.AccountControlDigit;
      other.PartialAccountNo = this.PartialAccountNo;
      other.AccountNo = this.AccountNo;
      other.IBAN = this.IBAN;
      other.InitialBalance = this.InitialBalance;
      other.CreditLimit = this.CreditLimit;
      other.MatchingAlgorithm = this.MatchingAlgorithm;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row7Struct other) {

      other.Name = this.Name;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Type = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Type = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Location1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Location1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Location2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Location2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationPostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationPostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationCity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationCity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationCountry = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationCountry = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BranchCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BranchCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankControlDigit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankControlDigit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.INENo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.INENo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SwiftCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SwiftCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountControlDigit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountControlDigit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PartialAccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PartialAccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IBAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IBAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InitialBalance = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InitialBalance = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CreditLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CreditLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MatchingAlgorithm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MatchingAlgorithm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Type == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Type.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Location1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Location1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Location2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Location2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationPostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationPostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationCity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationCity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationCountry == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationCountry.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BranchCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BranchCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankControlDigit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankControlDigit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.INENo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.INENo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SwiftCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SwiftCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountControlDigit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountControlDigit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PartialAccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PartialAccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IBAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IBAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InitialBalance == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InitialBalance.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CreditLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CreditLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MatchingAlgorithm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MatchingAlgorithm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("Type");
      sb.append("=");
      sb.append(String.valueOf(this.Type));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("Location1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Location1stLine));

      sb.append(", ");

      sb.append("Location2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Location2ndLine));

      sb.append(", ");

      sb.append("LocationPostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.LocationPostalCode));

      sb.append(", ");

      sb.append("LocationCity");
      sb.append("=");
      sb.append(String.valueOf(this.LocationCity));

      sb.append(", ");

      sb.append("LocationRegion");
      sb.append("=");
      sb.append(String.valueOf(this.LocationRegion));

      sb.append(", ");

      sb.append("LocationCountry");
      sb.append("=");
      sb.append(String.valueOf(this.LocationCountry));

      sb.append(", ");

      sb.append("BankCode");
      sb.append("=");
      sb.append(String.valueOf(this.BankCode));

      sb.append(", ");

      sb.append("BranchCode");
      sb.append("=");
      sb.append(String.valueOf(this.BranchCode));

      sb.append(", ");

      sb.append("BankControlDigit");
      sb.append("=");
      sb.append(String.valueOf(this.BankControlDigit));

      sb.append(", ");

      sb.append("INENo");
      sb.append("=");
      sb.append(String.valueOf(this.INENo));

      sb.append(", ");

      sb.append("SwiftCode");
      sb.append("=");
      sb.append(String.valueOf(this.SwiftCode));

      sb.append(", ");

      sb.append("AccountControlDigit");
      sb.append("=");
      sb.append(String.valueOf(this.AccountControlDigit));

      sb.append(", ");

      sb.append("PartialAccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.PartialAccountNo));

      sb.append(", ");

      sb.append("AccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.AccountNo));

      sb.append(", ");

      sb.append("IBAN");
      sb.append("=");
      sb.append(String.valueOf(this.IBAN));

      sb.append(", ");

      sb.append("InitialBalance");
      sb.append("=");
      sb.append(String.valueOf(this.InitialBalance));

      sb.append(", ");

      sb.append("CreditLimit");
      sb.append("=");
      sb.append(String.valueOf(this.CreditLimit));

      sb.append(", ");

      sb.append("MatchingAlgorithm");
      sb.append("=");
      sb.append(String.valueOf(this.MatchingAlgorithm));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Name, other.Name);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Name;
    String Description;
    String Currency;
    String Type;
    String IsDefault;
    String BusinessPartner;
    String Location1stLine;
    String Location2ndLine;
    String LocationPostalCode;
    String LocationCity;
    String LocationRegion;
    String LocationCountry;
    String BankCode;
    String BranchCode;
    String BankControlDigit;
    String INENo;
    String SwiftCode;
    String AccountControlDigit;
    String PartialAccountNo;
    String AccountNo;
    String IBAN;
    String InitialBalance;
    String CreditLimit;
    String MatchingAlgorithm;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Name == null) ? 0 : this.Name.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row5Struct other = (row5Struct) obj;

      if (this.Name == null) {
        if (other.Name != null)
          return false;
      } else if (!this.Name.equals(other.Name))
        return false;

      return true;
    }

    public void copyDataTo(row5Struct other) {

      other.Organization = this.Organization;
      other.Name = this.Name;
      other.Description = this.Description;
      other.Currency = this.Currency;
      other.Type = this.Type;
      other.IsDefault = this.IsDefault;
      other.BusinessPartner = this.BusinessPartner;
      other.Location1stLine = this.Location1stLine;
      other.Location2ndLine = this.Location2ndLine;
      other.LocationPostalCode = this.LocationPostalCode;
      other.LocationCity = this.LocationCity;
      other.LocationRegion = this.LocationRegion;
      other.LocationCountry = this.LocationCountry;
      other.BankCode = this.BankCode;
      other.BranchCode = this.BranchCode;
      other.BankControlDigit = this.BankControlDigit;
      other.INENo = this.INENo;
      other.SwiftCode = this.SwiftCode;
      other.AccountControlDigit = this.AccountControlDigit;
      other.PartialAccountNo = this.PartialAccountNo;
      other.AccountNo = this.AccountNo;
      other.IBAN = this.IBAN;
      other.InitialBalance = this.InitialBalance;
      other.CreditLimit = this.CreditLimit;
      other.MatchingAlgorithm = this.MatchingAlgorithm;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row5Struct other) {

      other.Name = this.Name;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Type = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Type = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Location1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Location1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Location2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Location2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationPostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationPostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationCity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationCity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationCountry = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationCountry = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BranchCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BranchCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankControlDigit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankControlDigit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.INENo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.INENo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SwiftCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SwiftCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountControlDigit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountControlDigit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PartialAccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PartialAccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IBAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IBAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InitialBalance = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InitialBalance = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CreditLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CreditLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MatchingAlgorithm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MatchingAlgorithm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Type == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Type.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Location1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Location1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Location2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Location2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationPostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationPostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationCity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationCity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationCountry == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationCountry.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BranchCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BranchCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankControlDigit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankControlDigit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.INENo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.INENo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SwiftCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SwiftCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountControlDigit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountControlDigit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PartialAccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PartialAccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IBAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IBAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InitialBalance == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InitialBalance.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CreditLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CreditLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MatchingAlgorithm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MatchingAlgorithm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("Type");
      sb.append("=");
      sb.append(String.valueOf(this.Type));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("Location1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Location1stLine));

      sb.append(", ");

      sb.append("Location2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Location2ndLine));

      sb.append(", ");

      sb.append("LocationPostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.LocationPostalCode));

      sb.append(", ");

      sb.append("LocationCity");
      sb.append("=");
      sb.append(String.valueOf(this.LocationCity));

      sb.append(", ");

      sb.append("LocationRegion");
      sb.append("=");
      sb.append(String.valueOf(this.LocationRegion));

      sb.append(", ");

      sb.append("LocationCountry");
      sb.append("=");
      sb.append(String.valueOf(this.LocationCountry));

      sb.append(", ");

      sb.append("BankCode");
      sb.append("=");
      sb.append(String.valueOf(this.BankCode));

      sb.append(", ");

      sb.append("BranchCode");
      sb.append("=");
      sb.append(String.valueOf(this.BranchCode));

      sb.append(", ");

      sb.append("BankControlDigit");
      sb.append("=");
      sb.append(String.valueOf(this.BankControlDigit));

      sb.append(", ");

      sb.append("INENo");
      sb.append("=");
      sb.append(String.valueOf(this.INENo));

      sb.append(", ");

      sb.append("SwiftCode");
      sb.append("=");
      sb.append(String.valueOf(this.SwiftCode));

      sb.append(", ");

      sb.append("AccountControlDigit");
      sb.append("=");
      sb.append(String.valueOf(this.AccountControlDigit));

      sb.append(", ");

      sb.append("PartialAccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.PartialAccountNo));

      sb.append(", ");

      sb.append("AccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.AccountNo));

      sb.append(", ");

      sb.append("IBAN");
      sb.append("=");
      sb.append(String.valueOf(this.IBAN));

      sb.append(", ");

      sb.append("InitialBalance");
      sb.append("=");
      sb.append(String.valueOf(this.InitialBalance));

      sb.append(", ");

      sb.append("CreditLimit");
      sb.append("=");
      sb.append(String.valueOf(this.CreditLimit));

      sb.append(", ");

      sb.append("MatchingAlgorithm");
      sb.append("=");
      sb.append(String.valueOf(this.MatchingAlgorithm));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Name, other.Name);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Name;
    String Description;
    String Currency;
    String Type;
    String IsDefault;
    String BusinessPartner;
    String Location1stLine;
    String Location2ndLine;
    String LocationPostalCode;
    String LocationCity;
    String LocationRegion;
    String LocationCountry;
    String BankCode;
    String BranchCode;
    String BankControlDigit;
    String INENo;
    String SwiftCode;
    String AccountControlDigit;
    String PartialAccountNo;
    String AccountNo;
    String IBAN;
    String InitialBalance;
    String CreditLimit;
    String MatchingAlgorithm;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Name == null) ? 0 : this.Name.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row6Struct other = (row6Struct) obj;

      if (this.Name == null) {
        if (other.Name != null)
          return false;
      } else if (!this.Name.equals(other.Name))
        return false;

      return true;
    }

    public void copyDataTo(row6Struct other) {

      other.Organization = this.Organization;
      other.Name = this.Name;
      other.Description = this.Description;
      other.Currency = this.Currency;
      other.Type = this.Type;
      other.IsDefault = this.IsDefault;
      other.BusinessPartner = this.BusinessPartner;
      other.Location1stLine = this.Location1stLine;
      other.Location2ndLine = this.Location2ndLine;
      other.LocationPostalCode = this.LocationPostalCode;
      other.LocationCity = this.LocationCity;
      other.LocationRegion = this.LocationRegion;
      other.LocationCountry = this.LocationCountry;
      other.BankCode = this.BankCode;
      other.BranchCode = this.BranchCode;
      other.BankControlDigit = this.BankControlDigit;
      other.INENo = this.INENo;
      other.SwiftCode = this.SwiftCode;
      other.AccountControlDigit = this.AccountControlDigit;
      other.PartialAccountNo = this.PartialAccountNo;
      other.AccountNo = this.AccountNo;
      other.IBAN = this.IBAN;
      other.InitialBalance = this.InitialBalance;
      other.CreditLimit = this.CreditLimit;
      other.MatchingAlgorithm = this.MatchingAlgorithm;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row6Struct other) {

      other.Name = this.Name;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Type = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Type = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Location1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Location1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Location2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Location2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationPostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationPostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationCity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationCity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationCountry = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationCountry = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BranchCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BranchCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankControlDigit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankControlDigit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.INENo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.INENo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SwiftCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SwiftCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountControlDigit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountControlDigit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PartialAccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PartialAccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IBAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IBAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InitialBalance = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InitialBalance = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CreditLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CreditLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MatchingAlgorithm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MatchingAlgorithm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Type == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Type.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Location1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Location1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Location2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Location2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationPostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationPostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationCity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationCity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationCountry == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationCountry.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BranchCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BranchCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankControlDigit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankControlDigit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.INENo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.INENo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SwiftCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SwiftCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountControlDigit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountControlDigit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PartialAccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PartialAccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IBAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IBAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InitialBalance == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InitialBalance.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CreditLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CreditLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MatchingAlgorithm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MatchingAlgorithm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("Type");
      sb.append("=");
      sb.append(String.valueOf(this.Type));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("Location1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Location1stLine));

      sb.append(", ");

      sb.append("Location2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Location2ndLine));

      sb.append(", ");

      sb.append("LocationPostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.LocationPostalCode));

      sb.append(", ");

      sb.append("LocationCity");
      sb.append("=");
      sb.append(String.valueOf(this.LocationCity));

      sb.append(", ");

      sb.append("LocationRegion");
      sb.append("=");
      sb.append(String.valueOf(this.LocationRegion));

      sb.append(", ");

      sb.append("LocationCountry");
      sb.append("=");
      sb.append(String.valueOf(this.LocationCountry));

      sb.append(", ");

      sb.append("BankCode");
      sb.append("=");
      sb.append(String.valueOf(this.BankCode));

      sb.append(", ");

      sb.append("BranchCode");
      sb.append("=");
      sb.append(String.valueOf(this.BranchCode));

      sb.append(", ");

      sb.append("BankControlDigit");
      sb.append("=");
      sb.append(String.valueOf(this.BankControlDigit));

      sb.append(", ");

      sb.append("INENo");
      sb.append("=");
      sb.append(String.valueOf(this.INENo));

      sb.append(", ");

      sb.append("SwiftCode");
      sb.append("=");
      sb.append(String.valueOf(this.SwiftCode));

      sb.append(", ");

      sb.append("AccountControlDigit");
      sb.append("=");
      sb.append(String.valueOf(this.AccountControlDigit));

      sb.append(", ");

      sb.append("PartialAccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.PartialAccountNo));

      sb.append(", ");

      sb.append("AccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.AccountNo));

      sb.append(", ");

      sb.append("IBAN");
      sb.append("=");
      sb.append(String.valueOf(this.IBAN));

      sb.append(", ");

      sb.append("InitialBalance");
      sb.append("=");
      sb.append(String.valueOf(this.InitialBalance));

      sb.append(", ");

      sb.append("CreditLimit");
      sb.append("=");
      sb.append(String.valueOf(this.CreditLimit));

      sb.append(", ");

      sb.append("MatchingAlgorithm");
      sb.append("=");
      sb.append(String.valueOf(this.MatchingAlgorithm));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Name, other.Name);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Name;
    String Description;
    String Currency;
    String Type;
    String IsDefault;
    String BusinessPartner;
    String Location1stLine;
    String Location2ndLine;
    String LocationPostalCode;
    String LocationCity;
    String LocationRegion;
    String LocationCountry;
    String BankCode;
    String BranchCode;
    String BankControlDigit;
    String INENo;
    String SwiftCode;
    String AccountControlDigit;
    String PartialAccountNo;
    String AccountNo;
    String IBAN;
    String InitialBalance;
    String CreditLimit;
    String MatchingAlgorithm;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Name == null) ? 0 : this.Name.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row4Struct other = (row4Struct) obj;

      if (this.Name == null) {
        if (other.Name != null)
          return false;
      } else if (!this.Name.equals(other.Name))
        return false;

      return true;
    }

    public void copyDataTo(row4Struct other) {

      other.Organization = this.Organization;
      other.Name = this.Name;
      other.Description = this.Description;
      other.Currency = this.Currency;
      other.Type = this.Type;
      other.IsDefault = this.IsDefault;
      other.BusinessPartner = this.BusinessPartner;
      other.Location1stLine = this.Location1stLine;
      other.Location2ndLine = this.Location2ndLine;
      other.LocationPostalCode = this.LocationPostalCode;
      other.LocationCity = this.LocationCity;
      other.LocationRegion = this.LocationRegion;
      other.LocationCountry = this.LocationCountry;
      other.BankCode = this.BankCode;
      other.BranchCode = this.BranchCode;
      other.BankControlDigit = this.BankControlDigit;
      other.INENo = this.INENo;
      other.SwiftCode = this.SwiftCode;
      other.AccountControlDigit = this.AccountControlDigit;
      other.PartialAccountNo = this.PartialAccountNo;
      other.AccountNo = this.AccountNo;
      other.IBAN = this.IBAN;
      other.InitialBalance = this.InitialBalance;
      other.CreditLimit = this.CreditLimit;
      other.MatchingAlgorithm = this.MatchingAlgorithm;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row4Struct other) {

      other.Name = this.Name;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Type = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Type = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Location1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Location1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Location2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Location2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationPostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationPostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationCity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationCity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationCountry = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationCountry = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BranchCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BranchCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankControlDigit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankControlDigit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.INENo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.INENo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SwiftCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SwiftCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountControlDigit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountControlDigit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PartialAccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PartialAccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IBAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IBAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InitialBalance = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InitialBalance = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CreditLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CreditLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MatchingAlgorithm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MatchingAlgorithm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Type == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Type.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Location1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Location1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Location2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Location2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationPostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationPostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationCity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationCity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationCountry == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationCountry.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BranchCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BranchCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankControlDigit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankControlDigit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.INENo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.INENo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SwiftCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SwiftCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountControlDigit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountControlDigit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PartialAccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PartialAccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IBAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IBAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InitialBalance == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InitialBalance.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CreditLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CreditLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MatchingAlgorithm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MatchingAlgorithm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("Type");
      sb.append("=");
      sb.append(String.valueOf(this.Type));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("Location1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Location1stLine));

      sb.append(", ");

      sb.append("Location2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Location2ndLine));

      sb.append(", ");

      sb.append("LocationPostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.LocationPostalCode));

      sb.append(", ");

      sb.append("LocationCity");
      sb.append("=");
      sb.append(String.valueOf(this.LocationCity));

      sb.append(", ");

      sb.append("LocationRegion");
      sb.append("=");
      sb.append(String.valueOf(this.LocationRegion));

      sb.append(", ");

      sb.append("LocationCountry");
      sb.append("=");
      sb.append(String.valueOf(this.LocationCountry));

      sb.append(", ");

      sb.append("BankCode");
      sb.append("=");
      sb.append(String.valueOf(this.BankCode));

      sb.append(", ");

      sb.append("BranchCode");
      sb.append("=");
      sb.append(String.valueOf(this.BranchCode));

      sb.append(", ");

      sb.append("BankControlDigit");
      sb.append("=");
      sb.append(String.valueOf(this.BankControlDigit));

      sb.append(", ");

      sb.append("INENo");
      sb.append("=");
      sb.append(String.valueOf(this.INENo));

      sb.append(", ");

      sb.append("SwiftCode");
      sb.append("=");
      sb.append(String.valueOf(this.SwiftCode));

      sb.append(", ");

      sb.append("AccountControlDigit");
      sb.append("=");
      sb.append(String.valueOf(this.AccountControlDigit));

      sb.append(", ");

      sb.append("PartialAccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.PartialAccountNo));

      sb.append(", ");

      sb.append("AccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.AccountNo));

      sb.append(", ");

      sb.append("IBAN");
      sb.append("=");
      sb.append(String.valueOf(this.IBAN));

      sb.append(", ");

      sb.append("InitialBalance");
      sb.append("=");
      sb.append(String.valueOf(this.InitialBalance));

      sb.append(", ");

      sb.append("CreditLimit");
      sb.append("=");
      sb.append(String.valueOf(this.CreditLimit));

      sb.append(", ");

      sb.append("MatchingAlgorithm");
      sb.append("=");
      sb.append(String.valueOf(this.MatchingAlgorithm));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Name, other.Name);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Name;
    String Description;
    String Currency;
    String Type;
    String IsDefault;
    String BusinessPartner;
    String Location1stLine;
    String Location2ndLine;
    String LocationPostalCode;
    String LocationCity;
    String LocationRegion;
    String LocationCountry;
    String BankCode;
    String BranchCode;
    String BankControlDigit;
    String INENo;
    String SwiftCode;
    String AccountControlDigit;
    String PartialAccountNo;
    String AccountNo;
    String IBAN;
    String InitialBalance;
    String CreditLimit;
    String MatchingAlgorithm;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Name == null) ? 0 : this.Name.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row3Struct other = (row3Struct) obj;

      if (this.Name == null) {
        if (other.Name != null)
          return false;
      } else if (!this.Name.equals(other.Name))
        return false;

      return true;
    }

    public void copyDataTo(row3Struct other) {

      other.Organization = this.Organization;
      other.Name = this.Name;
      other.Description = this.Description;
      other.Currency = this.Currency;
      other.Type = this.Type;
      other.IsDefault = this.IsDefault;
      other.BusinessPartner = this.BusinessPartner;
      other.Location1stLine = this.Location1stLine;
      other.Location2ndLine = this.Location2ndLine;
      other.LocationPostalCode = this.LocationPostalCode;
      other.LocationCity = this.LocationCity;
      other.LocationRegion = this.LocationRegion;
      other.LocationCountry = this.LocationCountry;
      other.BankCode = this.BankCode;
      other.BranchCode = this.BranchCode;
      other.BankControlDigit = this.BankControlDigit;
      other.INENo = this.INENo;
      other.SwiftCode = this.SwiftCode;
      other.AccountControlDigit = this.AccountControlDigit;
      other.PartialAccountNo = this.PartialAccountNo;
      other.AccountNo = this.AccountNo;
      other.IBAN = this.IBAN;
      other.InitialBalance = this.InitialBalance;
      other.CreditLimit = this.CreditLimit;
      other.MatchingAlgorithm = this.MatchingAlgorithm;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row3Struct other) {

      other.Name = this.Name;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Type = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Type = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Location1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Location1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Location2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Location2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationPostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationPostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationCity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationCity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationCountry = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationCountry = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BranchCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BranchCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankControlDigit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankControlDigit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.INENo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.INENo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SwiftCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SwiftCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountControlDigit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountControlDigit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PartialAccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PartialAccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IBAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IBAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InitialBalance = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InitialBalance = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CreditLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CreditLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MatchingAlgorithm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MatchingAlgorithm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Type == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Type.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Location1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Location1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Location2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Location2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationPostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationPostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationCity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationCity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationCountry == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationCountry.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BranchCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BranchCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankControlDigit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankControlDigit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.INENo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.INENo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SwiftCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SwiftCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountControlDigit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountControlDigit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PartialAccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PartialAccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IBAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IBAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InitialBalance == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InitialBalance.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CreditLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CreditLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MatchingAlgorithm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MatchingAlgorithm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("Type");
      sb.append("=");
      sb.append(String.valueOf(this.Type));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("Location1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Location1stLine));

      sb.append(", ");

      sb.append("Location2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Location2ndLine));

      sb.append(", ");

      sb.append("LocationPostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.LocationPostalCode));

      sb.append(", ");

      sb.append("LocationCity");
      sb.append("=");
      sb.append(String.valueOf(this.LocationCity));

      sb.append(", ");

      sb.append("LocationRegion");
      sb.append("=");
      sb.append(String.valueOf(this.LocationRegion));

      sb.append(", ");

      sb.append("LocationCountry");
      sb.append("=");
      sb.append(String.valueOf(this.LocationCountry));

      sb.append(", ");

      sb.append("BankCode");
      sb.append("=");
      sb.append(String.valueOf(this.BankCode));

      sb.append(", ");

      sb.append("BranchCode");
      sb.append("=");
      sb.append(String.valueOf(this.BranchCode));

      sb.append(", ");

      sb.append("BankControlDigit");
      sb.append("=");
      sb.append(String.valueOf(this.BankControlDigit));

      sb.append(", ");

      sb.append("INENo");
      sb.append("=");
      sb.append(String.valueOf(this.INENo));

      sb.append(", ");

      sb.append("SwiftCode");
      sb.append("=");
      sb.append(String.valueOf(this.SwiftCode));

      sb.append(", ");

      sb.append("AccountControlDigit");
      sb.append("=");
      sb.append(String.valueOf(this.AccountControlDigit));

      sb.append(", ");

      sb.append("PartialAccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.PartialAccountNo));

      sb.append(", ");

      sb.append("AccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.AccountNo));

      sb.append(", ");

      sb.append("IBAN");
      sb.append("=");
      sb.append(String.valueOf(this.IBAN));

      sb.append(", ");

      sb.append("InitialBalance");
      sb.append("=");
      sb.append(String.valueOf(this.InitialBalance));

      sb.append(", ");

      sb.append("CreditLimit");
      sb.append("=");
      sb.append(String.valueOf(this.CreditLimit));

      sb.append(", ");

      sb.append("MatchingAlgorithm");
      sb.append("=");
      sb.append(String.valueOf(this.MatchingAlgorithm));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Name, other.Name);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Name;
    String Description;
    String Currency;
    String Type;
    String IsDefault;
    String BusinessPartner;
    String Location1stLine;
    String Location2ndLine;
    String LocationPostalCode;
    String LocationCity;
    String LocationRegion;
    String LocationCountry;
    String BankCode;
    String BranchCode;
    String BankControlDigit;
    String INENo;
    String SwiftCode;
    String AccountControlDigit;
    String PartialAccountNo;
    String AccountNo;
    String IBAN;
    String InitialBalance;
    String CreditLimit;
    String MatchingAlgorithm;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Name == null) ? 0 : this.Name.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row2Struct other = (row2Struct) obj;

      if (this.Name == null) {
        if (other.Name != null)
          return false;
      } else if (!this.Name.equals(other.Name))
        return false;

      return true;
    }

    public void copyDataTo(row2Struct other) {

      other.Organization = this.Organization;
      other.Name = this.Name;
      other.Description = this.Description;
      other.Currency = this.Currency;
      other.Type = this.Type;
      other.IsDefault = this.IsDefault;
      other.BusinessPartner = this.BusinessPartner;
      other.Location1stLine = this.Location1stLine;
      other.Location2ndLine = this.Location2ndLine;
      other.LocationPostalCode = this.LocationPostalCode;
      other.LocationCity = this.LocationCity;
      other.LocationRegion = this.LocationRegion;
      other.LocationCountry = this.LocationCountry;
      other.BankCode = this.BankCode;
      other.BranchCode = this.BranchCode;
      other.BankControlDigit = this.BankControlDigit;
      other.INENo = this.INENo;
      other.SwiftCode = this.SwiftCode;
      other.AccountControlDigit = this.AccountControlDigit;
      other.PartialAccountNo = this.PartialAccountNo;
      other.AccountNo = this.AccountNo;
      other.IBAN = this.IBAN;
      other.InitialBalance = this.InitialBalance;
      other.CreditLimit = this.CreditLimit;
      other.MatchingAlgorithm = this.MatchingAlgorithm;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row2Struct other) {

      other.Name = this.Name;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Type = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Type = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Location1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Location1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Location2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Location2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationPostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationPostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationCity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationCity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationCountry = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationCountry = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BranchCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BranchCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankControlDigit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankControlDigit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.INENo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.INENo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SwiftCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SwiftCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountControlDigit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountControlDigit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PartialAccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PartialAccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IBAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IBAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InitialBalance = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InitialBalance = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CreditLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CreditLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MatchingAlgorithm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MatchingAlgorithm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Type == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Type.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Location1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Location1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Location2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Location2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationPostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationPostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationCity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationCity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationCountry == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationCountry.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BranchCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BranchCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankControlDigit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankControlDigit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.INENo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.INENo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SwiftCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SwiftCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountControlDigit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountControlDigit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PartialAccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PartialAccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IBAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IBAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InitialBalance == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InitialBalance.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CreditLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CreditLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MatchingAlgorithm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MatchingAlgorithm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("Type");
      sb.append("=");
      sb.append(String.valueOf(this.Type));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("Location1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Location1stLine));

      sb.append(", ");

      sb.append("Location2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Location2ndLine));

      sb.append(", ");

      sb.append("LocationPostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.LocationPostalCode));

      sb.append(", ");

      sb.append("LocationCity");
      sb.append("=");
      sb.append(String.valueOf(this.LocationCity));

      sb.append(", ");

      sb.append("LocationRegion");
      sb.append("=");
      sb.append(String.valueOf(this.LocationRegion));

      sb.append(", ");

      sb.append("LocationCountry");
      sb.append("=");
      sb.append(String.valueOf(this.LocationCountry));

      sb.append(", ");

      sb.append("BankCode");
      sb.append("=");
      sb.append(String.valueOf(this.BankCode));

      sb.append(", ");

      sb.append("BranchCode");
      sb.append("=");
      sb.append(String.valueOf(this.BranchCode));

      sb.append(", ");

      sb.append("BankControlDigit");
      sb.append("=");
      sb.append(String.valueOf(this.BankControlDigit));

      sb.append(", ");

      sb.append("INENo");
      sb.append("=");
      sb.append(String.valueOf(this.INENo));

      sb.append(", ");

      sb.append("SwiftCode");
      sb.append("=");
      sb.append(String.valueOf(this.SwiftCode));

      sb.append(", ");

      sb.append("AccountControlDigit");
      sb.append("=");
      sb.append(String.valueOf(this.AccountControlDigit));

      sb.append(", ");

      sb.append("PartialAccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.PartialAccountNo));

      sb.append(", ");

      sb.append("AccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.AccountNo));

      sb.append(", ");

      sb.append("IBAN");
      sb.append("=");
      sb.append(String.valueOf(this.IBAN));

      sb.append(", ");

      sb.append("InitialBalance");
      sb.append("=");
      sb.append(String.valueOf(this.InitialBalance));

      sb.append(", ");

      sb.append("CreditLimit");
      sb.append("=");
      sb.append(String.valueOf(this.CreditLimit));

      sb.append(", ");

      sb.append("MatchingAlgorithm");
      sb.append("=");
      sb.append(String.valueOf(this.MatchingAlgorithm));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Name, other.Name);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Name;
    String Description;
    String Currency;
    String Type;
    String IsDefault;
    String BusinessPartner;
    String Location1stLine;
    String Location2ndLine;
    String LocationPostalCode;
    String LocationCity;
    String LocationRegion;
    String LocationCountry;
    String BankCode;
    String BranchCode;
    String BankControlDigit;
    String INENo;
    String SwiftCode;
    String AccountControlDigit;
    String PartialAccountNo;
    String AccountNo;
    String IBAN;
    String InitialBalance;
    String CreditLimit;
    String MatchingAlgorithm;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Name == null) ? 0 : this.Name.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row1Struct other = (row1Struct) obj;

      if (this.Name == null) {
        if (other.Name != null)
          return false;
      } else if (!this.Name.equals(other.Name))
        return false;

      return true;
    }

    public void copyDataTo(row1Struct other) {

      other.Organization = this.Organization;
      other.Name = this.Name;
      other.Description = this.Description;
      other.Currency = this.Currency;
      other.Type = this.Type;
      other.IsDefault = this.IsDefault;
      other.BusinessPartner = this.BusinessPartner;
      other.Location1stLine = this.Location1stLine;
      other.Location2ndLine = this.Location2ndLine;
      other.LocationPostalCode = this.LocationPostalCode;
      other.LocationCity = this.LocationCity;
      other.LocationRegion = this.LocationRegion;
      other.LocationCountry = this.LocationCountry;
      other.BankCode = this.BankCode;
      other.BranchCode = this.BranchCode;
      other.BankControlDigit = this.BankControlDigit;
      other.INENo = this.INENo;
      other.SwiftCode = this.SwiftCode;
      other.AccountControlDigit = this.AccountControlDigit;
      other.PartialAccountNo = this.PartialAccountNo;
      other.AccountNo = this.AccountNo;
      other.IBAN = this.IBAN;
      other.InitialBalance = this.InitialBalance;
      other.CreditLimit = this.CreditLimit;
      other.MatchingAlgorithm = this.MatchingAlgorithm;

    }

    public void copyKeysDataTo(row1Struct other) {

      other.Name = this.Name;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Type = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Type = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Location1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Location1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Location2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Location2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationPostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationPostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationCity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationCity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.LocationCountry = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.LocationCountry = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BranchCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BranchCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BankControlDigit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BankControlDigit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.INENo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.INENo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SwiftCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SwiftCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountControlDigit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountControlDigit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PartialAccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PartialAccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AccountNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AccountNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IBAN = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IBAN = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InitialBalance = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InitialBalance = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CreditLimit = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CreditLimit = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MatchingAlgorithm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MatchingAlgorithm = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Type == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Type.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Location1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Location1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Location2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Location2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationPostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationPostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationCity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationCity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.LocationCountry == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.LocationCountry.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BranchCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BranchCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BankControlDigit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BankControlDigit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.INENo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.INENo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SwiftCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SwiftCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountControlDigit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountControlDigit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PartialAccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PartialAccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AccountNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AccountNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IBAN == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IBAN.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InitialBalance == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InitialBalance.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CreditLimit == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CreditLimit.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MatchingAlgorithm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MatchingAlgorithm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("Type");
      sb.append("=");
      sb.append(String.valueOf(this.Type));

      sb.append(", ");

      sb.append("IsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.IsDefault));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("Location1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Location1stLine));

      sb.append(", ");

      sb.append("Location2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Location2ndLine));

      sb.append(", ");

      sb.append("LocationPostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.LocationPostalCode));

      sb.append(", ");

      sb.append("LocationCity");
      sb.append("=");
      sb.append(String.valueOf(this.LocationCity));

      sb.append(", ");

      sb.append("LocationRegion");
      sb.append("=");
      sb.append(String.valueOf(this.LocationRegion));

      sb.append(", ");

      sb.append("LocationCountry");
      sb.append("=");
      sb.append(String.valueOf(this.LocationCountry));

      sb.append(", ");

      sb.append("BankCode");
      sb.append("=");
      sb.append(String.valueOf(this.BankCode));

      sb.append(", ");

      sb.append("BranchCode");
      sb.append("=");
      sb.append(String.valueOf(this.BranchCode));

      sb.append(", ");

      sb.append("BankControlDigit");
      sb.append("=");
      sb.append(String.valueOf(this.BankControlDigit));

      sb.append(", ");

      sb.append("INENo");
      sb.append("=");
      sb.append(String.valueOf(this.INENo));

      sb.append(", ");

      sb.append("SwiftCode");
      sb.append("=");
      sb.append(String.valueOf(this.SwiftCode));

      sb.append(", ");

      sb.append("AccountControlDigit");
      sb.append("=");
      sb.append(String.valueOf(this.AccountControlDigit));

      sb.append(", ");

      sb.append("PartialAccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.PartialAccountNo));

      sb.append(", ");

      sb.append("AccountNo");
      sb.append("=");
      sb.append(String.valueOf(this.AccountNo));

      sb.append(", ");

      sb.append("IBAN");
      sb.append("=");
      sb.append(String.valueOf(this.IBAN));

      sb.append(", ");

      sb.append("InitialBalance");
      sb.append("=");
      sb.append(String.valueOf(this.InitialBalance));

      sb.append(", ");

      sb.append("CreditLimit");
      sb.append("=");
      sb.append(String.valueOf(this.CreditLimit));

      sb.append(", ");

      sb.append("MatchingAlgorithm");
      sb.append("=");
      sb.append(String.valueOf(this.MatchingAlgorithm));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Name, other.Name);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap)
      throws TalendException {
    globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

    String currentComponent = "";

    try {

      row1Struct row1 = new row1Struct();
      row2Struct row2 = new row2Struct();
      row4Struct row4 = new row4Struct();
      row6Struct row6 = new row6Struct();
      row7Struct row7 = new row7Struct();
      row5Struct row5 = new row5Struct();
      row3Struct row3 = new row3Struct();

      /**
       * [tJavaRow_5 begin ] start
       */

      ok_Hash.put("tJavaRow_5", false);
      start_Hash.put("tJavaRow_5", System.currentTimeMillis());
      currentComponent = "tJavaRow_5";

      int nb_line_tJavaRow_5 = 0;

      /**
       * [tJavaRow_5 begin ] stop
       */

      /**
       * [tJavaRow_4 begin ] start
       */

      ok_Hash.put("tJavaRow_4", false);
      start_Hash.put("tJavaRow_4", System.currentTimeMillis());
      currentComponent = "tJavaRow_4";

      int nb_line_tJavaRow_4 = 0;

      /**
       * [tJavaRow_4 begin ] stop
       */

      /**
       * [tFilterRow_2 begin ] start
       */

      ok_Hash.put("tFilterRow_2", false);
      start_Hash.put("tFilterRow_2", System.currentTimeMillis());
      currentComponent = "tFilterRow_2";

      int nb_line_tFilterRow_2 = 0;
      int nb_line_ok_tFilterRow_2 = 0;
      int nb_line_reject_tFilterRow_2 = 0;

      /**
       * [tFilterRow_2 begin ] stop
       */

      /**
       * [tJavaRow_3 begin ] start
       */

      ok_Hash.put("tJavaRow_3", false);
      start_Hash.put("tJavaRow_3", System.currentTimeMillis());
      currentComponent = "tJavaRow_3";

      int nb_line_tJavaRow_3 = 0;

      /**
       * [tJavaRow_3 begin ] stop
       */

      /**
       * [tJavaRow_2 begin ] start
       */

      ok_Hash.put("tJavaRow_2", false);
      start_Hash.put("tJavaRow_2", System.currentTimeMillis());
      currentComponent = "tJavaRow_2";

      int nb_line_tJavaRow_2 = 0;

      /**
       * [tJavaRow_2 begin ] stop
       */

      /**
       * [tFilterRow_1 begin ] start
       */

      ok_Hash.put("tFilterRow_1", false);
      start_Hash.put("tFilterRow_1", System.currentTimeMillis());
      currentComponent = "tFilterRow_1";

      int nb_line_tFilterRow_1 = 0;
      int nb_line_ok_tFilterRow_1 = 0;
      int nb_line_reject_tFilterRow_1 = 0;

      /**
       * [tFilterRow_1 begin ] stop
       */

      /**
       * [tJavaRow_1 begin ] start
       */

      ok_Hash.put("tJavaRow_1", false);
      start_Hash.put("tJavaRow_1", System.currentTimeMillis());
      currentComponent = "tJavaRow_1";

      int nb_line_tJavaRow_1 = 0;

      /**
       * [tJavaRow_1 begin ] stop
       */

      /**
       * [tFileInputDelimited_1 begin ] start
       */

      ok_Hash.put("tFileInputDelimited_1", false);
      start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
      currentComponent = "tFileInputDelimited_1";

      int nb_line_tFileInputDelimited_1 = 0;
      int footer_tFileInputDelimited_1 = 0;
      int totalLinetFileInputDelimited_1 = 0;
      int limittFileInputDelimited_1 = -1;
      int lastLinetFileInputDelimited_1 = -1;

      char fieldSeparator_tFileInputDelimited_1[] = null;

      // support passing value (property: Field Separator) by 'context.fs'
      // or 'globalMap.get("fs")'.
      if (((String) ",").length() > 0) {
        fieldSeparator_tFileInputDelimited_1 = ((String) ",").toCharArray();
      } else {
        throw new IllegalArgumentException("Field Separator must be assigned a char.");
      }

      char rowSeparator_tFileInputDelimited_1[] = null;

      // support passing value (property: Row Separator) by 'context.rs'
      // or 'globalMap.get("rs")'.
      if (((String) "\n").length() > 0) {
        rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
      } else {
        throw new IllegalArgumentException("Row Separator must be assigned a char.");
      }

      com.csvreader.CsvReader csvReadertFileInputDelimited_1 = new com.csvreader.CsvReader(
          new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(/**
           * 
           * Start field tFileInputDelimited_1:FILENAME
           */
          context.getProperty("filename")/**
           * End field tFileInputDelimited_1:FILENAME
           */
          ), "UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);

      if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
          && (rowSeparator_tFileInputDelimited_1[0] != '\r'))
        csvReadertFileInputDelimited_1.setRecordDelimiter(rowSeparator_tFileInputDelimited_1[0]);

      csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
      csvReadertFileInputDelimited_1.setTextQualifier('"');

      csvReadertFileInputDelimited_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      String[] rowtFileInputDelimited_1 = null;

      if (footer_tFileInputDelimited_1 > 0) {

        while (csvReadertFileInputDelimited_1.readRecord()) {
          rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();
          if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
              .equals(rowtFileInputDelimited_1[0]))) {// empty
            // line when
            // row
            // separator
            // is '\n'

            totalLinetFileInputDelimited_1++;

          }

        }
        int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
            - footer_tFileInputDelimited_1 < 0 ? 0 : totalLinetFileInputDelimited_1
            - footer_tFileInputDelimited_1;
        if (lastLinetFileInputDelimited_1 > 0) {
          lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
              : lastLineTemptFileInputDelimited_1;
        } else {
          lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
        }

        csvReadertFileInputDelimited_1.close();

        csvReadertFileInputDelimited_1 = new com.csvreader.CsvReader(new java.io.BufferedReader(
            new java.io.InputStreamReader(new java.io.FileInputStream(/**
             * Start field
             * tFileInputDelimited_1:FILENAME
             */
            context.getProperty("filename")/**
             * End field tFileInputDelimited_1:FILENAME
             */
            ), "UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);

        if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
            && (rowSeparator_tFileInputDelimited_1[0] != '\r'))
          csvReadertFileInputDelimited_1.setRecordDelimiter(rowSeparator_tFileInputDelimited_1[0]);
        csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
        csvReadertFileInputDelimited_1.setTextQualifier('"');
        csvReadertFileInputDelimited_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      }

      int currentLinetFileInputDelimited_1 = 0;
      int outputLinetFileInputDelimited_1 = 0;

      while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1.readRecord()) {

        rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

        if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
          // line
          // when
          // row
          // separator
          // is
          // '\n'
          continue;
        }

        currentLinetFileInputDelimited_1++;
        if (currentLinetFileInputDelimited_1 < 1 + 1) {
          continue;
        }

        if (lastLinetFileInputDelimited_1 > -1
            && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
          break;
        }
        outputLinetFileInputDelimited_1++;
        if (limittFileInputDelimited_1 > 0
            && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
          break;
        }

        row1 = null;
        row1 = new row1Struct();
        try {

          if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
            // line
            // when
            // row
            // separator
            // is
            // '\n'

            row1.Organization = null;

            row1.Name = null;

            row1.Description = null;

            row1.Currency = null;

            row1.Type = null;

            row1.IsDefault = null;

            row1.BusinessPartner = null;

            row1.Location1stLine = null;

            row1.Location2ndLine = null;

            row1.LocationPostalCode = null;

            row1.LocationCity = null;

            row1.LocationRegion = null;

            row1.LocationCountry = null;

            row1.BankCode = null;

            row1.BranchCode = null;

            row1.BankControlDigit = null;

            row1.INENo = null;

            row1.SwiftCode = null;

            row1.AccountControlDigit = null;

            row1.PartialAccountNo = null;

            row1.AccountNo = null;

            row1.IBAN = null;

            row1.InitialBalance = null;

            row1.CreditLimit = null;

            row1.MatchingAlgorithm = null;

          } else {

            if (0 < rowtFileInputDelimited_1.length) {
              row1.Organization = rowtFileInputDelimited_1[0].trim();

            } else {
              row1.Organization = null;
            }

            if (1 < rowtFileInputDelimited_1.length) {
              row1.Name = rowtFileInputDelimited_1[1].trim();

            } else {
              row1.Name = null;
            }

            if (2 < rowtFileInputDelimited_1.length) {
              row1.Description = rowtFileInputDelimited_1[2].trim();

            } else {
              row1.Description = null;
            }

            if (3 < rowtFileInputDelimited_1.length) {
              row1.Currency = rowtFileInputDelimited_1[3].trim();

            } else {
              row1.Currency = null;
            }

            if (4 < rowtFileInputDelimited_1.length) {
              row1.Type = rowtFileInputDelimited_1[4].trim();

            } else {
              row1.Type = null;
            }

            if (5 < rowtFileInputDelimited_1.length) {
              row1.IsDefault = rowtFileInputDelimited_1[5].trim();

            } else {
              row1.IsDefault = null;
            }

            if (6 < rowtFileInputDelimited_1.length) {
              row1.BusinessPartner = rowtFileInputDelimited_1[6].trim();

            } else {
              row1.BusinessPartner = null;
            }

            if (7 < rowtFileInputDelimited_1.length) {
              row1.Location1stLine = rowtFileInputDelimited_1[7].trim();

            } else {
              row1.Location1stLine = null;
            }

            if (8 < rowtFileInputDelimited_1.length) {
              row1.Location2ndLine = rowtFileInputDelimited_1[8].trim();

            } else {
              row1.Location2ndLine = null;
            }

            if (9 < rowtFileInputDelimited_1.length) {
              row1.LocationPostalCode = rowtFileInputDelimited_1[9].trim();

            } else {
              row1.LocationPostalCode = null;
            }

            if (10 < rowtFileInputDelimited_1.length) {
              row1.LocationCity = rowtFileInputDelimited_1[10].trim();

            } else {
              row1.LocationCity = null;
            }

            if (11 < rowtFileInputDelimited_1.length) {
              row1.LocationRegion = rowtFileInputDelimited_1[11].trim();

            } else {
              row1.LocationRegion = null;
            }

            if (12 < rowtFileInputDelimited_1.length) {
              row1.LocationCountry = rowtFileInputDelimited_1[12].trim();

            } else {
              row1.LocationCountry = null;
            }

            if (13 < rowtFileInputDelimited_1.length) {
              row1.BankCode = rowtFileInputDelimited_1[13].trim();

            } else {
              row1.BankCode = null;
            }

            if (14 < rowtFileInputDelimited_1.length) {
              row1.BranchCode = rowtFileInputDelimited_1[14].trim();

            } else {
              row1.BranchCode = null;
            }

            if (15 < rowtFileInputDelimited_1.length) {
              row1.BankControlDigit = rowtFileInputDelimited_1[15].trim();

            } else {
              row1.BankControlDigit = null;
            }

            if (16 < rowtFileInputDelimited_1.length) {
              row1.INENo = rowtFileInputDelimited_1[16].trim();

            } else {
              row1.INENo = null;
            }

            if (17 < rowtFileInputDelimited_1.length) {
              row1.SwiftCode = rowtFileInputDelimited_1[17].trim();

            } else {
              row1.SwiftCode = null;
            }

            if (18 < rowtFileInputDelimited_1.length) {
              row1.AccountControlDigit = rowtFileInputDelimited_1[18].trim();

            } else {
              row1.AccountControlDigit = null;
            }

            if (19 < rowtFileInputDelimited_1.length) {
              row1.PartialAccountNo = rowtFileInputDelimited_1[19].trim();

            } else {
              row1.PartialAccountNo = null;
            }

            if (20 < rowtFileInputDelimited_1.length) {
              row1.AccountNo = rowtFileInputDelimited_1[20].trim();

            } else {
              row1.AccountNo = null;
            }

            if (21 < rowtFileInputDelimited_1.length) {
              row1.IBAN = rowtFileInputDelimited_1[21].trim();

            } else {
              row1.IBAN = null;
            }

            if (22 < rowtFileInputDelimited_1.length) {
              row1.InitialBalance = rowtFileInputDelimited_1[22].trim();

            } else {
              row1.InitialBalance = null;
            }

            if (23 < rowtFileInputDelimited_1.length) {
              row1.CreditLimit = rowtFileInputDelimited_1[23].trim();

            } else {
              row1.CreditLimit = null;
            }

            if (24 < rowtFileInputDelimited_1.length) {
              row1.MatchingAlgorithm = rowtFileInputDelimited_1[24].trim();

            } else {
              row1.MatchingAlgorithm = null;
            }

          }

        } catch (Exception e) {
          System.err.println(e.getMessage());
          row1 = null;
        }

        /**
         * [tFileInputDelimited_1 begin ] stop
         */
        /**
         * [tFileInputDelimited_1 main ] start
         */

        currentComponent = "tFileInputDelimited_1";

        /**
         * [tFileInputDelimited_1 main ] stop
         */
        // Start of branch "row1"
        if (row1 != null) {

          /**
           * [tJavaRow_1 main ] start
           */

          currentComponent = "tJavaRow_1";

          org.openbravo.idl.proc.IdlService service = org.openbravo.idl.proc.IdlIntService
              .getInstance().getService("Financial Account");
          org.openbravo.idl.proc.Validator validator = service.getValidator("Financial Account");

          row2.Organization = validator.checkOrganization(row1.Organization);
          row2.Name = validator.checkNotNull(validator.checkString(row1.Name, 60), "Name");
          row2.Description = validator.checkString(row1.Description, 255);
          row2.Currency = validator.checkString(row1.Currency, 3);
          row2.Type = validator.checkString(row1.Type, 60);
          row2.IsDefault = validator.checkBoolean(row1.IsDefault, "IsDefault");
          row2.BusinessPartner = validator.checkString(row1.BusinessPartner, 60);
          row2.Location1stLine = validator.checkString(row1.Location1stLine, 60);
          row2.Location2ndLine = validator.checkString(row1.Location2ndLine, 60);
          row2.LocationPostalCode = validator.checkString(row1.LocationPostalCode, 10);
          row2.LocationCity = validator.checkString(row1.LocationCity, 60);
          row2.LocationRegion = validator.checkString(row1.LocationRegion, 60);
          row2.LocationCountry = validator.checkString(row1.LocationCountry, 60);
          row2.BankCode = validator.checkString(row1.BankCode, 4);
          row2.BranchCode = validator.checkString(row1.BranchCode, 4);
          row2.BankControlDigit = validator.checkString(row1.BankControlDigit, 1);
          row2.INENo = validator.checkString(row1.INENo, 9);
          row2.SwiftCode = validator.checkString(row1.SwiftCode, 20);
          row2.AccountControlDigit = validator.checkString(row1.AccountControlDigit, 1);
          row2.PartialAccountNo = validator.checkString(row1.PartialAccountNo, 10);
          row2.AccountNo = validator.checkString(row1.AccountNo, 50);
          row2.IBAN = validator.checkString(row1.IBAN, 34);
          row2.InitialBalance = validator.checkBigDecimal(row1.InitialBalance);
          row2.CreditLimit = validator.checkBigDecimal(row1.CreditLimit);
          row2.MatchingAlgorithm = validator.checkString(row1.MatchingAlgorithm, 60);

          row2.flag = validator.getErrorCode();
          row2.whyError = validator.getErrorMessage();

          nb_line_tJavaRow_1++;

          /**
           * [tJavaRow_1 main ] stop
           */

          /**
           * [tFilterRow_1 main ] start
           */

          currentComponent = "tFilterRow_1";

          row4 = null;
          row3 = null;

          if (

          (row2.flag == null ? false : row2.flag.toLowerCase().compareTo("0") == 0)

          )

          {
            if (row4 == null) {
              row4 = new row4Struct();
            }
            row4.Organization = row2.Organization;
            row4.Name = row2.Name;
            row4.Description = row2.Description;
            row4.Currency = row2.Currency;
            row4.Type = row2.Type;
            row4.IsDefault = row2.IsDefault;
            row4.BusinessPartner = row2.BusinessPartner;
            row4.Location1stLine = row2.Location1stLine;
            row4.Location2ndLine = row2.Location2ndLine;
            row4.LocationPostalCode = row2.LocationPostalCode;
            row4.LocationCity = row2.LocationCity;
            row4.LocationRegion = row2.LocationRegion;
            row4.LocationCountry = row2.LocationCountry;
            row4.BankCode = row2.BankCode;
            row4.BranchCode = row2.BranchCode;
            row4.BankControlDigit = row2.BankControlDigit;
            row4.INENo = row2.INENo;
            row4.SwiftCode = row2.SwiftCode;
            row4.AccountControlDigit = row2.AccountControlDigit;
            row4.PartialAccountNo = row2.PartialAccountNo;
            row4.AccountNo = row2.AccountNo;
            row4.IBAN = row2.IBAN;
            row4.InitialBalance = row2.InitialBalance;
            row4.CreditLimit = row2.CreditLimit;
            row4.MatchingAlgorithm = row2.MatchingAlgorithm;
            row4.flag = row2.flag;
            row4.whyError = row2.whyError;
            nb_line_ok_tFilterRow_1++;
          } else {
            if (row3 == null) {
              row3 = new row3Struct();
            }
            row3.Organization = row2.Organization;
            row3.Name = row2.Name;
            row3.Description = row2.Description;
            row3.Currency = row2.Currency;
            row3.Type = row2.Type;
            row3.IsDefault = row2.IsDefault;
            row3.BusinessPartner = row2.BusinessPartner;
            row3.Location1stLine = row2.Location1stLine;
            row3.Location2ndLine = row2.Location2ndLine;
            row3.LocationPostalCode = row2.LocationPostalCode;
            row3.LocationCity = row2.LocationCity;
            row3.LocationRegion = row2.LocationRegion;
            row3.LocationCountry = row2.LocationCountry;
            row3.BankCode = row2.BankCode;
            row3.BranchCode = row2.BranchCode;
            row3.BankControlDigit = row2.BankControlDigit;
            row3.INENo = row2.INENo;
            row3.SwiftCode = row2.SwiftCode;
            row3.AccountControlDigit = row2.AccountControlDigit;
            row3.PartialAccountNo = row2.PartialAccountNo;
            row3.AccountNo = row2.AccountNo;
            row3.IBAN = row2.IBAN;
            row3.InitialBalance = row2.InitialBalance;
            row3.CreditLimit = row2.CreditLimit;
            row3.MatchingAlgorithm = row2.MatchingAlgorithm;
            row3.flag = row2.flag;
            row3.whyError = row2.whyError;
            nb_line_reject_tFilterRow_1++;
          }
          nb_line_tFilterRow_1++;

          /**
           * [tFilterRow_1 main ] stop
           */
          // Start of branch "row4"
          if (row4 != null) {

            /**
             * [tJavaRow_3 main ] start
             */

            currentComponent = "tJavaRow_3";

            row6.flag = "0";
            row6.whyError = "";

            row6.Organization = row4.Organization;
            row6.Name = row4.Name;
            row6.Description = row4.Description;
            row6.Currency = row4.Currency;
            if (row4.Currency != null) {
              Currency cur = service.findDALInstance(false, Currency.class, new Value(
                  Currency.PROPERTY_ISOCODE, row4.Currency));
              if (cur == null) {
                row6.flag = "-1";
                row6.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.Currency
                    + "\n";
              }
            }
            row6.Type = row4.Type;
            if (row4.Type != null) {
              if (service.getReferenceValue("Financial account type", row4.Type) == null) {
                row6.flag = "-1";
                row6.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.Type + "\n";
              }
            }
            row6.IsDefault = row4.IsDefault;
            row6.BusinessPartner = row4.BusinessPartner;
            row6.Location1stLine = row4.Location1stLine;
            row6.Location2ndLine = row4.Location2ndLine;
            row6.LocationPostalCode = row4.LocationPostalCode;
            row6.LocationCity = row4.LocationCity;
            row6.LocationRegion = row4.LocationRegion;
            row6.LocationCountry = row4.LocationCountry;
            if (row4.LocationCountry != null && row4.LocationRegion != null) {
              Country country = service.findDALInstance(false, Country.class, new Value("name",
                  row4.LocationCountry));
              if (country == null) {
                row6.flag = "-1";
                row6.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE")
                    + row4.LocationCountry + "\n";
              } else {
                Region region = service.findDALInstance(false, Region.class, new Value("country",
                    country), new Value("name", row4.LocationRegion));
                if (region == null) {
                  row6.flag = "-1";
                  row6.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE")
                      + row4.LocationRegion + "\n";
                } else {
                  row6.LocationCountry = row4.LocationCountry;
                  row6.LocationRegion = row4.LocationRegion;
                }
              }
            }
            row6.BankCode = row4.BankCode;
            row6.BranchCode = row4.BranchCode;
            row6.BankControlDigit = row4.BankControlDigit;
            row6.INENo = row4.INENo;
            row6.SwiftCode = row4.SwiftCode;
            row6.AccountControlDigit = row4.AccountControlDigit;
            row6.PartialAccountNo = row4.PartialAccountNo;
            row6.AccountNo = row4.AccountNo;
            row6.IBAN = row4.IBAN;
            row6.InitialBalance = row4.InitialBalance;
            row6.CreditLimit = row4.CreditLimit;
            row6.MatchingAlgorithm = row4.MatchingAlgorithm;
            if (row4.MatchingAlgorithm != null) {
              MatchingAlgorithm ma = service.findDALInstance(false, MatchingAlgorithm.class,
                  new Value(MatchingAlgorithm.PROPERTY_NAME, row4.MatchingAlgorithm));
              if (ma == null) {
                row6.flag = "-1";
                row6.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE")
                    + row4.MatchingAlgorithm + "\n";
              }
            }

            nb_line_tJavaRow_3++;

            /**
             * [tJavaRow_3 main ] stop
             */

            /**
             * [tFilterRow_2 main ] start
             */

            currentComponent = "tFilterRow_2";

            row7 = null;
            row5 = null;

            if (

            (row6.flag == null ? false : row6.flag.toLowerCase().compareTo("0") == 0)

            )

            {
              if (row7 == null) {
                row7 = new row7Struct();
              }
              row7.Organization = row6.Organization;
              row7.Name = row6.Name;
              row7.Description = row6.Description;
              row7.Currency = row6.Currency;
              row7.Type = row6.Type;
              row7.IsDefault = row6.IsDefault;
              row7.BusinessPartner = row6.BusinessPartner;
              row7.Location1stLine = row6.Location1stLine;
              row7.Location2ndLine = row6.Location2ndLine;
              row7.LocationPostalCode = row6.LocationPostalCode;
              row7.LocationCity = row6.LocationCity;
              row7.LocationRegion = row6.LocationRegion;
              row7.LocationCountry = row6.LocationCountry;
              row7.BankCode = row6.BankCode;
              row7.BranchCode = row6.BranchCode;
              row7.BankControlDigit = row6.BankControlDigit;
              row7.INENo = row6.INENo;
              row7.SwiftCode = row6.SwiftCode;
              row7.AccountControlDigit = row6.AccountControlDigit;
              row7.PartialAccountNo = row6.PartialAccountNo;
              row7.AccountNo = row6.AccountNo;
              row7.IBAN = row6.IBAN;
              row7.InitialBalance = row6.InitialBalance;
              row7.CreditLimit = row6.CreditLimit;
              row7.MatchingAlgorithm = row6.MatchingAlgorithm;
              row7.flag = row6.flag;
              row7.whyError = row6.whyError;
              nb_line_ok_tFilterRow_2++;
            } else {
              if (row5 == null) {
                row5 = new row5Struct();
              }
              row5.Organization = row6.Organization;
              row5.Name = row6.Name;
              row5.Description = row6.Description;
              row5.Currency = row6.Currency;
              row5.Type = row6.Type;
              row5.IsDefault = row6.IsDefault;
              row5.BusinessPartner = row6.BusinessPartner;
              row5.Location1stLine = row6.Location1stLine;
              row5.Location2ndLine = row6.Location2ndLine;
              row5.LocationPostalCode = row6.LocationPostalCode;
              row5.LocationCity = row6.LocationCity;
              row5.LocationRegion = row6.LocationRegion;
              row5.LocationCountry = row6.LocationCountry;
              row5.BankCode = row6.BankCode;
              row5.BranchCode = row6.BranchCode;
              row5.BankControlDigit = row6.BankControlDigit;
              row5.INENo = row6.INENo;
              row5.SwiftCode = row6.SwiftCode;
              row5.AccountControlDigit = row6.AccountControlDigit;
              row5.PartialAccountNo = row6.PartialAccountNo;
              row5.AccountNo = row6.AccountNo;
              row5.IBAN = row6.IBAN;
              row5.InitialBalance = row6.InitialBalance;
              row5.CreditLimit = row6.CreditLimit;
              row5.MatchingAlgorithm = row6.MatchingAlgorithm;
              row5.flag = row6.flag;
              row5.whyError = row6.whyError;
              nb_line_reject_tFilterRow_2++;
            }
            nb_line_tFilterRow_2++;

            /**
             * [tFilterRow_2 main ] stop
             */
            // Start of branch "row7"
            if (row7 != null) {

              /**
               * [tJavaRow_5 main ] start
               */

              currentComponent = "tJavaRow_5";

              service.finishRecordProcess(row7.Organization, row7.Name, row7.Description,
                  row7.Currency, row7.Type, row7.IsDefault, row7.BusinessPartner,
                  row7.Location1stLine, row7.Location2ndLine, row7.LocationPostalCode,
                  row7.LocationCity, row7.LocationRegion, row7.LocationCountry, row7.BankCode,
                  row7.BranchCode, row7.BankControlDigit, row7.INENo, row7.SwiftCode,
                  row7.AccountControlDigit, row7.PartialAccountNo, row7.AccountNo, row7.IBAN,
                  row7.InitialBalance, row7.CreditLimit, row7.MatchingAlgorithm);

              nb_line_tJavaRow_5++;

              /**
               * [tJavaRow_5 main ] stop
               */

            } // End of branch "row7"

            // Start of branch "row5"
            if (row5 != null) {

              /**
               * [tJavaRow_4 main ] start
               */

              currentComponent = "tJavaRow_4";

              service.logRecordError(row5.whyError, row5.Organization, row5.Name, row5.Description,
                  row5.Currency, row5.Type, row5.IsDefault, row5.BusinessPartner,
                  row5.Location1stLine, row5.Location2ndLine, row5.LocationPostalCode,
                  row5.LocationCity, row5.LocationRegion, row5.LocationCountry, row5.BankCode,
                  row5.BranchCode, row5.BankControlDigit, row5.INENo, row5.SwiftCode,
                  row5.AccountControlDigit, row5.PartialAccountNo, row5.AccountNo, row5.IBAN,
                  row5.InitialBalance, row5.CreditLimit, row5.MatchingAlgorithm);

              nb_line_tJavaRow_4++;

              /**
               * [tJavaRow_4 main ] stop
               */

            } // End of branch "row5"

          } // End of branch "row4"

          // Start of branch "row3"
          if (row3 != null) {

            /**
             * [tJavaRow_2 main ] start
             */

            currentComponent = "tJavaRow_2";

            service.logRecordError(row3.whyError, row3.Organization, row3.Name, row3.Description,
                row3.Currency, row3.Type, row3.IsDefault, row3.BusinessPartner,
                row3.Location1stLine, row3.Location2ndLine, row3.LocationPostalCode,
                row3.LocationCity, row3.LocationRegion, row3.LocationCountry, row3.BankCode,
                row3.BranchCode, row3.BankControlDigit, row3.INENo, row3.SwiftCode,
                row3.AccountControlDigit, row3.PartialAccountNo, row3.AccountNo, row3.IBAN,
                row3.InitialBalance, row3.CreditLimit, row3.MatchingAlgorithm);

            nb_line_tJavaRow_2++;

            /**
             * [tJavaRow_2 main ] stop
             */

          } // End of branch "row3"

        } // End of branch "row1"

        /**
         * [tFileInputDelimited_1 end ] start
         */

        currentComponent = "tFileInputDelimited_1";

        nb_line_tFileInputDelimited_1++;
      }
      csvReadertFileInputDelimited_1.close();
      globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);

      ok_Hash.put("tFileInputDelimited_1", true);
      end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

      /**
       * [tFileInputDelimited_1 end ] stop
       */

      /**
       * [tJavaRow_1 end ] start
       */

      currentComponent = "tJavaRow_1";

      globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

      ok_Hash.put("tJavaRow_1", true);
      end_Hash.put("tJavaRow_1", System.currentTimeMillis());

      /**
       * [tJavaRow_1 end ] stop
       */

      /**
       * [tFilterRow_1 end ] start
       */

      currentComponent = "tFilterRow_1";

      globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
      globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
      globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

      ok_Hash.put("tFilterRow_1", true);
      end_Hash.put("tFilterRow_1", System.currentTimeMillis());

      /**
       * [tFilterRow_1 end ] stop
       */

      /**
       * [tJavaRow_3 end ] start
       */

      currentComponent = "tJavaRow_3";

      globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

      ok_Hash.put("tJavaRow_3", true);
      end_Hash.put("tJavaRow_3", System.currentTimeMillis());

      /**
       * [tJavaRow_3 end ] stop
       */

      /**
       * [tFilterRow_2 end ] start
       */

      currentComponent = "tFilterRow_2";

      globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
      globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
      globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

      ok_Hash.put("tFilterRow_2", true);
      end_Hash.put("tFilterRow_2", System.currentTimeMillis());

      /**
       * [tFilterRow_2 end ] stop
       */

      /**
       * [tJavaRow_5 end ] start
       */

      currentComponent = "tJavaRow_5";

      globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);

      ok_Hash.put("tJavaRow_5", true);
      end_Hash.put("tJavaRow_5", System.currentTimeMillis());

      /**
       * [tJavaRow_5 end ] stop
       */

      /**
       * [tJavaRow_4 end ] start
       */

      currentComponent = "tJavaRow_4";

      globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

      ok_Hash.put("tJavaRow_4", true);
      end_Hash.put("tJavaRow_4", System.currentTimeMillis());

      /**
       * [tJavaRow_4 end ] stop
       */

      /**
       * [tJavaRow_2 end ] start
       */

      currentComponent = "tJavaRow_2";

      globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

      ok_Hash.put("tJavaRow_2", true);
      end_Hash.put("tJavaRow_2", System.currentTimeMillis());

      /**
       * [tJavaRow_2 end ] stop
       */

    } catch (Exception e) {

      throw new TalendException(e, currentComponent, globalMap);

    }

    globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
  }

  public boolean watch = false;
  public int portStats = 3334;
  public int portTraces = 4334;
  public String clientHost;
  public String defaultClientHost = "localhost";
  public String contextStr = "Default";
  public String pid = "0";
  public String rootPid = null;
  public String fatherPid = null;
  public long startTime = 0;
  public boolean isChildJob = false;

  private ThreadLocal threadLocal = new ThreadLocal();
  {
    java.util.Map threadRunResultMap = new java.util.HashMap();
    threadRunResultMap.put("errorCode", null);
    threadRunResultMap.put("status", "");
    threadLocal.set(threadRunResultMap);
  }

  private java.util.Properties context_param = new java.util.Properties();

  public String status = "";

  public static void main(String[] args) {
    final FinancialAccountsJob FinancialAccountsJobClass = new FinancialAccountsJob();

    int exitCode = FinancialAccountsJobClass.runJobInTOS(args);

    System.exit(exitCode);
  }

  public String[][] runJob(String[] args) {

    int exitCode = runJobInTOS(args);
    String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

    return bufferValue;
  }

  public int runJobInTOS(String[] args) {

    String lastStr = "";
    for (String arg : args) {
      if (arg.equalsIgnoreCase("--context_param")) {
        lastStr = arg;
      } else if (lastStr.equals("")) {
        evalParam(arg);
      } else {
        evalParam(lastStr + " " + arg);
        lastStr = "";
      }
    }

    if (clientHost == null) {
      clientHost = defaultClientHost;
    }

    if (pid == null || "0".equals(pid)) {
      pid = TalendString.getAsciiRandomString(6);
    }

    if (rootPid == null) {
      rootPid = pid;
    }
    if (fatherPid == null) {
      fatherPid = pid;
    } else {
      isChildJob = true;
    }

    try {
      java.io.InputStream inContext = FinancialAccountsJob.class.getClassLoader()
          .getResourceAsStream(
              "initial_data_load/financialaccountsjob_0_1/contexts/Default.properties");
      if (inContext != null) {
        defaultProps.load(inContext);
        inContext.close();
        context = new ContextProperties(defaultProps);
      }

      if (contextStr.compareTo("Default") != 0) {
        inContext = FinancialAccountsJob.class.getClassLoader().getResourceAsStream(
            "initial_data_load/financialaccountsjob_0_1/contexts/" + contextStr + ".properties");
        if (inContext != null) {
          context.load(inContext);
          inContext.close();
        }
      }

      if (!context_param.isEmpty()) {
        context.putAll(context_param);
      }

    } catch (java.io.IOException ie) {
      System.err.println("Could not load context " + contextStr);
      ie.printStackTrace();
    }

    long end = 0;

    startTime = System.currentTimeMillis();

    try {
      errorCode = null;
      tFileInputDelimited_1Process(globalMap);
      status = "end";
    } catch (TalendException e_tFileInputDelimited_1) {
      status = "failure";
      e_tFileInputDelimited_1.printStackTrace();
      globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

    } finally {
    }

    end = System.currentTimeMillis();

    if (watch) {
      System.out.println((end - startTime) + " milliseconds");
    }

    if (errorCode == null) {
      return status != null && status.equals("failure") ? 1 : 0;
    } else {
      return errorCode.intValue();
    }
  }

  private void evalParam(String arg) {
    if (arg.startsWith("--watch")) {
      watch = true;
    } else if (arg.startsWith("--stat_port=")) {
      portStats = Integer.parseInt(arg.substring(12));
    } else if (arg.startsWith("--trace_port=")) {
      portTraces = Integer.parseInt(arg.substring(13));
    } else if (arg.startsWith("--client_host=")) {
      clientHost = arg.substring(14);
    } else if (arg.startsWith("--context=")) {
      contextStr = arg.substring(10);
    } else if (arg.startsWith("--father_pid=")) {
      fatherPid = arg.substring(13);
    } else if (arg.startsWith("--root_pid=")) {
      rootPid = arg.substring(11);
    } else if (arg.startsWith("--pid=")) {
      pid = arg.substring(6);
    } else if (arg.startsWith("--context_param")) {
      String keyValue = arg.substring(16);
      int index = -1;
      if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
        context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
      }
    }

  }

  public Integer getErrorCode() {
    return errorCode;
  }

  public String getStatus() {
    return status;
  }
}
/************************************************************************************************
 * 273137 characters generated by Talend Open Studio on the July 9, 2010 12:12:36 PM CEST
 ************************************************************************************************/
