// ============================================================================
//
// Copyright (c) 2005-2016, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 3.1.4.r29781).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package org.openbravo.idl.initial_data_load.paymentjob_0_1;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.openbravo.idl.proc.Value;
import org.openbravo.model.common.businesspartner.BusinessPartner;
import org.openbravo.model.common.currency.Currency;
import org.openbravo.model.financialmgmt.gl.GLItem;
import org.openbravo.model.financialmgmt.payment.FIN_FinancialAccount;
import org.openbravo.model.marketing.Campaign;
import org.openbravo.model.materialmgmt.cost.ABCActivity;
import org.openbravo.model.project.Project;

import routines.TalendString;
import routines.system.TDieException;

//the import part of tJavaRow_4
//import java.util.List;

//the import part of tJavaRow_5
//import java.util.List;

/**
 * Job: PaymentJob Purpose: <br>
 * Description: <br>
 * 
 * @author
 * @version 3.1.4.r29781
 * @status
 */
@SuppressWarnings({ "rawtypes", "unchecked", "hiding" })
public class PaymentJob {

  public final Object obj = new Object();
  // create and load default properties
  private java.util.Properties defaultProps = new java.util.Properties();

  // create application properties with default
  private class ContextProperties extends java.util.Properties {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;

    public ContextProperties(java.util.Properties properties) {
      super(properties);
    }

    public ContextProperties() {
      super();
    }

    @SuppressWarnings("unused")
    public void synchronizeContext() {

    }

  }

  private ContextProperties context = new ContextProperties();
  public Integer errorCode = null;
  private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
  private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
  public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

  private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
  private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
      new java.io.BufferedOutputStream(baos));

  public String getExceptionStackTrace() {
    errorMessagePS.flush();
    return baos.toString();
  }

  @SuppressWarnings("serial")
  private class TalendException extends Exception {
    private java.util.Map<String, Object> globalMap = null;
    private Exception e = null;
    private String currentComponent = null;

    private TalendException(Exception e, String errorComponent,
        final java.util.Map<String, Object> globalMap) {
      this.currentComponent = errorComponent;
      this.globalMap = globalMap;
      this.e = e;
    }

    @Override
    public void printStackTrace() {
      if (!(e instanceof TalendException || e instanceof TDieException)) {
        globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
        System.err.println("Exception in component " + currentComponent);
      }
      if (!(e instanceof TDieException)) {
        if (e instanceof TalendException) {
          e.printStackTrace();
        } else {
          e.printStackTrace();
          e.printStackTrace(errorMessagePS);
        }
      }
      if (!(e instanceof TalendException)) {
        try {
          for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
            if (m.getName().compareTo(currentComponent + "_error") == 0) {
              m.invoke(PaymentJob.this, new Object[] { e, globalMap });
              break;
            }
          }

          if (!(e instanceof TDieException)) {
          }
        } catch (java.lang.SecurityException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalArgumentException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalAccessException e) {
          this.e.printStackTrace();
        } catch (java.lang.reflect.InvocationTargetException e) {
          this.e.printStackTrace();
        }
      }
    }
  }

  public void tFileInputDelimited_1_error(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
    end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_1_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_1_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_3_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_3", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_2_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_2", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_5_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_5", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_4_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_4", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_2_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_2", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFileInputDelimited_1_onSubJobError(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
  }

  static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String DocumentNo;
    String BusinessPartner;
    String IsReceipt;
    String Currency;
    String PaymentMethod;
    String PaymentDate;
    String FinancialAccount;
    String Project;
    String Campaign;
    String Activity;
    String InvoiceNo;
    String OrderNo;
    String GLItem;
    String Amount;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DocumentNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DocumentNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsReceipt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsReceipt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.FinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.FinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Project = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Project = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Campaign = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Campaign = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Activity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Activity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InvoiceNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InvoiceNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.OrderNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.OrderNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.GLItem = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.GLItem = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Amount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Amount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DocumentNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DocumentNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsReceipt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsReceipt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.FinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.FinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Project == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Project.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Campaign == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Campaign.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Activity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Activity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InvoiceNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InvoiceNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.OrderNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.OrderNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.GLItem == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.GLItem.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Amount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Amount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("DocumentNo");
      sb.append("=");
      sb.append(String.valueOf(this.DocumentNo));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("IsReceipt");
      sb.append("=");
      sb.append(String.valueOf(this.IsReceipt));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("PaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentMethod));

      sb.append(", ");

      sb.append("PaymentDate");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentDate));

      sb.append(", ");

      sb.append("FinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.FinancialAccount));

      sb.append(", ");

      sb.append("Project");
      sb.append("=");
      sb.append(String.valueOf(this.Project));

      sb.append(", ");

      sb.append("Campaign");
      sb.append("=");
      sb.append(String.valueOf(this.Campaign));

      sb.append(", ");

      sb.append("Activity");
      sb.append("=");
      sb.append(String.valueOf(this.Activity));

      sb.append(", ");

      sb.append("InvoiceNo");
      sb.append("=");
      sb.append(String.valueOf(this.InvoiceNo));

      sb.append(", ");

      sb.append("OrderNo");
      sb.append("=");
      sb.append(String.valueOf(this.OrderNo));

      sb.append(", ");

      sb.append("GLItem");
      sb.append("=");
      sb.append(String.valueOf(this.GLItem));

      sb.append(", ");

      sb.append("Amount");
      sb.append("=");
      sb.append(String.valueOf(this.Amount));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String DocumentNo;
    String BusinessPartner;
    String IsReceipt;
    String Currency;
    String PaymentMethod;
    String PaymentDate;
    String FinancialAccount;
    String Project;
    String Campaign;
    String Activity;
    String InvoiceNo;
    String OrderNo;
    String GLItem;
    String Amount;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DocumentNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DocumentNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsReceipt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsReceipt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.FinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.FinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Project = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Project = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Campaign = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Campaign = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Activity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Activity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InvoiceNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InvoiceNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.OrderNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.OrderNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.GLItem = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.GLItem = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Amount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Amount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DocumentNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DocumentNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsReceipt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsReceipt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.FinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.FinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Project == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Project.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Campaign == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Campaign.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Activity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Activity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InvoiceNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InvoiceNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.OrderNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.OrderNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.GLItem == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.GLItem.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Amount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Amount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("DocumentNo");
      sb.append("=");
      sb.append(String.valueOf(this.DocumentNo));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("IsReceipt");
      sb.append("=");
      sb.append(String.valueOf(this.IsReceipt));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("PaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentMethod));

      sb.append(", ");

      sb.append("PaymentDate");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentDate));

      sb.append(", ");

      sb.append("FinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.FinancialAccount));

      sb.append(", ");

      sb.append("Project");
      sb.append("=");
      sb.append(String.valueOf(this.Project));

      sb.append(", ");

      sb.append("Campaign");
      sb.append("=");
      sb.append(String.valueOf(this.Campaign));

      sb.append(", ");

      sb.append("Activity");
      sb.append("=");
      sb.append(String.valueOf(this.Activity));

      sb.append(", ");

      sb.append("InvoiceNo");
      sb.append("=");
      sb.append(String.valueOf(this.InvoiceNo));

      sb.append(", ");

      sb.append("OrderNo");
      sb.append("=");
      sb.append(String.valueOf(this.OrderNo));

      sb.append(", ");

      sb.append("GLItem");
      sb.append("=");
      sb.append(String.valueOf(this.GLItem));

      sb.append(", ");

      sb.append("Amount");
      sb.append("=");
      sb.append(String.valueOf(this.Amount));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String DocumentNo;
    String BusinessPartner;
    String IsReceipt;
    String Currency;
    String PaymentMethod;
    String PaymentDate;
    String FinancialAccount;
    String Project;
    String Campaign;
    String Activity;
    String InvoiceNo;
    String OrderNo;
    String GLItem;
    String Amount;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DocumentNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DocumentNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsReceipt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsReceipt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.FinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.FinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Project = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Project = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Campaign = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Campaign = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Activity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Activity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InvoiceNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InvoiceNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.OrderNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.OrderNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.GLItem = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.GLItem = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Amount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Amount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DocumentNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DocumentNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsReceipt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsReceipt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.FinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.FinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Project == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Project.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Campaign == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Campaign.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Activity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Activity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InvoiceNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InvoiceNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.OrderNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.OrderNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.GLItem == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.GLItem.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Amount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Amount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("DocumentNo");
      sb.append("=");
      sb.append(String.valueOf(this.DocumentNo));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("IsReceipt");
      sb.append("=");
      sb.append(String.valueOf(this.IsReceipt));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("PaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentMethod));

      sb.append(", ");

      sb.append("PaymentDate");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentDate));

      sb.append(", ");

      sb.append("FinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.FinancialAccount));

      sb.append(", ");

      sb.append("Project");
      sb.append("=");
      sb.append(String.valueOf(this.Project));

      sb.append(", ");

      sb.append("Campaign");
      sb.append("=");
      sb.append(String.valueOf(this.Campaign));

      sb.append(", ");

      sb.append("Activity");
      sb.append("=");
      sb.append(String.valueOf(this.Activity));

      sb.append(", ");

      sb.append("InvoiceNo");
      sb.append("=");
      sb.append(String.valueOf(this.InvoiceNo));

      sb.append(", ");

      sb.append("OrderNo");
      sb.append("=");
      sb.append(String.valueOf(this.OrderNo));

      sb.append(", ");

      sb.append("GLItem");
      sb.append("=");
      sb.append(String.valueOf(this.GLItem));

      sb.append(", ");

      sb.append("Amount");
      sb.append("=");
      sb.append(String.valueOf(this.Amount));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String DocumentNo;
    String BusinessPartner;
    String IsReceipt;
    String Currency;
    String PaymentMethod;
    String PaymentDate;
    String FinancialAccount;
    String Project;
    String Campaign;
    String Activity;
    String InvoiceNo;
    String OrderNo;
    String GLItem;
    String Amount;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DocumentNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DocumentNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsReceipt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsReceipt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.FinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.FinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Project = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Project = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Campaign = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Campaign = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Activity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Activity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InvoiceNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InvoiceNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.OrderNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.OrderNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.GLItem = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.GLItem = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Amount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Amount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DocumentNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DocumentNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsReceipt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsReceipt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.FinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.FinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Project == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Project.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Campaign == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Campaign.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Activity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Activity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InvoiceNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InvoiceNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.OrderNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.OrderNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.GLItem == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.GLItem.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Amount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Amount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("DocumentNo");
      sb.append("=");
      sb.append(String.valueOf(this.DocumentNo));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("IsReceipt");
      sb.append("=");
      sb.append(String.valueOf(this.IsReceipt));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("PaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentMethod));

      sb.append(", ");

      sb.append("PaymentDate");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentDate));

      sb.append(", ");

      sb.append("FinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.FinancialAccount));

      sb.append(", ");

      sb.append("Project");
      sb.append("=");
      sb.append(String.valueOf(this.Project));

      sb.append(", ");

      sb.append("Campaign");
      sb.append("=");
      sb.append(String.valueOf(this.Campaign));

      sb.append(", ");

      sb.append("Activity");
      sb.append("=");
      sb.append(String.valueOf(this.Activity));

      sb.append(", ");

      sb.append("InvoiceNo");
      sb.append("=");
      sb.append(String.valueOf(this.InvoiceNo));

      sb.append(", ");

      sb.append("OrderNo");
      sb.append("=");
      sb.append(String.valueOf(this.OrderNo));

      sb.append(", ");

      sb.append("GLItem");
      sb.append("=");
      sb.append(String.valueOf(this.GLItem));

      sb.append(", ");

      sb.append("Amount");
      sb.append("=");
      sb.append(String.valueOf(this.Amount));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String DocumentNo;
    String BusinessPartner;
    String IsReceipt;
    String Currency;
    String PaymentMethod;
    String PaymentDate;
    String FinancialAccount;
    String Project;
    String Campaign;
    String Activity;
    String InvoiceNo;
    String OrderNo;
    String GLItem;
    String Amount;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DocumentNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DocumentNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsReceipt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsReceipt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.FinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.FinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Project = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Project = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Campaign = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Campaign = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Activity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Activity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InvoiceNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InvoiceNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.OrderNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.OrderNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.GLItem = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.GLItem = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Amount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Amount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DocumentNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DocumentNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsReceipt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsReceipt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.FinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.FinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Project == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Project.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Campaign == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Campaign.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Activity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Activity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InvoiceNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InvoiceNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.OrderNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.OrderNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.GLItem == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.GLItem.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Amount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Amount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("DocumentNo");
      sb.append("=");
      sb.append(String.valueOf(this.DocumentNo));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("IsReceipt");
      sb.append("=");
      sb.append(String.valueOf(this.IsReceipt));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("PaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentMethod));

      sb.append(", ");

      sb.append("PaymentDate");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentDate));

      sb.append(", ");

      sb.append("FinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.FinancialAccount));

      sb.append(", ");

      sb.append("Project");
      sb.append("=");
      sb.append(String.valueOf(this.Project));

      sb.append(", ");

      sb.append("Campaign");
      sb.append("=");
      sb.append(String.valueOf(this.Campaign));

      sb.append(", ");

      sb.append("Activity");
      sb.append("=");
      sb.append(String.valueOf(this.Activity));

      sb.append(", ");

      sb.append("InvoiceNo");
      sb.append("=");
      sb.append(String.valueOf(this.InvoiceNo));

      sb.append(", ");

      sb.append("OrderNo");
      sb.append("=");
      sb.append(String.valueOf(this.OrderNo));

      sb.append(", ");

      sb.append("GLItem");
      sb.append("=");
      sb.append(String.valueOf(this.GLItem));

      sb.append(", ");

      sb.append("Amount");
      sb.append("=");
      sb.append(String.valueOf(this.Amount));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String DocumentNo;
    String BusinessPartner;
    String IsReceipt;
    String Currency;
    String PaymentMethod;
    String PaymentDate;
    String FinancialAccount;
    String Project;
    String Campaign;
    String Activity;
    String InvoiceNo;
    String OrderNo;
    String GLItem;
    String Amount;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DocumentNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DocumentNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsReceipt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsReceipt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.FinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.FinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Project = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Project = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Campaign = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Campaign = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Activity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Activity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InvoiceNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InvoiceNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.OrderNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.OrderNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.GLItem = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.GLItem = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Amount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Amount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DocumentNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DocumentNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsReceipt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsReceipt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.FinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.FinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Project == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Project.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Campaign == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Campaign.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Activity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Activity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InvoiceNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InvoiceNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.OrderNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.OrderNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.GLItem == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.GLItem.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Amount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Amount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("DocumentNo");
      sb.append("=");
      sb.append(String.valueOf(this.DocumentNo));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("IsReceipt");
      sb.append("=");
      sb.append(String.valueOf(this.IsReceipt));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("PaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentMethod));

      sb.append(", ");

      sb.append("PaymentDate");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentDate));

      sb.append(", ");

      sb.append("FinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.FinancialAccount));

      sb.append(", ");

      sb.append("Project");
      sb.append("=");
      sb.append(String.valueOf(this.Project));

      sb.append(", ");

      sb.append("Campaign");
      sb.append("=");
      sb.append(String.valueOf(this.Campaign));

      sb.append(", ");

      sb.append("Activity");
      sb.append("=");
      sb.append(String.valueOf(this.Activity));

      sb.append(", ");

      sb.append("InvoiceNo");
      sb.append("=");
      sb.append(String.valueOf(this.InvoiceNo));

      sb.append(", ");

      sb.append("OrderNo");
      sb.append("=");
      sb.append(String.valueOf(this.OrderNo));

      sb.append(", ");

      sb.append("GLItem");
      sb.append("=");
      sb.append(String.valueOf(this.GLItem));

      sb.append(", ");

      sb.append("Amount");
      sb.append("=");
      sb.append(String.valueOf(this.Amount));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String DocumentNo;
    String BusinessPartner;
    String IsReceipt;
    String Currency;
    String PaymentMethod;
    String PaymentDate;
    String FinancialAccount;
    String Project;
    String Campaign;
    String Activity;
    String InvoiceNo;
    String OrderNo;
    String GLItem;
    String Amount;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DocumentNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DocumentNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.IsReceipt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.IsReceipt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Currency = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Currency = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.FinancialAccount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.FinancialAccount = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Project = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Project = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Campaign = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Campaign = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Activity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Activity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.InvoiceNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.InvoiceNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.OrderNo = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.OrderNo = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.GLItem = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.GLItem = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Amount = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Amount = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DocumentNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DocumentNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.IsReceipt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.IsReceipt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Currency == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Currency.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.FinancialAccount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.FinancialAccount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Project == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Project.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Campaign == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Campaign.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Activity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Activity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.InvoiceNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.InvoiceNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.OrderNo == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.OrderNo.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.GLItem == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.GLItem.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Amount == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Amount.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("DocumentNo");
      sb.append("=");
      sb.append(String.valueOf(this.DocumentNo));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("IsReceipt");
      sb.append("=");
      sb.append(String.valueOf(this.IsReceipt));

      sb.append(", ");

      sb.append("Currency");
      sb.append("=");
      sb.append(String.valueOf(this.Currency));

      sb.append(", ");

      sb.append("PaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentMethod));

      sb.append(", ");

      sb.append("PaymentDate");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentDate));

      sb.append(", ");

      sb.append("FinancialAccount");
      sb.append("=");
      sb.append(String.valueOf(this.FinancialAccount));

      sb.append(", ");

      sb.append("Project");
      sb.append("=");
      sb.append(String.valueOf(this.Project));

      sb.append(", ");

      sb.append("Campaign");
      sb.append("=");
      sb.append(String.valueOf(this.Campaign));

      sb.append(", ");

      sb.append("Activity");
      sb.append("=");
      sb.append(String.valueOf(this.Activity));

      sb.append(", ");

      sb.append("InvoiceNo");
      sb.append("=");
      sb.append(String.valueOf(this.InvoiceNo));

      sb.append(", ");

      sb.append("OrderNo");
      sb.append("=");
      sb.append(String.valueOf(this.OrderNo));

      sb.append(", ");

      sb.append("GLItem");
      sb.append("=");
      sb.append(String.valueOf(this.GLItem));

      sb.append(", ");

      sb.append("Amount");
      sb.append("=");
      sb.append(String.valueOf(this.Amount));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap)
      throws TalendException {
    globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

    String currentComponent = "";

    try {

      row1Struct row1 = new row1Struct();
      row2Struct row2 = new row2Struct();
      row4Struct row4 = new row4Struct();
      row6Struct row6 = new row6Struct();
      row7Struct row7 = new row7Struct();
      row5Struct row5 = new row5Struct();
      row3Struct row3 = new row3Struct();

      /**
       * [tJavaRow_5 begin ] start
       */

      ok_Hash.put("tJavaRow_5", false);
      start_Hash.put("tJavaRow_5", System.currentTimeMillis());
      currentComponent = "tJavaRow_5";

      int nb_line_tJavaRow_5 = 0;

      /**
       * [tJavaRow_5 begin ] stop
       */

      /**
       * [tJavaRow_4 begin ] start
       */

      ok_Hash.put("tJavaRow_4", false);
      start_Hash.put("tJavaRow_4", System.currentTimeMillis());
      currentComponent = "tJavaRow_4";

      int nb_line_tJavaRow_4 = 0;

      /**
       * [tJavaRow_4 begin ] stop
       */

      /**
       * [tFilterRow_2 begin ] start
       */

      ok_Hash.put("tFilterRow_2", false);
      start_Hash.put("tFilterRow_2", System.currentTimeMillis());
      currentComponent = "tFilterRow_2";

      int nb_line_tFilterRow_2 = 0;
      int nb_line_ok_tFilterRow_2 = 0;
      int nb_line_reject_tFilterRow_2 = 0;

      /**
       * [tFilterRow_2 begin ] stop
       */

      /**
       * [tJavaRow_3 begin ] start
       */

      ok_Hash.put("tJavaRow_3", false);
      start_Hash.put("tJavaRow_3", System.currentTimeMillis());
      currentComponent = "tJavaRow_3";

      int nb_line_tJavaRow_3 = 0;

      /**
       * [tJavaRow_3 begin ] stop
       */

      /**
       * [tJavaRow_2 begin ] start
       */

      ok_Hash.put("tJavaRow_2", false);
      start_Hash.put("tJavaRow_2", System.currentTimeMillis());
      currentComponent = "tJavaRow_2";

      int nb_line_tJavaRow_2 = 0;

      /**
       * [tJavaRow_2 begin ] stop
       */

      /**
       * [tFilterRow_1 begin ] start
       */

      ok_Hash.put("tFilterRow_1", false);
      start_Hash.put("tFilterRow_1", System.currentTimeMillis());
      currentComponent = "tFilterRow_1";

      int nb_line_tFilterRow_1 = 0;
      int nb_line_ok_tFilterRow_1 = 0;
      int nb_line_reject_tFilterRow_1 = 0;

      /**
       * [tFilterRow_1 begin ] stop
       */

      /**
       * [tJavaRow_1 begin ] start
       */

      ok_Hash.put("tJavaRow_1", false);
      start_Hash.put("tJavaRow_1", System.currentTimeMillis());
      currentComponent = "tJavaRow_1";

      int nb_line_tJavaRow_1 = 0;

      /**
       * [tJavaRow_1 begin ] stop
       */

      /**
       * [tFileInputDelimited_1 begin ] start
       */

      ok_Hash.put("tFileInputDelimited_1", false);
      start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
      currentComponent = "tFileInputDelimited_1";

      int nb_line_tFileInputDelimited_1 = 0;
      int footer_tFileInputDelimited_1 = 0;
      int totalLinetFileInputDelimited_1 = 0;
      int limittFileInputDelimited_1 = -1;
      int lastLinetFileInputDelimited_1 = -1;

      char fieldSeparator_tFileInputDelimited_1[] = null;

      // support passing value (property: Field Separator) by 'context.fs'
      // or 'globalMap.get("fs")'.
      if (((String) ",").length() > 0) {
        fieldSeparator_tFileInputDelimited_1 = ((String) ",").toCharArray();
      } else {
        throw new IllegalArgumentException("Field Separator must be assigned a char.");
      }

      char rowSeparator_tFileInputDelimited_1[] = null;

      // support passing value (property: Row Separator) by 'context.rs'
      // or 'globalMap.get("rs")'.
      if (((String) "\n").length() > 0) {
        rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
      } else {
        throw new IllegalArgumentException("Row Separator must be assigned a char.");
      }

      com.csvreader.CsvReader csvReadertFileInputDelimited_1 = new com.csvreader.CsvReader(
          new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(/**
           * 
           * Start field tFileInputDelimited_1:FILENAME
           */
          context.getProperty("filename")/**
           * End field tFileInputDelimited_1:FILENAME
           */
          ), "UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);

      if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
          && (rowSeparator_tFileInputDelimited_1[0] != '\r'))
        csvReadertFileInputDelimited_1.setRecordDelimiter(rowSeparator_tFileInputDelimited_1[0]);

      csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
      csvReadertFileInputDelimited_1.setTextQualifier('"');

      csvReadertFileInputDelimited_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      String[] rowtFileInputDelimited_1 = null;

      if (footer_tFileInputDelimited_1 > 0) {

        while (csvReadertFileInputDelimited_1.readRecord()) {
          rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();
          if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
              .equals(rowtFileInputDelimited_1[0]))) {// empty
            // line when
            // row
            // separator
            // is '\n'

            totalLinetFileInputDelimited_1++;

          }

        }
        int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
            - footer_tFileInputDelimited_1 < 0 ? 0 : totalLinetFileInputDelimited_1
            - footer_tFileInputDelimited_1;
        if (lastLinetFileInputDelimited_1 > 0) {
          lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
              : lastLineTemptFileInputDelimited_1;
        } else {
          lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
        }

        csvReadertFileInputDelimited_1.close();

        csvReadertFileInputDelimited_1 = new com.csvreader.CsvReader(new java.io.BufferedReader(
            new java.io.InputStreamReader(new java.io.FileInputStream(/**
             * Start field
             * tFileInputDelimited_1:FILENAME
             */
            context.getProperty("filename")/**
             * End field tFileInputDelimited_1:FILENAME
             */
            ), "UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);

        if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
            && (rowSeparator_tFileInputDelimited_1[0] != '\r'))
          csvReadertFileInputDelimited_1.setRecordDelimiter(rowSeparator_tFileInputDelimited_1[0]);
        csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
        csvReadertFileInputDelimited_1.setTextQualifier('"');
        csvReadertFileInputDelimited_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      }

      int currentLinetFileInputDelimited_1 = 0;
      int outputLinetFileInputDelimited_1 = 0;

      while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1.readRecord()) {

        rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

        if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
          // line
          // when
          // row
          // separator
          // is
          // '\n'
          continue;
        }

        currentLinetFileInputDelimited_1++;
        if (currentLinetFileInputDelimited_1 < 1 + 1) {
          continue;
        }

        if (lastLinetFileInputDelimited_1 > -1
            && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
          break;
        }
        outputLinetFileInputDelimited_1++;
        if (limittFileInputDelimited_1 > 0
            && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
          break;
        }

        row1 = null;
        row1 = new row1Struct();
        try {

          if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
            // line
            // when
            // row
            // separator
            // is
            // '\n'

            row1.Organization = null;

            row1.DocumentNo = null;

            row1.BusinessPartner = null;

            row1.IsReceipt = null;

            row1.Currency = null;

            row1.PaymentMethod = null;

            row1.PaymentDate = null;

            row1.FinancialAccount = null;

            row1.Project = null;

            row1.Campaign = null;

            row1.Activity = null;

            row1.InvoiceNo = null;

            row1.OrderNo = null;

            row1.GLItem = null;

            row1.Amount = null;

          } else {

            if (0 < rowtFileInputDelimited_1.length) {
              row1.Organization = rowtFileInputDelimited_1[0].trim();

            } else {
              row1.Organization = null;
            }

            if (1 < rowtFileInputDelimited_1.length) {
              row1.DocumentNo = rowtFileInputDelimited_1[1].trim();

            } else {
              row1.DocumentNo = null;
            }

            if (2 < rowtFileInputDelimited_1.length) {
              row1.BusinessPartner = rowtFileInputDelimited_1[2].trim();

            } else {
              row1.BusinessPartner = null;
            }

            if (3 < rowtFileInputDelimited_1.length) {
              row1.IsReceipt = rowtFileInputDelimited_1[3].trim();

            } else {
              row1.IsReceipt = null;
            }

            if (4 < rowtFileInputDelimited_1.length) {
              row1.Currency = rowtFileInputDelimited_1[4].trim();

            } else {
              row1.Currency = null;
            }

            if (5 < rowtFileInputDelimited_1.length) {
              row1.PaymentMethod = rowtFileInputDelimited_1[5].trim();

            } else {
              row1.PaymentMethod = null;
            }

            if (6 < rowtFileInputDelimited_1.length) {
              row1.PaymentDate = rowtFileInputDelimited_1[6].trim();

            } else {
              row1.PaymentDate = null;
            }

            if (7 < rowtFileInputDelimited_1.length) {
              row1.FinancialAccount = rowtFileInputDelimited_1[7].trim();

            } else {
              row1.FinancialAccount = null;
            }

            if (8 < rowtFileInputDelimited_1.length) {
              row1.Project = rowtFileInputDelimited_1[8].trim();

            } else {
              row1.Project = null;
            }

            if (9 < rowtFileInputDelimited_1.length) {
              row1.Campaign = rowtFileInputDelimited_1[9].trim();

            } else {
              row1.Campaign = null;
            }

            if (10 < rowtFileInputDelimited_1.length) {
              row1.Activity = rowtFileInputDelimited_1[10].trim();

            } else {
              row1.Activity = null;
            }

            if (11 < rowtFileInputDelimited_1.length) {
              row1.InvoiceNo = rowtFileInputDelimited_1[11].trim();

            } else {
              row1.InvoiceNo = null;
            }

            if (12 < rowtFileInputDelimited_1.length) {
              row1.OrderNo = rowtFileInputDelimited_1[12].trim();

            } else {
              row1.OrderNo = null;
            }

            if (13 < rowtFileInputDelimited_1.length) {
              row1.GLItem = rowtFileInputDelimited_1[13].trim();

            } else {
              row1.GLItem = null;
            }

            if (14 < rowtFileInputDelimited_1.length) {
              row1.Amount = rowtFileInputDelimited_1[14].trim();

            } else {
              row1.Amount = null;
            }

          }

        } catch (Exception e) {
          System.err.println(e.getMessage());
          row1 = null;
        }

        /**
         * [tFileInputDelimited_1 begin ] stop
         */
        /**
         * [tFileInputDelimited_1 main ] start
         */

        currentComponent = "tFileInputDelimited_1";

        /**
         * [tFileInputDelimited_1 main ] stop
         */
        // Start of branch "row1"
        if (row1 != null) {

          /**
           * [tJavaRow_1 main ] start
           */

          currentComponent = "tJavaRow_1";

          org.openbravo.idl.proc.IdlService service = org.openbravo.idl.proc.IdlIntService
              .getInstance().getService("Payable");
          org.openbravo.idl.proc.Validator validator = service.getValidator("Payable");

          row2.Organization = validator.checkOrganization(row1.Organization);
          row2.DocumentNo = validator.checkString(row1.DocumentNo, 30);
          row2.PaymentMethod = validator.checkString(row1.PaymentMethod, 60);
          row2.Currency = validator.checkString(row1.Currency, 3);
          row2.PaymentDate = validator.checkString(row1.PaymentDate, 20);
          row2.IsReceipt = validator.checkBoolean(row1.IsReceipt, "IsReceipt");
          row2.BusinessPartner = validator.checkString(row1.BusinessPartner, 60);
          row2.FinancialAccount = validator.checkString(row1.FinancialAccount, 60);
          row2.Project = validator.checkString(row1.Project, 60);
          row2.Campaign = validator.checkString(row1.Campaign, 60);
          row2.Activity = validator.checkString(row1.Activity, 60);
          row2.InvoiceNo = validator.checkString(row1.InvoiceNo, 30);
          row2.OrderNo = validator.checkString(row1.OrderNo, 30);
          row2.GLItem = validator.checkNotNull(validator.checkString(row1.GLItem, 60), "GLItem");
          row2.Amount = validator.checkString(row1.Amount, 22);

          row2.flag = validator.getErrorCode();
          row2.whyError = validator.getErrorMessage();

          nb_line_tJavaRow_1++;

          /**
           * [tJavaRow_1 main ] stop
           */

          /**
           * [tFilterRow_1 main ] start
           */

          currentComponent = "tFilterRow_1";

          row4 = null;
          row3 = null;

          if (

          (row2.flag == null ? false : row2.flag.toLowerCase().compareTo("0") == 0)

          )

          {
            if (row4 == null) {
              row4 = new row4Struct();
            }
            row4.Organization = row2.Organization;
            row4.DocumentNo = row2.DocumentNo;
            row4.BusinessPartner = row2.BusinessPartner;
            row4.IsReceipt = row2.IsReceipt;
            row4.Currency = row2.Currency;
            row4.PaymentMethod = row2.PaymentMethod;
            row4.PaymentDate = row2.PaymentDate;
            row4.FinancialAccount = row2.FinancialAccount;
            row4.Project = row2.Project;
            row4.Campaign = row2.Campaign;
            row4.Activity = row2.Activity;
            row4.InvoiceNo = row2.InvoiceNo;
            row4.OrderNo = row2.OrderNo;
            row4.GLItem = row2.GLItem;
            row4.Amount = row2.Amount;
            row4.flag = row2.flag;
            row4.whyError = row2.whyError;
            nb_line_ok_tFilterRow_1++;
          } else {
            if (row3 == null) {
              row3 = new row3Struct();
            }
            row3.Organization = row2.Organization;
            row3.DocumentNo = row2.DocumentNo;
            row3.BusinessPartner = row2.BusinessPartner;
            row3.IsReceipt = row2.IsReceipt;
            row3.Currency = row2.Currency;
            row3.PaymentMethod = row2.PaymentMethod;
            row3.PaymentDate = row2.PaymentDate;
            row3.FinancialAccount = row2.FinancialAccount;
            row3.Project = row2.Project;
            row3.Campaign = row2.Campaign;
            row3.Activity = row2.Activity;
            row3.InvoiceNo = row2.InvoiceNo;
            row3.OrderNo = row2.OrderNo;
            row3.GLItem = row2.GLItem;
            row3.Amount = row2.Amount;
            row3.flag = row2.flag;
            row3.whyError = row2.whyError;
            nb_line_reject_tFilterRow_1++;
          }
          nb_line_tFilterRow_1++;

          /**
           * [tFilterRow_1 main ] stop
           */
          // Start of branch "row4"
          if (row4 != null) {

            /**
             * [tJavaRow_3 main ] start
             */

            currentComponent = "tJavaRow_3";

            row6.flag = "0";
            row6.whyError = "";

            row6.Organization = row4.Organization;
            row6.DocumentNo = row4.DocumentNo;
            row6.IsReceipt = row4.IsReceipt;
            row6.Currency = row4.Currency;
            if (row4.Currency != null) {
              Currency cur = service.findDALInstance(false, Currency.class, new Value(
                  Currency.PROPERTY_ISOCODE, row4.Currency));
              if (cur == null) {
                row6.flag = "-1";
                row6.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.Currency
                    + "\n";
              }
            }

            row6.PaymentMethod = row4.PaymentMethod;

            row6.BusinessPartner = row4.BusinessPartner;
            if (row4.BusinessPartner != null) {
              BusinessPartner bp = service.findDALInstance(false, BusinessPartner.class, new Value(
                  BusinessPartner.PROPERTY_SEARCHKEY, row4.BusinessPartner));
              if (bp == null) {
                row6.flag = "-1";
                row6.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE")
                    + row4.BusinessPartner + "\n";
              }
            }
            row6.PaymentDate = row4.PaymentDate;

            row6.FinancialAccount = row4.FinancialAccount;
            if (row4.FinancialAccount != null) {
              FIN_FinancialAccount fa = service.findDALInstance(false, FIN_FinancialAccount.class,
                  new Value(FIN_FinancialAccount.PROPERTY_NAME, row4.FinancialAccount));
              if (fa == null) {
                row6.flag = "-1";
                row6.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE")
                    + row4.FinancialAccount + "\n";
              }
            }

            row6.Project = row4.Project;
            if (row4.Project != null) {
              Project fa = service.findDALInstance(false, Project.class, new Value(
                  Project.PROPERTY_NAME, row4.Project));
              if (fa == null) {
                row6.flag = "-1";
                row6.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.Project
                    + "\n";
              }
            }

            row6.Campaign = row4.Campaign;
            if (row4.Campaign != null) {
              Campaign camp = service.findDALInstance(false, Campaign.class, new Value(
                  Campaign.PROPERTY_NAME, row4.Campaign));
              if (camp == null) {
                row6.flag = "-1";
                row6.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.Campaign
                    + "\n";
              }
            }

            row6.Activity = row4.Activity;
            if (row4.Activity != null) {
              ABCActivity act = service.findDALInstance(false, ABCActivity.class, new Value(
                  ABCActivity.PROPERTY_NAME, row4.Activity));
              if (act == null) {
                row6.flag = "-1";
                row6.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.Activity
                    + "\n";
              }
            }

            row6.InvoiceNo = row4.InvoiceNo;
            row6.OrderNo = row4.OrderNo;
            row6.GLItem = row4.GLItem;
            if (row4.GLItem != null) {
              GLItem gl = service.findDALInstance(false, GLItem.class, new Value(
                  GLItem.PROPERTY_NAME, row4.GLItem));
              if (gl == null) {
                row6.flag = "-1";
                row6.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row4.GLItem
                    + "\n";
              }
            }
            row6.Amount = row4.Amount;

            nb_line_tJavaRow_3++;

            /**
             * [tJavaRow_3 main ] stop
             */

            /**
             * [tFilterRow_2 main ] start
             */

            currentComponent = "tFilterRow_2";

            row7 = null;
            row5 = null;

            if (

            (row6.flag == null ? false : row6.flag.toLowerCase().compareTo("0") == 0)

            )

            {
              if (row7 == null) {
                row7 = new row7Struct();
              }
              row7.Organization = row6.Organization;
              row7.DocumentNo = row6.DocumentNo;
              row7.BusinessPartner = row6.BusinessPartner;
              row7.IsReceipt = row6.IsReceipt;
              row7.Currency = row6.Currency;
              row7.PaymentMethod = row6.PaymentMethod;
              row7.PaymentDate = row6.PaymentDate;
              row7.FinancialAccount = row6.FinancialAccount;
              row7.Project = row6.Project;
              row7.Campaign = row6.Campaign;
              row7.Activity = row6.Activity;
              row7.InvoiceNo = row6.InvoiceNo;
              row7.OrderNo = row6.OrderNo;
              row7.GLItem = row6.GLItem;
              row7.Amount = row6.Amount;
              row7.flag = row6.flag;
              row7.whyError = row6.whyError;
              nb_line_ok_tFilterRow_2++;
            } else {
              if (row5 == null) {
                row5 = new row5Struct();
              }
              row5.Organization = row6.Organization;
              row5.DocumentNo = row6.DocumentNo;
              row5.BusinessPartner = row6.BusinessPartner;
              row5.IsReceipt = row6.IsReceipt;
              row5.Currency = row6.Currency;
              row5.PaymentMethod = row6.PaymentMethod;
              row5.PaymentDate = row6.PaymentDate;
              row5.FinancialAccount = row6.FinancialAccount;
              row5.Project = row6.Project;
              row5.Campaign = row6.Campaign;
              row5.Activity = row6.Activity;
              row5.InvoiceNo = row6.InvoiceNo;
              row5.OrderNo = row6.OrderNo;
              row5.GLItem = row6.GLItem;
              row5.Amount = row6.Amount;
              row5.flag = row6.flag;
              row5.whyError = row6.whyError;
              nb_line_reject_tFilterRow_2++;
            }
            nb_line_tFilterRow_2++;

            /**
             * [tFilterRow_2 main ] stop
             */
            // Start of branch "row7"
            if (row7 != null) {

              /**
               * [tJavaRow_5 main ] start
               */

              currentComponent = "tJavaRow_5";

              service.finishRecordProcess(row7.Organization, row7.DocumentNo, row7.BusinessPartner,
                  row7.IsReceipt, row7.Currency, row7.PaymentMethod, row7.PaymentDate,
                  row7.FinancialAccount, row7.Project, row7.Campaign, row7.Activity,
                  row7.InvoiceNo, row7.OrderNo, row7.GLItem, row7.Amount);

              nb_line_tJavaRow_5++;

              /**
               * [tJavaRow_5 main ] stop
               */

            } // End of branch "row7"

            // Start of branch "row5"
            if (row5 != null) {

              /**
               * [tJavaRow_4 main ] start
               */

              currentComponent = "tJavaRow_4";

              service.logRecordError(row5.whyError, row5.Organization, row5.DocumentNo,
                  row5.BusinessPartner, row5.IsReceipt, row5.Currency, row5.PaymentMethod,
                  row5.PaymentDate, row5.FinancialAccount, row5.Project, row5.Campaign,
                  row5.Activity, row5.InvoiceNo, row5.OrderNo, row5.GLItem, row5.Amount);

              nb_line_tJavaRow_4++;

              /**
               * [tJavaRow_4 main ] stop
               */

            } // End of branch "row5"

          } // End of branch "row4"

          // Start of branch "row3"
          if (row3 != null) {

            /**
             * [tJavaRow_2 main ] start
             */

            currentComponent = "tJavaRow_2";

            service.logRecordError(row3.whyError, row3.Organization, row3.DocumentNo,
                row3.BusinessPartner, row3.IsReceipt, row3.Currency, row3.PaymentMethod,
                row3.PaymentDate, row3.FinancialAccount, row3.Project, row3.Campaign,
                row3.Activity, row3.InvoiceNo, row3.OrderNo, row3.GLItem, row3.Amount);

            nb_line_tJavaRow_2++;

            /**
             * [tJavaRow_2 main ] stop
             */

          } // End of branch "row3"

        } // End of branch "row1"

        /**
         * [tFileInputDelimited_1 end ] start
         */

        currentComponent = "tFileInputDelimited_1";

        nb_line_tFileInputDelimited_1++;
      }
      csvReadertFileInputDelimited_1.close();
      globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);

      ok_Hash.put("tFileInputDelimited_1", true);
      end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

      /**
       * [tFileInputDelimited_1 end ] stop
       */

      /**
       * [tJavaRow_1 end ] start
       */

      currentComponent = "tJavaRow_1";

      globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

      ok_Hash.put("tJavaRow_1", true);
      end_Hash.put("tJavaRow_1", System.currentTimeMillis());

      /**
       * [tJavaRow_1 end ] stop
       */

      /**
       * [tFilterRow_1 end ] start
       */

      currentComponent = "tFilterRow_1";

      globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
      globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
      globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

      ok_Hash.put("tFilterRow_1", true);
      end_Hash.put("tFilterRow_1", System.currentTimeMillis());

      /**
       * [tFilterRow_1 end ] stop
       */

      /**
       * [tJavaRow_3 end ] start
       */

      currentComponent = "tJavaRow_3";

      globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

      ok_Hash.put("tJavaRow_3", true);
      end_Hash.put("tJavaRow_3", System.currentTimeMillis());

      /**
       * [tJavaRow_3 end ] stop
       */

      /**
       * [tFilterRow_2 end ] start
       */

      currentComponent = "tFilterRow_2";

      globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
      globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
      globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

      ok_Hash.put("tFilterRow_2", true);
      end_Hash.put("tFilterRow_2", System.currentTimeMillis());

      /**
       * [tFilterRow_2 end ] stop
       */

      /**
       * [tJavaRow_5 end ] start
       */

      currentComponent = "tJavaRow_5";

      globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);

      ok_Hash.put("tJavaRow_5", true);
      end_Hash.put("tJavaRow_5", System.currentTimeMillis());

      /**
       * [tJavaRow_5 end ] stop
       */

      /**
       * [tJavaRow_4 end ] start
       */

      currentComponent = "tJavaRow_4";

      globalMap.put("tJavaRow_4_NB_LINE", nb_line_tJavaRow_4);

      ok_Hash.put("tJavaRow_4", true);
      end_Hash.put("tJavaRow_4", System.currentTimeMillis());

      /**
       * [tJavaRow_4 end ] stop
       */

      /**
       * [tJavaRow_2 end ] start
       */

      currentComponent = "tJavaRow_2";

      globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

      ok_Hash.put("tJavaRow_2", true);
      end_Hash.put("tJavaRow_2", System.currentTimeMillis());

      /**
       * [tJavaRow_2 end ] stop
       */

    } catch (Exception e) {

      throw new TalendException(e, currentComponent, globalMap);

    }

    globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
  }

  public boolean watch = false;
  public int portStats = 3334;
  public int portTraces = 4334;
  public String clientHost;
  public String defaultClientHost = "localhost";
  public String contextStr = "Default";
  public String pid = "0";
  public String rootPid = null;
  public String fatherPid = null;
  public long startTime = 0;
  public boolean isChildJob = false;

  private ThreadLocal threadLocal = new ThreadLocal();
  {
    java.util.Map threadRunResultMap = new java.util.HashMap();
    threadRunResultMap.put("errorCode", null);
    threadRunResultMap.put("status", "");
    threadLocal.set(threadRunResultMap);
  }

  private java.util.Properties context_param = new java.util.Properties();

  public String status = "";

  public static void main(String[] args) {
    final PaymentJob PaymentJobClass = new PaymentJob();

    int exitCode = PaymentJobClass.runJobInTOS(args);

    System.exit(exitCode);
  }

  public String[][] runJob(String[] args) {

    int exitCode = runJobInTOS(args);
    String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

    return bufferValue;
  }

  public int runJobInTOS(String[] args) {

    String lastStr = "";
    for (String arg : args) {
      if (arg.equalsIgnoreCase("--context_param")) {
        lastStr = arg;
      } else if (lastStr.equals("")) {
        evalParam(arg);
      } else {
        evalParam(lastStr + " " + arg);
        lastStr = "";
      }
    }

    if (clientHost == null) {
      clientHost = defaultClientHost;
    }

    if (pid == null || "0".equals(pid)) {
      pid = TalendString.getAsciiRandomString(6);
    }

    if (rootPid == null) {
      rootPid = pid;
    }
    if (fatherPid == null) {
      fatherPid = pid;
    } else {
      isChildJob = true;
    }

    try {
      java.io.InputStream inContext = PaymentJob.class.getClassLoader().getResourceAsStream(
          "initial_data_load/paymentjob_0_1/contexts/Default.properties");
      if (inContext != null) {
        defaultProps.load(inContext);
        inContext.close();
        context = new ContextProperties(defaultProps);
      }

      if (contextStr.compareTo("Default") != 0) {
        inContext = PaymentJob.class.getClassLoader().getResourceAsStream(
            "initial_data_load/paymentjob_0_1/contexts/" + contextStr + ".properties");
        if (inContext != null) {
          context.load(inContext);
          inContext.close();
        }
      }

      if (!context_param.isEmpty()) {
        context.putAll(context_param);
      }

    } catch (java.io.IOException ie) {
      System.err.println("Could not load context " + contextStr);
      ie.printStackTrace();
    }

    long end = 0;

    startTime = System.currentTimeMillis();

    try {
      errorCode = null;
      tFileInputDelimited_1Process(globalMap);
      status = "end";
    } catch (TalendException e_tFileInputDelimited_1) {
      status = "failure";
      e_tFileInputDelimited_1.printStackTrace();
      globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

    } finally {
    }

    end = System.currentTimeMillis();

    if (watch) {
      System.out.println((end - startTime) + " milliseconds");
    }

    if (errorCode == null) {
      return status != null && status.equals("failure") ? 1 : 0;
    } else {
      return errorCode.intValue();
    }
  }

  private void evalParam(String arg) {
    if (arg.startsWith("--watch")) {
      watch = true;
    } else if (arg.startsWith("--stat_port=")) {
      portStats = Integer.parseInt(arg.substring(12));
    } else if (arg.startsWith("--trace_port=")) {
      portTraces = Integer.parseInt(arg.substring(13));
    } else if (arg.startsWith("--client_host=")) {
      clientHost = arg.substring(14);
    } else if (arg.startsWith("--context=")) {
      contextStr = arg.substring(10);
    } else if (arg.startsWith("--father_pid=")) {
      fatherPid = arg.substring(13);
    } else if (arg.startsWith("--root_pid=")) {
      rootPid = arg.substring(11);
    } else if (arg.startsWith("--pid=")) {
      pid = arg.substring(6);
    } else if (arg.startsWith("--context_param")) {
      String keyValue = arg.substring(16);
      int index = -1;
      if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
        context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
      }
    }

  }

  public Integer getErrorCode() {
    return errorCode;
  }

  public String getStatus() {
    return status;
  }
}
/************************************************************************************************
 * 173123 characters generated by Talend Open Studio on the 27 de enero de 2012 8:25:18 CET
 ************************************************************************************************/
