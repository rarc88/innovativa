// ============================================================================
//
// Copyright (c) 2005-2016, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 3.1.4.r29781).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================ 
package org.openbravo.idl.initial_data_load.projectjob_0_1;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.openbravo.idl.proc.Value;
import org.openbravo.model.ad.access.User;
import org.openbravo.model.common.businesspartner.BusinessPartner;
import org.openbravo.model.common.businesspartner.Location;
import org.openbravo.model.common.enterprise.Warehouse;
import org.openbravo.model.financialmgmt.payment.FIN_PaymentMethod;
import org.openbravo.model.financialmgmt.payment.PaymentTerm;
import org.openbravo.model.pricing.pricelist.PriceList;
import org.openbravo.model.project.ProjectType;

import routines.TalendString;
import routines.system.TDieException;

//the import part of tJavaRow_11

//the import part of tJavaRow_16
//import java.util.List;

//the import part of tJavaRow_18
//import java.util.List;

//the import part of tJavaRow_9
//import java.util.List;

/**
 * Job: ProjectJob Purpose: <br>
 * Description: <br>
 * 
 * @author gorkaion.damian@openbravo.com
 * @version 3.1.4.r29781
 * @status
 */
@SuppressWarnings({ "rawtypes", "unchecked", "hiding" })
public class ProjectJob {

  public final Object obj = new Object();
  // create and load default properties
  private java.util.Properties defaultProps = new java.util.Properties();

  // create application properties with default
  private class ContextProperties extends java.util.Properties {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;

    public ContextProperties(java.util.Properties properties) {
      super(properties);
    }

    public ContextProperties() {
      super();
    }

    @SuppressWarnings("unused")
    public void synchronizeContext() {

      if (executeInsert != null) {

        this.setProperty("executeInsert", executeInsert.toString());

      }

      if (filename != null) {

        this.setProperty("filename", filename.toString());

      }

      if (numLinesOk != null) {

        this.setProperty("numLinesOk", numLinesOk.toString());

      }

      if (numLinesRejected != null) {

        this.setProperty("numLinesRejected", numLinesRejected.toString());

      }

      if (validationFailCause != null) {

        this.setProperty("validationFailCause", validationFailCause.toString());

      }

    }

    public Boolean executeInsert;
    public String filename;
    public Integer numLinesOk;
    public Integer numLinesRejected;
    public String validationFailCause;
  }

  private ContextProperties context = new ContextProperties();
  public Integer errorCode = null;
  private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
  private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
  public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

  private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
  private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
      new java.io.BufferedOutputStream(baos));

  public String getExceptionStackTrace() {
    errorMessagePS.flush();
    return baos.toString();
  }

  @SuppressWarnings("serial")
  private class TalendException extends Exception {
    private java.util.Map<String, Object> globalMap = null;
    private Exception e = null;
    private String currentComponent = null;

    private TalendException(Exception e, String errorComponent,
        final java.util.Map<String, Object> globalMap) {
      this.currentComponent = errorComponent;
      this.globalMap = globalMap;
      this.e = e;
    }

    @Override
    public void printStackTrace() {
      if (!(e instanceof TalendException || e instanceof TDieException)) {
        globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
        System.err.println("Exception in component " + currentComponent);
      }
      if (!(e instanceof TDieException)) {
        if (e instanceof TalendException) {
          e.printStackTrace();
        } else {
          e.printStackTrace();
          e.printStackTrace(errorMessagePS);
        }
      }
      if (!(e instanceof TalendException)) {
        try {
          for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
            if (m.getName().compareTo(currentComponent + "_error") == 0) {
              m.invoke(ProjectJob.this, new Object[] { e, globalMap });
              break;
            }
          }

          if (!(e instanceof TDieException)) {
          }
        } catch (java.lang.SecurityException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalArgumentException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalAccessException e) {
          this.e.printStackTrace();
        } catch (java.lang.reflect.InvocationTargetException e) {
          this.e.printStackTrace();
        }
      }
    }
  }

  public void tFileInputDelimited_1_error(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
    end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_11_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_11", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_11_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_11", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_1_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_10_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_10", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_18_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_18", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_9_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_9", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_16_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_16", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFileInputDelimited_1_onSubJobError(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
  }

  static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Searchkey;
    String Name;
    String Description;
    String Summary;
    String User;
    String BusinessPartner;
    String BPLocation;
    String POReference;
    String PaymentTerm;
    String Commitment;
    String CommitedAmt;
    String DateContract;
    String DateFinish;
    String Processed;
    String SalesRepresentative;
    String ProjectType;
    String CommitedQty;
    String CommitCeiling;
    String Warehouse;
    String ProjectStatus;
    String PriceList;
    String ExpExpenses;
    String ExpMargin;
    String ExpReinvoicing;
    String Responsible;
    String ServCost;
    String ServMargin;
    String ServRevenue;
    String StartDate;
    String ServSerCost;
    String ServOutCost;
    String PaymentMethod;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Searchkey == null) ? 0 : this.Searchkey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row3Struct other = (row3Struct) obj;

      if (this.Searchkey == null) {
        if (other.Searchkey != null)
          return false;
      } else if (!this.Searchkey.equals(other.Searchkey))
        return false;

      return true;
    }

    public void copyDataTo(row3Struct other) {

      other.Organization = this.Organization;
      other.Searchkey = this.Searchkey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.Summary = this.Summary;
      other.User = this.User;
      other.BusinessPartner = this.BusinessPartner;
      other.BPLocation = this.BPLocation;
      other.POReference = this.POReference;
      other.PaymentTerm = this.PaymentTerm;
      other.Commitment = this.Commitment;
      other.CommitedAmt = this.CommitedAmt;
      other.DateContract = this.DateContract;
      other.DateFinish = this.DateFinish;
      other.Processed = this.Processed;
      other.SalesRepresentative = this.SalesRepresentative;
      other.ProjectType = this.ProjectType;
      other.CommitedQty = this.CommitedQty;
      other.CommitCeiling = this.CommitCeiling;
      other.Warehouse = this.Warehouse;
      other.ProjectStatus = this.ProjectStatus;
      other.PriceList = this.PriceList;
      other.ExpExpenses = this.ExpExpenses;
      other.ExpMargin = this.ExpMargin;
      other.ExpReinvoicing = this.ExpReinvoicing;
      other.Responsible = this.Responsible;
      other.ServCost = this.ServCost;
      other.ServMargin = this.ServMargin;
      other.ServRevenue = this.ServRevenue;
      other.StartDate = this.StartDate;
      other.ServSerCost = this.ServSerCost;
      other.ServOutCost = this.ServOutCost;
      other.PaymentMethod = this.PaymentMethod;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row3Struct other) {

      other.Searchkey = this.Searchkey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Searchkey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Searchkey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Summary = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Summary = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.User = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.User = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BPLocation = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BPLocation = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POReference = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POReference = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentTerm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentTerm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Commitment = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Commitment = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitedAmt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitedAmt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DateContract = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DateContract = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DateFinish = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DateFinish = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Processed = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Processed = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SalesRepresentative = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SalesRepresentative = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProjectType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProjectType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitedQty = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitedQty = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitCeiling = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitCeiling = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProjectStatus = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProjectStatus = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpExpenses = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpExpenses = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpMargin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpMargin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpReinvoicing = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpReinvoicing = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Responsible = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Responsible = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServMargin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServMargin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServRevenue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServRevenue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StartDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StartDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServSerCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServSerCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServOutCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServOutCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Searchkey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Searchkey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Summary == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Summary.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.User == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.User.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BPLocation == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BPLocation.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POReference == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POReference.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentTerm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentTerm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Commitment == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Commitment.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitedAmt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitedAmt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DateContract == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DateContract.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DateFinish == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DateFinish.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Processed == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Processed.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SalesRepresentative == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SalesRepresentative.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProjectType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProjectType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitedQty == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitedQty.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitCeiling == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitCeiling.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProjectStatus == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProjectStatus.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpExpenses == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpExpenses.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpMargin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpMargin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpReinvoicing == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpReinvoicing.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Responsible == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Responsible.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServMargin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServMargin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServRevenue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServRevenue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StartDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StartDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServSerCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServSerCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServOutCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServOutCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Searchkey");
      sb.append("=");
      sb.append(String.valueOf(this.Searchkey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("Summary");
      sb.append("=");
      sb.append(String.valueOf(this.Summary));

      sb.append(", ");

      sb.append("User");
      sb.append("=");
      sb.append(String.valueOf(this.User));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("BPLocation");
      sb.append("=");
      sb.append(String.valueOf(this.BPLocation));

      sb.append(", ");

      sb.append("POReference");
      sb.append("=");
      sb.append(String.valueOf(this.POReference));

      sb.append(", ");

      sb.append("PaymentTerm");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentTerm));

      sb.append(", ");

      sb.append("Commitment");
      sb.append("=");
      sb.append(String.valueOf(this.Commitment));

      sb.append(", ");

      sb.append("CommitedAmt");
      sb.append("=");
      sb.append(String.valueOf(this.CommitedAmt));

      sb.append(", ");

      sb.append("DateContract");
      sb.append("=");
      sb.append(String.valueOf(this.DateContract));

      sb.append(", ");

      sb.append("DateFinish");
      sb.append("=");
      sb.append(String.valueOf(this.DateFinish));

      sb.append(", ");

      sb.append("Processed");
      sb.append("=");
      sb.append(String.valueOf(this.Processed));

      sb.append(", ");

      sb.append("SalesRepresentative");
      sb.append("=");
      sb.append(String.valueOf(this.SalesRepresentative));

      sb.append(", ");

      sb.append("ProjectType");
      sb.append("=");
      sb.append(String.valueOf(this.ProjectType));

      sb.append(", ");

      sb.append("CommitedQty");
      sb.append("=");
      sb.append(String.valueOf(this.CommitedQty));

      sb.append(", ");

      sb.append("CommitCeiling");
      sb.append("=");
      sb.append(String.valueOf(this.CommitCeiling));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("ProjectStatus");
      sb.append("=");
      sb.append(String.valueOf(this.ProjectStatus));

      sb.append(", ");

      sb.append("PriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PriceList));

      sb.append(", ");

      sb.append("ExpExpenses");
      sb.append("=");
      sb.append(String.valueOf(this.ExpExpenses));

      sb.append(", ");

      sb.append("ExpMargin");
      sb.append("=");
      sb.append(String.valueOf(this.ExpMargin));

      sb.append(", ");

      sb.append("ExpReinvoicing");
      sb.append("=");
      sb.append(String.valueOf(this.ExpReinvoicing));

      sb.append(", ");

      sb.append("Responsible");
      sb.append("=");
      sb.append(String.valueOf(this.Responsible));

      sb.append(", ");

      sb.append("ServCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServCost));

      sb.append(", ");

      sb.append("ServMargin");
      sb.append("=");
      sb.append(String.valueOf(this.ServMargin));

      sb.append(", ");

      sb.append("ServRevenue");
      sb.append("=");
      sb.append(String.valueOf(this.ServRevenue));

      sb.append(", ");

      sb.append("StartDate");
      sb.append("=");
      sb.append(String.valueOf(this.StartDate));

      sb.append(", ");

      sb.append("ServSerCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServSerCost));

      sb.append(", ");

      sb.append("ServOutCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServOutCost));

      sb.append(", ");

      sb.append("PaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentMethod));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Searchkey, other.Searchkey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Searchkey;
    String Name;
    String Description;
    String Summary;
    String User;
    String BusinessPartner;
    String BPLocation;
    String POReference;
    String PaymentTerm;
    String Commitment;
    String CommitedAmt;
    String DateContract;
    String DateFinish;
    String Processed;
    String SalesRepresentative;
    String ProjectType;
    String CommitedQty;
    String CommitCeiling;
    String Warehouse;
    String ProjectStatus;
    String PriceList;
    String ExpExpenses;
    String ExpMargin;
    String ExpReinvoicing;
    String Responsible;
    String ServCost;
    String ServMargin;
    String ServRevenue;
    String StartDate;
    String ServSerCost;
    String ServOutCost;
    String PaymentMethod;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Searchkey == null) ? 0 : this.Searchkey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row19Struct other = (row19Struct) obj;

      if (this.Searchkey == null) {
        if (other.Searchkey != null)
          return false;
      } else if (!this.Searchkey.equals(other.Searchkey))
        return false;

      return true;
    }

    public void copyDataTo(row19Struct other) {

      other.Organization = this.Organization;
      other.Searchkey = this.Searchkey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.Summary = this.Summary;
      other.User = this.User;
      other.BusinessPartner = this.BusinessPartner;
      other.BPLocation = this.BPLocation;
      other.POReference = this.POReference;
      other.PaymentTerm = this.PaymentTerm;
      other.Commitment = this.Commitment;
      other.CommitedAmt = this.CommitedAmt;
      other.DateContract = this.DateContract;
      other.DateFinish = this.DateFinish;
      other.Processed = this.Processed;
      other.SalesRepresentative = this.SalesRepresentative;
      other.ProjectType = this.ProjectType;
      other.CommitedQty = this.CommitedQty;
      other.CommitCeiling = this.CommitCeiling;
      other.Warehouse = this.Warehouse;
      other.ProjectStatus = this.ProjectStatus;
      other.PriceList = this.PriceList;
      other.ExpExpenses = this.ExpExpenses;
      other.ExpMargin = this.ExpMargin;
      other.ExpReinvoicing = this.ExpReinvoicing;
      other.Responsible = this.Responsible;
      other.ServCost = this.ServCost;
      other.ServMargin = this.ServMargin;
      other.ServRevenue = this.ServRevenue;
      other.StartDate = this.StartDate;
      other.ServSerCost = this.ServSerCost;
      other.ServOutCost = this.ServOutCost;
      other.PaymentMethod = this.PaymentMethod;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row19Struct other) {

      other.Searchkey = this.Searchkey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Searchkey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Searchkey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Summary = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Summary = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.User = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.User = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BPLocation = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BPLocation = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POReference = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POReference = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentTerm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentTerm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Commitment = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Commitment = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitedAmt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitedAmt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DateContract = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DateContract = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DateFinish = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DateFinish = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Processed = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Processed = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SalesRepresentative = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SalesRepresentative = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProjectType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProjectType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitedQty = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitedQty = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitCeiling = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitCeiling = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProjectStatus = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProjectStatus = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpExpenses = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpExpenses = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpMargin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpMargin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpReinvoicing = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpReinvoicing = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Responsible = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Responsible = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServMargin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServMargin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServRevenue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServRevenue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StartDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StartDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServSerCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServSerCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServOutCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServOutCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Searchkey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Searchkey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Summary == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Summary.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.User == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.User.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BPLocation == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BPLocation.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POReference == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POReference.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentTerm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentTerm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Commitment == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Commitment.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitedAmt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitedAmt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DateContract == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DateContract.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DateFinish == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DateFinish.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Processed == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Processed.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SalesRepresentative == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SalesRepresentative.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProjectType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProjectType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitedQty == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitedQty.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitCeiling == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitCeiling.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProjectStatus == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProjectStatus.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpExpenses == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpExpenses.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpMargin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpMargin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpReinvoicing == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpReinvoicing.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Responsible == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Responsible.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServMargin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServMargin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServRevenue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServRevenue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StartDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StartDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServSerCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServSerCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServOutCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServOutCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Searchkey");
      sb.append("=");
      sb.append(String.valueOf(this.Searchkey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("Summary");
      sb.append("=");
      sb.append(String.valueOf(this.Summary));

      sb.append(", ");

      sb.append("User");
      sb.append("=");
      sb.append(String.valueOf(this.User));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("BPLocation");
      sb.append("=");
      sb.append(String.valueOf(this.BPLocation));

      sb.append(", ");

      sb.append("POReference");
      sb.append("=");
      sb.append(String.valueOf(this.POReference));

      sb.append(", ");

      sb.append("PaymentTerm");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentTerm));

      sb.append(", ");

      sb.append("Commitment");
      sb.append("=");
      sb.append(String.valueOf(this.Commitment));

      sb.append(", ");

      sb.append("CommitedAmt");
      sb.append("=");
      sb.append(String.valueOf(this.CommitedAmt));

      sb.append(", ");

      sb.append("DateContract");
      sb.append("=");
      sb.append(String.valueOf(this.DateContract));

      sb.append(", ");

      sb.append("DateFinish");
      sb.append("=");
      sb.append(String.valueOf(this.DateFinish));

      sb.append(", ");

      sb.append("Processed");
      sb.append("=");
      sb.append(String.valueOf(this.Processed));

      sb.append(", ");

      sb.append("SalesRepresentative");
      sb.append("=");
      sb.append(String.valueOf(this.SalesRepresentative));

      sb.append(", ");

      sb.append("ProjectType");
      sb.append("=");
      sb.append(String.valueOf(this.ProjectType));

      sb.append(", ");

      sb.append("CommitedQty");
      sb.append("=");
      sb.append(String.valueOf(this.CommitedQty));

      sb.append(", ");

      sb.append("CommitCeiling");
      sb.append("=");
      sb.append(String.valueOf(this.CommitCeiling));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("ProjectStatus");
      sb.append("=");
      sb.append(String.valueOf(this.ProjectStatus));

      sb.append(", ");

      sb.append("PriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PriceList));

      sb.append(", ");

      sb.append("ExpExpenses");
      sb.append("=");
      sb.append(String.valueOf(this.ExpExpenses));

      sb.append(", ");

      sb.append("ExpMargin");
      sb.append("=");
      sb.append(String.valueOf(this.ExpMargin));

      sb.append(", ");

      sb.append("ExpReinvoicing");
      sb.append("=");
      sb.append(String.valueOf(this.ExpReinvoicing));

      sb.append(", ");

      sb.append("Responsible");
      sb.append("=");
      sb.append(String.valueOf(this.Responsible));

      sb.append(", ");

      sb.append("ServCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServCost));

      sb.append(", ");

      sb.append("ServMargin");
      sb.append("=");
      sb.append(String.valueOf(this.ServMargin));

      sb.append(", ");

      sb.append("ServRevenue");
      sb.append("=");
      sb.append(String.valueOf(this.ServRevenue));

      sb.append(", ");

      sb.append("StartDate");
      sb.append("=");
      sb.append(String.valueOf(this.StartDate));

      sb.append(", ");

      sb.append("ServSerCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServSerCost));

      sb.append(", ");

      sb.append("ServOutCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServOutCost));

      sb.append(", ");

      sb.append("PaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentMethod));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Searchkey, other.Searchkey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Searchkey;
    String Name;
    String Description;
    String Summary;
    String User;
    String BusinessPartner;
    String BPLocation;
    String POReference;
    String PaymentTerm;
    String Commitment;
    String CommitedAmt;
    String DateContract;
    String DateFinish;
    String Processed;
    String SalesRepresentative;
    String ProjectType;
    String CommitedQty;
    String CommitCeiling;
    String Warehouse;
    String ProjectStatus;
    String PriceList;
    String ExpExpenses;
    String ExpMargin;
    String ExpReinvoicing;
    String Responsible;
    String ServCost;
    String ServMargin;
    String ServRevenue;
    String StartDate;
    String ServSerCost;
    String ServOutCost;
    String PaymentMethod;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Searchkey == null) ? 0 : this.Searchkey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row2Struct other = (row2Struct) obj;

      if (this.Searchkey == null) {
        if (other.Searchkey != null)
          return false;
      } else if (!this.Searchkey.equals(other.Searchkey))
        return false;

      return true;
    }

    public void copyDataTo(row2Struct other) {

      other.Organization = this.Organization;
      other.Searchkey = this.Searchkey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.Summary = this.Summary;
      other.User = this.User;
      other.BusinessPartner = this.BusinessPartner;
      other.BPLocation = this.BPLocation;
      other.POReference = this.POReference;
      other.PaymentTerm = this.PaymentTerm;
      other.Commitment = this.Commitment;
      other.CommitedAmt = this.CommitedAmt;
      other.DateContract = this.DateContract;
      other.DateFinish = this.DateFinish;
      other.Processed = this.Processed;
      other.SalesRepresentative = this.SalesRepresentative;
      other.ProjectType = this.ProjectType;
      other.CommitedQty = this.CommitedQty;
      other.CommitCeiling = this.CommitCeiling;
      other.Warehouse = this.Warehouse;
      other.ProjectStatus = this.ProjectStatus;
      other.PriceList = this.PriceList;
      other.ExpExpenses = this.ExpExpenses;
      other.ExpMargin = this.ExpMargin;
      other.ExpReinvoicing = this.ExpReinvoicing;
      other.Responsible = this.Responsible;
      other.ServCost = this.ServCost;
      other.ServMargin = this.ServMargin;
      other.ServRevenue = this.ServRevenue;
      other.StartDate = this.StartDate;
      other.ServSerCost = this.ServSerCost;
      other.ServOutCost = this.ServOutCost;
      other.PaymentMethod = this.PaymentMethod;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row2Struct other) {

      other.Searchkey = this.Searchkey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Searchkey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Searchkey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Summary = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Summary = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.User = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.User = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BPLocation = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BPLocation = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POReference = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POReference = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentTerm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentTerm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Commitment = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Commitment = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitedAmt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitedAmt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DateContract = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DateContract = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DateFinish = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DateFinish = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Processed = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Processed = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SalesRepresentative = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SalesRepresentative = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProjectType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProjectType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitedQty = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitedQty = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitCeiling = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitCeiling = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProjectStatus = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProjectStatus = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpExpenses = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpExpenses = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpMargin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpMargin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpReinvoicing = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpReinvoicing = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Responsible = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Responsible = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServMargin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServMargin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServRevenue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServRevenue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StartDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StartDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServSerCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServSerCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServOutCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServOutCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Searchkey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Searchkey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Summary == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Summary.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.User == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.User.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BPLocation == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BPLocation.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POReference == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POReference.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentTerm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentTerm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Commitment == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Commitment.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitedAmt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitedAmt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DateContract == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DateContract.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DateFinish == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DateFinish.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Processed == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Processed.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SalesRepresentative == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SalesRepresentative.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProjectType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProjectType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitedQty == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitedQty.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitCeiling == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitCeiling.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProjectStatus == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProjectStatus.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpExpenses == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpExpenses.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpMargin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpMargin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpReinvoicing == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpReinvoicing.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Responsible == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Responsible.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServMargin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServMargin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServRevenue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServRevenue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StartDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StartDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServSerCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServSerCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServOutCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServOutCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Searchkey");
      sb.append("=");
      sb.append(String.valueOf(this.Searchkey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("Summary");
      sb.append("=");
      sb.append(String.valueOf(this.Summary));

      sb.append(", ");

      sb.append("User");
      sb.append("=");
      sb.append(String.valueOf(this.User));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("BPLocation");
      sb.append("=");
      sb.append(String.valueOf(this.BPLocation));

      sb.append(", ");

      sb.append("POReference");
      sb.append("=");
      sb.append(String.valueOf(this.POReference));

      sb.append(", ");

      sb.append("PaymentTerm");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentTerm));

      sb.append(", ");

      sb.append("Commitment");
      sb.append("=");
      sb.append(String.valueOf(this.Commitment));

      sb.append(", ");

      sb.append("CommitedAmt");
      sb.append("=");
      sb.append(String.valueOf(this.CommitedAmt));

      sb.append(", ");

      sb.append("DateContract");
      sb.append("=");
      sb.append(String.valueOf(this.DateContract));

      sb.append(", ");

      sb.append("DateFinish");
      sb.append("=");
      sb.append(String.valueOf(this.DateFinish));

      sb.append(", ");

      sb.append("Processed");
      sb.append("=");
      sb.append(String.valueOf(this.Processed));

      sb.append(", ");

      sb.append("SalesRepresentative");
      sb.append("=");
      sb.append(String.valueOf(this.SalesRepresentative));

      sb.append(", ");

      sb.append("ProjectType");
      sb.append("=");
      sb.append(String.valueOf(this.ProjectType));

      sb.append(", ");

      sb.append("CommitedQty");
      sb.append("=");
      sb.append(String.valueOf(this.CommitedQty));

      sb.append(", ");

      sb.append("CommitCeiling");
      sb.append("=");
      sb.append(String.valueOf(this.CommitCeiling));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("ProjectStatus");
      sb.append("=");
      sb.append(String.valueOf(this.ProjectStatus));

      sb.append(", ");

      sb.append("PriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PriceList));

      sb.append(", ");

      sb.append("ExpExpenses");
      sb.append("=");
      sb.append(String.valueOf(this.ExpExpenses));

      sb.append(", ");

      sb.append("ExpMargin");
      sb.append("=");
      sb.append(String.valueOf(this.ExpMargin));

      sb.append(", ");

      sb.append("ExpReinvoicing");
      sb.append("=");
      sb.append(String.valueOf(this.ExpReinvoicing));

      sb.append(", ");

      sb.append("Responsible");
      sb.append("=");
      sb.append(String.valueOf(this.Responsible));

      sb.append(", ");

      sb.append("ServCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServCost));

      sb.append(", ");

      sb.append("ServMargin");
      sb.append("=");
      sb.append(String.valueOf(this.ServMargin));

      sb.append(", ");

      sb.append("ServRevenue");
      sb.append("=");
      sb.append(String.valueOf(this.ServRevenue));

      sb.append(", ");

      sb.append("StartDate");
      sb.append("=");
      sb.append(String.valueOf(this.StartDate));

      sb.append(", ");

      sb.append("ServSerCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServSerCost));

      sb.append(", ");

      sb.append("ServOutCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServOutCost));

      sb.append(", ");

      sb.append("PaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentMethod));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Searchkey, other.Searchkey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Searchkey;
    String Name;
    String Description;
    String Summary;
    String User;
    String BusinessPartner;
    String BPLocation;
    String POReference;
    String PaymentTerm;
    String Commitment;
    String CommitedAmt;
    String DateContract;
    String DateFinish;
    String Processed;
    String SalesRepresentative;
    String ProjectType;
    String CommitedQty;
    String CommitCeiling;
    String Warehouse;
    String ProjectStatus;
    String PriceList;
    String ExpExpenses;
    String ExpMargin;
    String ExpReinvoicing;
    String Responsible;
    String ServCost;
    String ServMargin;
    String ServRevenue;
    String StartDate;
    String ServSerCost;
    String ServOutCost;
    String PaymentMethod;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Searchkey == null) ? 0 : this.Searchkey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row1Struct other = (row1Struct) obj;

      if (this.Searchkey == null) {
        if (other.Searchkey != null)
          return false;
      } else if (!this.Searchkey.equals(other.Searchkey))
        return false;

      return true;
    }

    public void copyDataTo(row1Struct other) {

      other.Organization = this.Organization;
      other.Searchkey = this.Searchkey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.Summary = this.Summary;
      other.User = this.User;
      other.BusinessPartner = this.BusinessPartner;
      other.BPLocation = this.BPLocation;
      other.POReference = this.POReference;
      other.PaymentTerm = this.PaymentTerm;
      other.Commitment = this.Commitment;
      other.CommitedAmt = this.CommitedAmt;
      other.DateContract = this.DateContract;
      other.DateFinish = this.DateFinish;
      other.Processed = this.Processed;
      other.SalesRepresentative = this.SalesRepresentative;
      other.ProjectType = this.ProjectType;
      other.CommitedQty = this.CommitedQty;
      other.CommitCeiling = this.CommitCeiling;
      other.Warehouse = this.Warehouse;
      other.ProjectStatus = this.ProjectStatus;
      other.PriceList = this.PriceList;
      other.ExpExpenses = this.ExpExpenses;
      other.ExpMargin = this.ExpMargin;
      other.ExpReinvoicing = this.ExpReinvoicing;
      other.Responsible = this.Responsible;
      other.ServCost = this.ServCost;
      other.ServMargin = this.ServMargin;
      other.ServRevenue = this.ServRevenue;
      other.StartDate = this.StartDate;
      other.ServSerCost = this.ServSerCost;
      other.ServOutCost = this.ServOutCost;
      other.PaymentMethod = this.PaymentMethod;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row1Struct other) {

      other.Searchkey = this.Searchkey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Searchkey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Searchkey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Summary = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Summary = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.User = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.User = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BPLocation = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BPLocation = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POReference = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POReference = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentTerm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentTerm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Commitment = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Commitment = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitedAmt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitedAmt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DateContract = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DateContract = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DateFinish = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DateFinish = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Processed = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Processed = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SalesRepresentative = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SalesRepresentative = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProjectType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProjectType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitedQty = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitedQty = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitCeiling = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitCeiling = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProjectStatus = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProjectStatus = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpExpenses = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpExpenses = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpMargin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpMargin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpReinvoicing = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpReinvoicing = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Responsible = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Responsible = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServMargin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServMargin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServRevenue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServRevenue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StartDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StartDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServSerCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServSerCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServOutCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServOutCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Searchkey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Searchkey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Summary == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Summary.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.User == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.User.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BPLocation == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BPLocation.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POReference == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POReference.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentTerm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentTerm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Commitment == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Commitment.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitedAmt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitedAmt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DateContract == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DateContract.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DateFinish == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DateFinish.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Processed == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Processed.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SalesRepresentative == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SalesRepresentative.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProjectType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProjectType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitedQty == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitedQty.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitCeiling == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitCeiling.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProjectStatus == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProjectStatus.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpExpenses == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpExpenses.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpMargin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpMargin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpReinvoicing == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpReinvoicing.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Responsible == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Responsible.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServMargin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServMargin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServRevenue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServRevenue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StartDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StartDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServSerCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServSerCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServOutCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServOutCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Searchkey");
      sb.append("=");
      sb.append(String.valueOf(this.Searchkey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("Summary");
      sb.append("=");
      sb.append(String.valueOf(this.Summary));

      sb.append(", ");

      sb.append("User");
      sb.append("=");
      sb.append(String.valueOf(this.User));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("BPLocation");
      sb.append("=");
      sb.append(String.valueOf(this.BPLocation));

      sb.append(", ");

      sb.append("POReference");
      sb.append("=");
      sb.append(String.valueOf(this.POReference));

      sb.append(", ");

      sb.append("PaymentTerm");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentTerm));

      sb.append(", ");

      sb.append("Commitment");
      sb.append("=");
      sb.append(String.valueOf(this.Commitment));

      sb.append(", ");

      sb.append("CommitedAmt");
      sb.append("=");
      sb.append(String.valueOf(this.CommitedAmt));

      sb.append(", ");

      sb.append("DateContract");
      sb.append("=");
      sb.append(String.valueOf(this.DateContract));

      sb.append(", ");

      sb.append("DateFinish");
      sb.append("=");
      sb.append(String.valueOf(this.DateFinish));

      sb.append(", ");

      sb.append("Processed");
      sb.append("=");
      sb.append(String.valueOf(this.Processed));

      sb.append(", ");

      sb.append("SalesRepresentative");
      sb.append("=");
      sb.append(String.valueOf(this.SalesRepresentative));

      sb.append(", ");

      sb.append("ProjectType");
      sb.append("=");
      sb.append(String.valueOf(this.ProjectType));

      sb.append(", ");

      sb.append("CommitedQty");
      sb.append("=");
      sb.append(String.valueOf(this.CommitedQty));

      sb.append(", ");

      sb.append("CommitCeiling");
      sb.append("=");
      sb.append(String.valueOf(this.CommitCeiling));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("ProjectStatus");
      sb.append("=");
      sb.append(String.valueOf(this.ProjectStatus));

      sb.append(", ");

      sb.append("PriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PriceList));

      sb.append(", ");

      sb.append("ExpExpenses");
      sb.append("=");
      sb.append(String.valueOf(this.ExpExpenses));

      sb.append(", ");

      sb.append("ExpMargin");
      sb.append("=");
      sb.append(String.valueOf(this.ExpMargin));

      sb.append(", ");

      sb.append("ExpReinvoicing");
      sb.append("=");
      sb.append(String.valueOf(this.ExpReinvoicing));

      sb.append(", ");

      sb.append("Responsible");
      sb.append("=");
      sb.append(String.valueOf(this.Responsible));

      sb.append(", ");

      sb.append("ServCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServCost));

      sb.append(", ");

      sb.append("ServMargin");
      sb.append("=");
      sb.append(String.valueOf(this.ServMargin));

      sb.append(", ");

      sb.append("ServRevenue");
      sb.append("=");
      sb.append(String.valueOf(this.ServRevenue));

      sb.append(", ");

      sb.append("StartDate");
      sb.append("=");
      sb.append(String.valueOf(this.StartDate));

      sb.append(", ");

      sb.append("ServSerCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServSerCost));

      sb.append(", ");

      sb.append("ServOutCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServOutCost));

      sb.append(", ");

      sb.append("PaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentMethod));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Searchkey, other.Searchkey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Searchkey;
    String Name;
    String Description;
    String Summary;
    String User;
    String BusinessPartner;
    String BPLocation;
    String POReference;
    String PaymentTerm;
    String Commitment;
    String CommitedAmt;
    String DateContract;
    String DateFinish;
    String Processed;
    String SalesRepresentative;
    String ProjectType;
    String CommitedQty;
    String CommitCeiling;
    String Warehouse;
    String ProjectStatus;
    String PriceList;
    String ExpExpenses;
    String ExpMargin;
    String ExpReinvoicing;
    String Responsible;
    String ServCost;
    String ServMargin;
    String ServRevenue;
    String StartDate;
    String ServSerCost;
    String ServOutCost;
    String PaymentMethod;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Searchkey == null) ? 0 : this.Searchkey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row23Struct other = (row23Struct) obj;

      if (this.Searchkey == null) {
        if (other.Searchkey != null)
          return false;
      } else if (!this.Searchkey.equals(other.Searchkey))
        return false;

      return true;
    }

    public void copyDataTo(row23Struct other) {

      other.Organization = this.Organization;
      other.Searchkey = this.Searchkey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.Summary = this.Summary;
      other.User = this.User;
      other.BusinessPartner = this.BusinessPartner;
      other.BPLocation = this.BPLocation;
      other.POReference = this.POReference;
      other.PaymentTerm = this.PaymentTerm;
      other.Commitment = this.Commitment;
      other.CommitedAmt = this.CommitedAmt;
      other.DateContract = this.DateContract;
      other.DateFinish = this.DateFinish;
      other.Processed = this.Processed;
      other.SalesRepresentative = this.SalesRepresentative;
      other.ProjectType = this.ProjectType;
      other.CommitedQty = this.CommitedQty;
      other.CommitCeiling = this.CommitCeiling;
      other.Warehouse = this.Warehouse;
      other.ProjectStatus = this.ProjectStatus;
      other.PriceList = this.PriceList;
      other.ExpExpenses = this.ExpExpenses;
      other.ExpMargin = this.ExpMargin;
      other.ExpReinvoicing = this.ExpReinvoicing;
      other.Responsible = this.Responsible;
      other.ServCost = this.ServCost;
      other.ServMargin = this.ServMargin;
      other.ServRevenue = this.ServRevenue;
      other.StartDate = this.StartDate;
      other.ServSerCost = this.ServSerCost;
      other.ServOutCost = this.ServOutCost;
      other.PaymentMethod = this.PaymentMethod;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row23Struct other) {

      other.Searchkey = this.Searchkey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Searchkey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Searchkey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Summary = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Summary = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.User = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.User = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BPLocation = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BPLocation = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POReference = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POReference = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentTerm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentTerm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Commitment = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Commitment = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitedAmt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitedAmt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DateContract = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DateContract = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DateFinish = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DateFinish = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Processed = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Processed = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SalesRepresentative = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SalesRepresentative = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProjectType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProjectType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitedQty = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitedQty = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitCeiling = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitCeiling = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProjectStatus = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProjectStatus = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpExpenses = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpExpenses = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpMargin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpMargin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpReinvoicing = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpReinvoicing = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Responsible = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Responsible = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServMargin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServMargin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServRevenue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServRevenue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StartDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StartDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServSerCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServSerCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServOutCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServOutCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Searchkey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Searchkey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Summary == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Summary.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.User == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.User.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BPLocation == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BPLocation.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POReference == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POReference.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentTerm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentTerm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Commitment == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Commitment.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitedAmt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitedAmt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DateContract == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DateContract.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DateFinish == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DateFinish.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Processed == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Processed.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SalesRepresentative == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SalesRepresentative.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProjectType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProjectType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitedQty == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitedQty.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitCeiling == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitCeiling.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProjectStatus == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProjectStatus.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpExpenses == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpExpenses.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpMargin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpMargin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpReinvoicing == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpReinvoicing.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Responsible == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Responsible.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServMargin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServMargin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServRevenue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServRevenue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StartDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StartDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServSerCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServSerCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServOutCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServOutCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Searchkey");
      sb.append("=");
      sb.append(String.valueOf(this.Searchkey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("Summary");
      sb.append("=");
      sb.append(String.valueOf(this.Summary));

      sb.append(", ");

      sb.append("User");
      sb.append("=");
      sb.append(String.valueOf(this.User));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("BPLocation");
      sb.append("=");
      sb.append(String.valueOf(this.BPLocation));

      sb.append(", ");

      sb.append("POReference");
      sb.append("=");
      sb.append(String.valueOf(this.POReference));

      sb.append(", ");

      sb.append("PaymentTerm");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentTerm));

      sb.append(", ");

      sb.append("Commitment");
      sb.append("=");
      sb.append(String.valueOf(this.Commitment));

      sb.append(", ");

      sb.append("CommitedAmt");
      sb.append("=");
      sb.append(String.valueOf(this.CommitedAmt));

      sb.append(", ");

      sb.append("DateContract");
      sb.append("=");
      sb.append(String.valueOf(this.DateContract));

      sb.append(", ");

      sb.append("DateFinish");
      sb.append("=");
      sb.append(String.valueOf(this.DateFinish));

      sb.append(", ");

      sb.append("Processed");
      sb.append("=");
      sb.append(String.valueOf(this.Processed));

      sb.append(", ");

      sb.append("SalesRepresentative");
      sb.append("=");
      sb.append(String.valueOf(this.SalesRepresentative));

      sb.append(", ");

      sb.append("ProjectType");
      sb.append("=");
      sb.append(String.valueOf(this.ProjectType));

      sb.append(", ");

      sb.append("CommitedQty");
      sb.append("=");
      sb.append(String.valueOf(this.CommitedQty));

      sb.append(", ");

      sb.append("CommitCeiling");
      sb.append("=");
      sb.append(String.valueOf(this.CommitCeiling));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("ProjectStatus");
      sb.append("=");
      sb.append(String.valueOf(this.ProjectStatus));

      sb.append(", ");

      sb.append("PriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PriceList));

      sb.append(", ");

      sb.append("ExpExpenses");
      sb.append("=");
      sb.append(String.valueOf(this.ExpExpenses));

      sb.append(", ");

      sb.append("ExpMargin");
      sb.append("=");
      sb.append(String.valueOf(this.ExpMargin));

      sb.append(", ");

      sb.append("ExpReinvoicing");
      sb.append("=");
      sb.append(String.valueOf(this.ExpReinvoicing));

      sb.append(", ");

      sb.append("Responsible");
      sb.append("=");
      sb.append(String.valueOf(this.Responsible));

      sb.append(", ");

      sb.append("ServCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServCost));

      sb.append(", ");

      sb.append("ServMargin");
      sb.append("=");
      sb.append(String.valueOf(this.ServMargin));

      sb.append(", ");

      sb.append("ServRevenue");
      sb.append("=");
      sb.append(String.valueOf(this.ServRevenue));

      sb.append(", ");

      sb.append("StartDate");
      sb.append("=");
      sb.append(String.valueOf(this.StartDate));

      sb.append(", ");

      sb.append("ServSerCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServSerCost));

      sb.append(", ");

      sb.append("ServOutCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServOutCost));

      sb.append(", ");

      sb.append("PaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentMethod));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Searchkey, other.Searchkey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Searchkey;
    String Name;
    String Description;
    String Summary;
    String User;
    String BusinessPartner;
    String BPLocation;
    String POReference;
    String PaymentTerm;
    String Commitment;
    String CommitedAmt;
    String DateContract;
    String DateFinish;
    String Processed;
    String SalesRepresentative;
    String ProjectType;
    String CommitedQty;
    String CommitCeiling;
    String Warehouse;
    String ProjectStatus;
    String PriceList;
    String ExpExpenses;
    String ExpMargin;
    String ExpReinvoicing;
    String Responsible;
    String ServCost;
    String ServMargin;
    String ServRevenue;
    String StartDate;
    String ServSerCost;
    String ServOutCost;
    String PaymentMethod;
    String flag;
    String whyError;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Searchkey == null) ? 0 : this.Searchkey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row18Struct other = (row18Struct) obj;

      if (this.Searchkey == null) {
        if (other.Searchkey != null)
          return false;
      } else if (!this.Searchkey.equals(other.Searchkey))
        return false;

      return true;
    }

    public void copyDataTo(row18Struct other) {

      other.Organization = this.Organization;
      other.Searchkey = this.Searchkey;
      other.Name = this.Name;
      other.Description = this.Description;
      other.Summary = this.Summary;
      other.User = this.User;
      other.BusinessPartner = this.BusinessPartner;
      other.BPLocation = this.BPLocation;
      other.POReference = this.POReference;
      other.PaymentTerm = this.PaymentTerm;
      other.Commitment = this.Commitment;
      other.CommitedAmt = this.CommitedAmt;
      other.DateContract = this.DateContract;
      other.DateFinish = this.DateFinish;
      other.Processed = this.Processed;
      other.SalesRepresentative = this.SalesRepresentative;
      other.ProjectType = this.ProjectType;
      other.CommitedQty = this.CommitedQty;
      other.CommitCeiling = this.CommitCeiling;
      other.Warehouse = this.Warehouse;
      other.ProjectStatus = this.ProjectStatus;
      other.PriceList = this.PriceList;
      other.ExpExpenses = this.ExpExpenses;
      other.ExpMargin = this.ExpMargin;
      other.ExpReinvoicing = this.ExpReinvoicing;
      other.Responsible = this.Responsible;
      other.ServCost = this.ServCost;
      other.ServMargin = this.ServMargin;
      other.ServRevenue = this.ServRevenue;
      other.StartDate = this.StartDate;
      other.ServSerCost = this.ServSerCost;
      other.ServOutCost = this.ServOutCost;
      other.PaymentMethod = this.PaymentMethod;
      other.flag = this.flag;
      other.whyError = this.whyError;

    }

    public void copyKeysDataTo(row18Struct other) {

      other.Searchkey = this.Searchkey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Searchkey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Searchkey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Summary = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Summary = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.User = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.User = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BPLocation = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BPLocation = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POReference = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POReference = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentTerm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentTerm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Commitment = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Commitment = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitedAmt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitedAmt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DateContract = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DateContract = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DateFinish = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DateFinish = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Processed = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Processed = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SalesRepresentative = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SalesRepresentative = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProjectType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProjectType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitedQty = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitedQty = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitCeiling = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitCeiling = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProjectStatus = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProjectStatus = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpExpenses = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpExpenses = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpMargin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpMargin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpReinvoicing = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpReinvoicing = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Responsible = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Responsible = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServMargin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServMargin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServRevenue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServRevenue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StartDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StartDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServSerCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServSerCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServOutCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServOutCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Searchkey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Searchkey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Summary == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Summary.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.User == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.User.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BPLocation == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BPLocation.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POReference == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POReference.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentTerm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentTerm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Commitment == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Commitment.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitedAmt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitedAmt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DateContract == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DateContract.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DateFinish == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DateFinish.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Processed == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Processed.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SalesRepresentative == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SalesRepresentative.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProjectType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProjectType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitedQty == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitedQty.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitCeiling == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitCeiling.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProjectStatus == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProjectStatus.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpExpenses == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpExpenses.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpMargin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpMargin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpReinvoicing == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpReinvoicing.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Responsible == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Responsible.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServMargin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServMargin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServRevenue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServRevenue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StartDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StartDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServSerCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServSerCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServOutCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServOutCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Searchkey");
      sb.append("=");
      sb.append(String.valueOf(this.Searchkey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("Summary");
      sb.append("=");
      sb.append(String.valueOf(this.Summary));

      sb.append(", ");

      sb.append("User");
      sb.append("=");
      sb.append(String.valueOf(this.User));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("BPLocation");
      sb.append("=");
      sb.append(String.valueOf(this.BPLocation));

      sb.append(", ");

      sb.append("POReference");
      sb.append("=");
      sb.append(String.valueOf(this.POReference));

      sb.append(", ");

      sb.append("PaymentTerm");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentTerm));

      sb.append(", ");

      sb.append("Commitment");
      sb.append("=");
      sb.append(String.valueOf(this.Commitment));

      sb.append(", ");

      sb.append("CommitedAmt");
      sb.append("=");
      sb.append(String.valueOf(this.CommitedAmt));

      sb.append(", ");

      sb.append("DateContract");
      sb.append("=");
      sb.append(String.valueOf(this.DateContract));

      sb.append(", ");

      sb.append("DateFinish");
      sb.append("=");
      sb.append(String.valueOf(this.DateFinish));

      sb.append(", ");

      sb.append("Processed");
      sb.append("=");
      sb.append(String.valueOf(this.Processed));

      sb.append(", ");

      sb.append("SalesRepresentative");
      sb.append("=");
      sb.append(String.valueOf(this.SalesRepresentative));

      sb.append(", ");

      sb.append("ProjectType");
      sb.append("=");
      sb.append(String.valueOf(this.ProjectType));

      sb.append(", ");

      sb.append("CommitedQty");
      sb.append("=");
      sb.append(String.valueOf(this.CommitedQty));

      sb.append(", ");

      sb.append("CommitCeiling");
      sb.append("=");
      sb.append(String.valueOf(this.CommitCeiling));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("ProjectStatus");
      sb.append("=");
      sb.append(String.valueOf(this.ProjectStatus));

      sb.append(", ");

      sb.append("PriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PriceList));

      sb.append(", ");

      sb.append("ExpExpenses");
      sb.append("=");
      sb.append(String.valueOf(this.ExpExpenses));

      sb.append(", ");

      sb.append("ExpMargin");
      sb.append("=");
      sb.append(String.valueOf(this.ExpMargin));

      sb.append(", ");

      sb.append("ExpReinvoicing");
      sb.append("=");
      sb.append(String.valueOf(this.ExpReinvoicing));

      sb.append(", ");

      sb.append("Responsible");
      sb.append("=");
      sb.append(String.valueOf(this.Responsible));

      sb.append(", ");

      sb.append("ServCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServCost));

      sb.append(", ");

      sb.append("ServMargin");
      sb.append("=");
      sb.append(String.valueOf(this.ServMargin));

      sb.append(", ");

      sb.append("ServRevenue");
      sb.append("=");
      sb.append(String.valueOf(this.ServRevenue));

      sb.append(", ");

      sb.append("StartDate");
      sb.append("=");
      sb.append(String.valueOf(this.StartDate));

      sb.append(", ");

      sb.append("ServSerCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServSerCost));

      sb.append(", ");

      sb.append("ServOutCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServOutCost));

      sb.append(", ");

      sb.append("PaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentMethod));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Searchkey, other.Searchkey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];
    private static final int DEFAULT_HASHCODE = 1;
    private static final int PRIME = 31;
    private int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    String Organization;
    String Searchkey;
    String Name;
    String ProjectType;
    String ProjectStatus;
    String Processed;
    String StartDate;
    String DateFinish;
    String DateContract;
    String Responsible;
    String BusinessPartner;
    String BPLocation;
    String User;
    String PaymentMethod;
    String PaymentTerm;
    String Commitment;
    String CommitCeiling;
    String CommitedAmt;
    String CommitedQty;
    String ServRevenue;
    String ExpExpenses;
    String ServSerCost;
    String ServOutCost;
    String ServCost;
    String ExpReinvoicing;
    String ServMargin;
    String ExpMargin;
    String SalesRepresentative;
    String Warehouse;
    String PriceList;
    String POReference;
    String Summary;
    String Description;

    @Override
    public int hashCode() {
      if (this.hashCodeDirty) {
        final int prime = PRIME;
        int result = DEFAULT_HASHCODE;

        result = prime * result + ((this.Searchkey == null) ? 0 : this.Searchkey.hashCode());

        this.hashCode = result;
        this.hashCodeDirty = false;
      }
      return this.hashCode;
    }

    @Override
    public boolean equals(Object obj) {
      if (this == obj)
        return true;
      if (obj == null)
        return false;
      if (getClass() != obj.getClass())
        return false;
      final row16Struct other = (row16Struct) obj;

      if (this.Searchkey == null) {
        if (other.Searchkey != null)
          return false;
      } else if (!this.Searchkey.equals(other.Searchkey))
        return false;

      return true;
    }

    public void copyDataTo(row16Struct other) {

      other.Organization = this.Organization;
      other.Searchkey = this.Searchkey;
      other.Name = this.Name;
      other.ProjectType = this.ProjectType;
      other.ProjectStatus = this.ProjectStatus;
      other.Processed = this.Processed;
      other.StartDate = this.StartDate;
      other.DateFinish = this.DateFinish;
      other.DateContract = this.DateContract;
      other.Responsible = this.Responsible;
      other.BusinessPartner = this.BusinessPartner;
      other.BPLocation = this.BPLocation;
      other.User = this.User;
      other.PaymentMethod = this.PaymentMethod;
      other.PaymentTerm = this.PaymentTerm;
      other.Commitment = this.Commitment;
      other.CommitCeiling = this.CommitCeiling;
      other.CommitedAmt = this.CommitedAmt;
      other.CommitedQty = this.CommitedQty;
      other.ServRevenue = this.ServRevenue;
      other.ExpExpenses = this.ExpExpenses;
      other.ServSerCost = this.ServSerCost;
      other.ServOutCost = this.ServOutCost;
      other.ServCost = this.ServCost;
      other.ExpReinvoicing = this.ExpReinvoicing;
      other.ServMargin = this.ServMargin;
      other.ExpMargin = this.ExpMargin;
      other.SalesRepresentative = this.SalesRepresentative;
      other.Warehouse = this.Warehouse;
      other.PriceList = this.PriceList;
      other.POReference = this.POReference;
      other.Summary = this.Summary;
      other.Description = this.Description;

    }

    public void copyKeysDataTo(row16Struct other) {

      other.Searchkey = this.Searchkey;

    }

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Searchkey = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Searchkey = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProjectType = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProjectType = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ProjectStatus = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ProjectStatus = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Processed = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Processed = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.StartDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.StartDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DateFinish = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DateFinish = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.DateContract = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.DateContract = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Responsible = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Responsible = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BusinessPartner = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BusinessPartner = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BPLocation = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BPLocation = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.User = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.User = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentMethod = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentMethod = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PaymentTerm = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PaymentTerm = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Commitment = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Commitment = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitCeiling = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitCeiling = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitedAmt = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitedAmt = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.CommitedQty = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.CommitedQty = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServRevenue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServRevenue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpExpenses = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpExpenses = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServSerCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServSerCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServOutCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServOutCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServCost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServCost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpReinvoicing = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpReinvoicing = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ServMargin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ServMargin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.ExpMargin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.ExpMargin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.SalesRepresentative = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.SalesRepresentative = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.PriceList = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.PriceList = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.POReference = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.POReference = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Summary = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Summary = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Searchkey == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Searchkey.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProjectType == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProjectType.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ProjectStatus == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ProjectStatus.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Processed == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Processed.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.StartDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.StartDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DateFinish == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DateFinish.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.DateContract == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.DateContract.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Responsible == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Responsible.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BusinessPartner == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BusinessPartner.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BPLocation == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BPLocation.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.User == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.User.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentMethod == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentMethod.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PaymentTerm == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PaymentTerm.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Commitment == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Commitment.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitCeiling == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitCeiling.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitedAmt == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitedAmt.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.CommitedQty == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.CommitedQty.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServRevenue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServRevenue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpExpenses == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpExpenses.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServSerCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServSerCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServOutCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServOutCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServCost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServCost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpReinvoicing == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpReinvoicing.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ServMargin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ServMargin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.ExpMargin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.ExpMargin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.SalesRepresentative == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.SalesRepresentative.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.PriceList == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.PriceList.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.POReference == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.POReference.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Summary == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Summary.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("Searchkey");
      sb.append("=");
      sb.append(String.valueOf(this.Searchkey));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("ProjectType");
      sb.append("=");
      sb.append(String.valueOf(this.ProjectType));

      sb.append(", ");

      sb.append("ProjectStatus");
      sb.append("=");
      sb.append(String.valueOf(this.ProjectStatus));

      sb.append(", ");

      sb.append("Processed");
      sb.append("=");
      sb.append(String.valueOf(this.Processed));

      sb.append(", ");

      sb.append("StartDate");
      sb.append("=");
      sb.append(String.valueOf(this.StartDate));

      sb.append(", ");

      sb.append("DateFinish");
      sb.append("=");
      sb.append(String.valueOf(this.DateFinish));

      sb.append(", ");

      sb.append("DateContract");
      sb.append("=");
      sb.append(String.valueOf(this.DateContract));

      sb.append(", ");

      sb.append("Responsible");
      sb.append("=");
      sb.append(String.valueOf(this.Responsible));

      sb.append(", ");

      sb.append("BusinessPartner");
      sb.append("=");
      sb.append(String.valueOf(this.BusinessPartner));

      sb.append(", ");

      sb.append("BPLocation");
      sb.append("=");
      sb.append(String.valueOf(this.BPLocation));

      sb.append(", ");

      sb.append("User");
      sb.append("=");
      sb.append(String.valueOf(this.User));

      sb.append(", ");

      sb.append("PaymentMethod");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentMethod));

      sb.append(", ");

      sb.append("PaymentTerm");
      sb.append("=");
      sb.append(String.valueOf(this.PaymentTerm));

      sb.append(", ");

      sb.append("Commitment");
      sb.append("=");
      sb.append(String.valueOf(this.Commitment));

      sb.append(", ");

      sb.append("CommitCeiling");
      sb.append("=");
      sb.append(String.valueOf(this.CommitCeiling));

      sb.append(", ");

      sb.append("CommitedAmt");
      sb.append("=");
      sb.append(String.valueOf(this.CommitedAmt));

      sb.append(", ");

      sb.append("CommitedQty");
      sb.append("=");
      sb.append(String.valueOf(this.CommitedQty));

      sb.append(", ");

      sb.append("ServRevenue");
      sb.append("=");
      sb.append(String.valueOf(this.ServRevenue));

      sb.append(", ");

      sb.append("ExpExpenses");
      sb.append("=");
      sb.append(String.valueOf(this.ExpExpenses));

      sb.append(", ");

      sb.append("ServSerCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServSerCost));

      sb.append(", ");

      sb.append("ServOutCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServOutCost));

      sb.append(", ");

      sb.append("ServCost");
      sb.append("=");
      sb.append(String.valueOf(this.ServCost));

      sb.append(", ");

      sb.append("ExpReinvoicing");
      sb.append("=");
      sb.append(String.valueOf(this.ExpReinvoicing));

      sb.append(", ");

      sb.append("ServMargin");
      sb.append("=");
      sb.append(String.valueOf(this.ServMargin));

      sb.append(", ");

      sb.append("ExpMargin");
      sb.append("=");
      sb.append(String.valueOf(this.ExpMargin));

      sb.append(", ");

      sb.append("SalesRepresentative");
      sb.append("=");
      sb.append(String.valueOf(this.SalesRepresentative));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("PriceList");
      sb.append("=");
      sb.append(String.valueOf(this.PriceList));

      sb.append(", ");

      sb.append("POReference");
      sb.append("=");
      sb.append(String.valueOf(this.POReference));

      sb.append(", ");

      sb.append("Summary");
      sb.append("=");
      sb.append(String.valueOf(this.Summary));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

      int returnValue = -1;

      returnValue = checkNullsAndCompare(this.Searchkey, other.Searchkey);
      if (returnValue != 0) {
        return returnValue;
      }

      return returnValue;
    }

    private int checkNullsAndCompare(Object object1, Object object2) {
      int returnValue = 0;
      if (object1 instanceof Comparable && object2 instanceof Comparable) {
        returnValue = ((Comparable) object1).compareTo(object2);
      } else if (object1 != null && object2 != null) {
        returnValue = compareStrings(object1.toString(), object2.toString());
      } else if (object1 == null && object2 != null) {
        returnValue = 1;
      } else if (object1 != null && object2 == null) {
        returnValue = -1;
      } else {
        returnValue = 0;
      }

      return returnValue;
    }

    private int compareStrings(String string1, String string2) {
      return string1.compareTo(string2);
    }

  }

  public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap)
      throws TalendException {
    globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

    String currentComponent = "";

    try {

      row16Struct row16 = new row16Struct();
      row18Struct row18 = new row18Struct();
      row1Struct row1 = new row1Struct();
      row2Struct row2 = new row2Struct();
      row3Struct row3 = new row3Struct();
      row19Struct row19 = new row19Struct();
      row23Struct row23 = new row23Struct();

      /**
       * [tJavaRow_18 begin ] start
       */

      ok_Hash.put("tJavaRow_18", false);
      start_Hash.put("tJavaRow_18", System.currentTimeMillis());
      currentComponent = "tJavaRow_18";

      int nb_line_tJavaRow_18 = 0;

      /**
       * [tJavaRow_18 begin ] stop
       */

      /**
       * [tJavaRow_9 begin ] start
       */

      ok_Hash.put("tJavaRow_9", false);
      start_Hash.put("tJavaRow_9", System.currentTimeMillis());
      currentComponent = "tJavaRow_9";

      int nb_line_tJavaRow_9 = 0;

      /**
       * [tJavaRow_9 begin ] stop
       */

      /**
       * [tFilterRow_10 begin ] start
       */

      ok_Hash.put("tFilterRow_10", false);
      start_Hash.put("tFilterRow_10", System.currentTimeMillis());
      currentComponent = "tFilterRow_10";

      int nb_line_tFilterRow_10 = 0;
      int nb_line_ok_tFilterRow_10 = 0;
      int nb_line_reject_tFilterRow_10 = 0;

      /**
       * [tFilterRow_10 begin ] stop
       */

      /**
       * [tJavaRow_1 begin ] start
       */

      ok_Hash.put("tJavaRow_1", false);
      start_Hash.put("tJavaRow_1", System.currentTimeMillis());
      currentComponent = "tJavaRow_1";

      int nb_line_tJavaRow_1 = 0;

      /**
       * [tJavaRow_1 begin ] stop
       */

      /**
       * [tJavaRow_16 begin ] start
       */

      ok_Hash.put("tJavaRow_16", false);
      start_Hash.put("tJavaRow_16", System.currentTimeMillis());
      currentComponent = "tJavaRow_16";

      int nb_line_tJavaRow_16 = 0;

      /**
       * [tJavaRow_16 begin ] stop
       */

      /**
       * [tFilterRow_11 begin ] start
       */

      ok_Hash.put("tFilterRow_11", false);
      start_Hash.put("tFilterRow_11", System.currentTimeMillis());
      currentComponent = "tFilterRow_11";

      int nb_line_tFilterRow_11 = 0;
      int nb_line_ok_tFilterRow_11 = 0;
      int nb_line_reject_tFilterRow_11 = 0;

      /**
       * [tFilterRow_11 begin ] stop
       */

      /**
       * [tJavaRow_11 begin ] start
       */

      ok_Hash.put("tJavaRow_11", false);
      start_Hash.put("tJavaRow_11", System.currentTimeMillis());
      currentComponent = "tJavaRow_11";

      int nb_line_tJavaRow_11 = 0;

      /**
       * [tJavaRow_11 begin ] stop
       */

      /**
       * [tFileInputDelimited_1 begin ] start
       */

      ok_Hash.put("tFileInputDelimited_1", false);
      start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
      currentComponent = "tFileInputDelimited_1";

      int nb_line_tFileInputDelimited_1 = 0;
      int footer_tFileInputDelimited_1 = 0;
      int totalLinetFileInputDelimited_1 = 0;
      int limittFileInputDelimited_1 = -1;
      int lastLinetFileInputDelimited_1 = -1;

      char fieldSeparator_tFileInputDelimited_1[] = null;

      // support passing value (property: Field Separator) by 'context.fs'
      // or 'globalMap.get("fs")'.
      if (((String) ",").length() > 0) {
        fieldSeparator_tFileInputDelimited_1 = ((String) ",").toCharArray();
      } else {
        throw new IllegalArgumentException("Field Separator must be assigned a char.");
      }

      char rowSeparator_tFileInputDelimited_1[] = null;

      // support passing value (property: Row Separator) by 'context.rs'
      // or 'globalMap.get("rs")'.
      if (((String) "\n").length() > 0) {
        rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
      } else {
        throw new IllegalArgumentException("Row Separator must be assigned a char.");
      }

      com.csvreader.CsvReader csvReadertFileInputDelimited_1 = new com.csvreader.CsvReader(
          new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(/**
           * 
           * Start field tFileInputDelimited_1:FILENAME
           */
          context.getProperty("filename")/**
           * End field tFileInputDelimited_1:FILENAME
           */
          ), "UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);

      if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
          && (rowSeparator_tFileInputDelimited_1[0] != '\r'))
        csvReadertFileInputDelimited_1.setRecordDelimiter(rowSeparator_tFileInputDelimited_1[0]);

      csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
      csvReadertFileInputDelimited_1.setTextQualifier('"');

      csvReadertFileInputDelimited_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      String[] rowtFileInputDelimited_1 = null;

      if (footer_tFileInputDelimited_1 > 0) {

        while (csvReadertFileInputDelimited_1.readRecord()) {
          rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();
          if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
              .equals(rowtFileInputDelimited_1[0]))) {// empty
                                                      // line when
                                                      // row
                                                      // separator
                                                      // is '\n'

            totalLinetFileInputDelimited_1++;

          }

        }
        int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
            - footer_tFileInputDelimited_1 < 0 ? 0 : totalLinetFileInputDelimited_1
            - footer_tFileInputDelimited_1;
        if (lastLinetFileInputDelimited_1 > 0) {
          lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
              : lastLineTemptFileInputDelimited_1;
        } else {
          lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
        }

        csvReadertFileInputDelimited_1.close();

        csvReadertFileInputDelimited_1 = new com.csvreader.CsvReader(new java.io.BufferedReader(
            new java.io.InputStreamReader(new java.io.FileInputStream(/**
             * Start field
             * tFileInputDelimited_1:FILENAME
             */
            context.getProperty("filename")/**
             * End field tFileInputDelimited_1:FILENAME
             */
            ), "UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);

        if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
            && (rowSeparator_tFileInputDelimited_1[0] != '\r'))
          csvReadertFileInputDelimited_1.setRecordDelimiter(rowSeparator_tFileInputDelimited_1[0]);
        csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
        csvReadertFileInputDelimited_1.setTextQualifier('"');
        csvReadertFileInputDelimited_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      }

      int currentLinetFileInputDelimited_1 = 0;
      int outputLinetFileInputDelimited_1 = 0;

      while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1.readRecord()) {

        rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

        if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
                                                                                                   // line
                                                                                                   // when
                                                                                                   // row
                                                                                                   // separator
                                                                                                   // is
                                                                                                   // '\n'
          continue;
        }

        currentLinetFileInputDelimited_1++;
        if (currentLinetFileInputDelimited_1 < 1 + 1) {
          continue;
        }

        if (lastLinetFileInputDelimited_1 > -1
            && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
          break;
        }
        outputLinetFileInputDelimited_1++;
        if (limittFileInputDelimited_1 > 0
            && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
          break;
        }

        row16 = null;
        row16 = new row16Struct();
        try {

          if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
                                                                                                     // line
                                                                                                     // when
                                                                                                     // row
                                                                                                     // separator
                                                                                                     // is
                                                                                                     // '\n'

            row16.Organization = null;

            row16.Searchkey = null;

            row16.Name = null;

            row16.ProjectType = null;

            row16.ProjectStatus = null;

            row16.Processed = null;

            row16.StartDate = null;

            row16.DateFinish = null;

            row16.DateContract = null;

            row16.Responsible = null;

            row16.BusinessPartner = null;

            row16.BPLocation = null;

            row16.User = null;

            row16.PaymentMethod = null;

            row16.PaymentTerm = null;

            row16.Commitment = null;

            row16.CommitCeiling = null;

            row16.CommitedAmt = null;

            row16.CommitedQty = null;

            row16.ServRevenue = null;

            row16.ExpExpenses = null;

            row16.ServSerCost = null;

            row16.ServOutCost = null;

            row16.ServCost = null;

            row16.ExpReinvoicing = null;

            row16.ServMargin = null;

            row16.ExpMargin = null;

            row16.SalesRepresentative = null;

            row16.Warehouse = null;

            row16.PriceList = null;

            row16.POReference = null;

            row16.Summary = null;

            row16.Description = null;

          } else {

            if (0 < rowtFileInputDelimited_1.length) {
              row16.Organization = rowtFileInputDelimited_1[0].trim();

            } else {
              row16.Organization = null;
            }

            if (1 < rowtFileInputDelimited_1.length) {
              row16.Searchkey = rowtFileInputDelimited_1[1].trim();

            } else {
              row16.Searchkey = null;
            }

            if (2 < rowtFileInputDelimited_1.length) {
              row16.Name = rowtFileInputDelimited_1[2].trim();

            } else {
              row16.Name = null;
            }

            if (3 < rowtFileInputDelimited_1.length) {
              row16.ProjectType = rowtFileInputDelimited_1[3].trim();

            } else {
              row16.ProjectType = null;
            }

            if (4 < rowtFileInputDelimited_1.length) {
              row16.ProjectStatus = rowtFileInputDelimited_1[4].trim();

            } else {
              row16.ProjectStatus = null;
            }

            if (5 < rowtFileInputDelimited_1.length) {
              row16.Processed = rowtFileInputDelimited_1[5].trim();

            } else {
              row16.Processed = null;
            }

            if (6 < rowtFileInputDelimited_1.length) {
              row16.StartDate = rowtFileInputDelimited_1[6].trim();

            } else {
              row16.StartDate = null;
            }

            if (7 < rowtFileInputDelimited_1.length) {
              row16.DateFinish = rowtFileInputDelimited_1[7].trim();

            } else {
              row16.DateFinish = null;
            }

            if (8 < rowtFileInputDelimited_1.length) {
              row16.DateContract = rowtFileInputDelimited_1[8].trim();

            } else {
              row16.DateContract = null;
            }

            if (9 < rowtFileInputDelimited_1.length) {
              row16.Responsible = rowtFileInputDelimited_1[9].trim();

            } else {
              row16.Responsible = null;
            }

            if (10 < rowtFileInputDelimited_1.length) {
              row16.BusinessPartner = rowtFileInputDelimited_1[10].trim();

            } else {
              row16.BusinessPartner = null;
            }

            if (11 < rowtFileInputDelimited_1.length) {
              row16.BPLocation = rowtFileInputDelimited_1[11].trim();

            } else {
              row16.BPLocation = null;
            }

            if (12 < rowtFileInputDelimited_1.length) {
              row16.User = rowtFileInputDelimited_1[12].trim();

            } else {
              row16.User = null;
            }

            if (13 < rowtFileInputDelimited_1.length) {
              row16.PaymentMethod = rowtFileInputDelimited_1[13].trim();

            } else {
              row16.PaymentMethod = null;
            }

            if (14 < rowtFileInputDelimited_1.length) {
              row16.PaymentTerm = rowtFileInputDelimited_1[14].trim();

            } else {
              row16.PaymentTerm = null;
            }

            if (15 < rowtFileInputDelimited_1.length) {
              row16.Commitment = rowtFileInputDelimited_1[15].trim();

            } else {
              row16.Commitment = null;
            }

            if (16 < rowtFileInputDelimited_1.length) {
              row16.CommitCeiling = rowtFileInputDelimited_1[16].trim();

            } else {
              row16.CommitCeiling = null;
            }

            if (17 < rowtFileInputDelimited_1.length) {
              row16.CommitedAmt = rowtFileInputDelimited_1[17].trim();

            } else {
              row16.CommitedAmt = null;
            }

            if (18 < rowtFileInputDelimited_1.length) {
              row16.CommitedQty = rowtFileInputDelimited_1[18].trim();

            } else {
              row16.CommitedQty = null;
            }

            if (19 < rowtFileInputDelimited_1.length) {
              row16.ServRevenue = rowtFileInputDelimited_1[19].trim();

            } else {
              row16.ServRevenue = null;
            }

            if (20 < rowtFileInputDelimited_1.length) {
              row16.ExpExpenses = rowtFileInputDelimited_1[20].trim();

            } else {
              row16.ExpExpenses = null;
            }

            if (21 < rowtFileInputDelimited_1.length) {
              row16.ServSerCost = rowtFileInputDelimited_1[21].trim();

            } else {
              row16.ServSerCost = null;
            }

            if (22 < rowtFileInputDelimited_1.length) {
              row16.ServOutCost = rowtFileInputDelimited_1[22].trim();

            } else {
              row16.ServOutCost = null;
            }

            if (23 < rowtFileInputDelimited_1.length) {
              row16.ServCost = rowtFileInputDelimited_1[23].trim();

            } else {
              row16.ServCost = null;
            }

            if (24 < rowtFileInputDelimited_1.length) {
              row16.ExpReinvoicing = rowtFileInputDelimited_1[24].trim();

            } else {
              row16.ExpReinvoicing = null;
            }

            if (25 < rowtFileInputDelimited_1.length) {
              row16.ServMargin = rowtFileInputDelimited_1[25].trim();

            } else {
              row16.ServMargin = null;
            }

            if (26 < rowtFileInputDelimited_1.length) {
              row16.ExpMargin = rowtFileInputDelimited_1[26].trim();

            } else {
              row16.ExpMargin = null;
            }

            if (27 < rowtFileInputDelimited_1.length) {
              row16.SalesRepresentative = rowtFileInputDelimited_1[27].trim();

            } else {
              row16.SalesRepresentative = null;
            }

            if (28 < rowtFileInputDelimited_1.length) {
              row16.Warehouse = rowtFileInputDelimited_1[28].trim();

            } else {
              row16.Warehouse = null;
            }

            if (29 < rowtFileInputDelimited_1.length) {
              row16.PriceList = rowtFileInputDelimited_1[29].trim();

            } else {
              row16.PriceList = null;
            }

            if (30 < rowtFileInputDelimited_1.length) {
              row16.POReference = rowtFileInputDelimited_1[30].trim();

            } else {
              row16.POReference = null;
            }

            if (31 < rowtFileInputDelimited_1.length) {
              row16.Summary = rowtFileInputDelimited_1[31].trim();

            } else {
              row16.Summary = null;
            }

            if (32 < rowtFileInputDelimited_1.length) {
              row16.Description = rowtFileInputDelimited_1[32].trim();

            } else {
              row16.Description = null;
            }

          }

        } catch (Exception e) {
          System.err.println(e.getMessage());
          row16 = null;
        }

        /**
         * [tFileInputDelimited_1 begin ] stop
         */
        /**
         * [tFileInputDelimited_1 main ] start
         */

        currentComponent = "tFileInputDelimited_1";

        /**
         * [tFileInputDelimited_1 main ] stop
         */
        // Start of branch "row16"
        if (row16 != null) {

          /**
           * [tJavaRow_11 main ] start
           */

          currentComponent = "tJavaRow_11";

          org.openbravo.idl.proc.IdlService service = org.openbravo.idl.proc.IdlIntService
              .getInstance().getService("Project");
          org.openbravo.idl.proc.Validator validator = service.getValidator("Project");

          row18.flag = "0";
          row18.whyError = "";

          row18.Organization = validator.checkTransactionalOrganization(row16.Organization);
          row18.Searchkey = validator.checkNotNull(validator.checkString(row16.Searchkey, 40),
              "SearchKey");
          row18.Name = validator.checkNotNull(validator.checkString(row16.Name, 60), "Name");
          row18.Description = validator.checkString(row16.Description, 255);
          row18.Summary = validator.checkBoolean(row16.Summary);
          row18.User = validator.checkString(row16.User, 60);
          row18.BusinessPartner = validator.checkString(row16.BusinessPartner, 60);
          row18.BPLocation = validator.checkString(row16.BPLocation, 60);
          row18.POReference = validator.checkString(row16.POReference, 20);
          row18.PaymentTerm = validator.checkString(row16.PaymentTerm, 60);
          row18.Commitment = validator.checkBoolean(row16.Commitment);
          row18.CommitedAmt = validator.checkBigDecimal(row16.CommitedAmt);
          row18.DateContract = validator.checkDate(row16.DateContract);
          row18.DateFinish = validator.checkDate(row16.DateFinish);
          row18.Processed = validator.checkNotNull(validator.checkBoolean(row16.Processed));
          row18.SalesRepresentative = validator.checkString(row16.SalesRepresentative, 60);
          row18.ProjectType = validator.checkString(row16.ProjectType, 60);
          row18.CommitedQty = validator.checkBigDecimal(row16.CommitedQty);
          row18.CommitCeiling = validator.checkBoolean(row16.CommitCeiling);
          row18.Warehouse = validator.checkString(row16.Warehouse, 60);
          row18.ProjectStatus = validator.checkNotNull(validator.checkString(row16.ProjectStatus,
              60));
          row18.PriceList = validator.checkString(row16.PriceList, 60);
          row18.ExpExpenses = validator.checkBigDecimal(row16.ExpExpenses);
          row18.ExpMargin = validator.checkBigDecimal(row16.ExpMargin);
          row18.ExpReinvoicing = validator.checkBigDecimal(row16.ExpReinvoicing);
          row18.Responsible = validator.checkString(row16.Responsible, 60);
          row18.ServCost = validator.checkBigDecimal(row16.ServCost);
          row18.ServMargin = validator.checkBigDecimal(row16.ServMargin);
          row18.ServRevenue = validator.checkBigDecimal(row16.ServRevenue);
          row18.StartDate = validator.checkDate(row16.StartDate);
          row18.ServSerCost = validator.checkBigDecimal(row16.ServSerCost);
          row18.ServOutCost = validator.checkBigDecimal(row16.ServOutCost);
          row18.PaymentMethod = validator.checkString(row16.PaymentMethod, 60);

          row18.flag = validator.getErrorCode();
          row18.whyError = validator.getErrorMessage();

          nb_line_tJavaRow_11++;

          /**
           * [tJavaRow_11 main ] stop
           */

          /**
           * [tFilterRow_11 main ] start
           */

          currentComponent = "tFilterRow_11";

          row1 = null;
          row23 = null;

          if (

          (row18.flag == null ? false : row18.flag.toLowerCase().compareTo("0") == 0)

          )

          {
            if (row1 == null) {
              row1 = new row1Struct();
            }
            row1.Organization = row18.Organization;
            row1.Searchkey = row18.Searchkey;
            row1.Name = row18.Name;
            row1.Description = row18.Description;
            row1.Summary = row18.Summary;
            row1.User = row18.User;
            row1.BusinessPartner = row18.BusinessPartner;
            row1.BPLocation = row18.BPLocation;
            row1.POReference = row18.POReference;
            row1.PaymentTerm = row18.PaymentTerm;
            row1.Commitment = row18.Commitment;
            row1.CommitedAmt = row18.CommitedAmt;
            row1.DateContract = row18.DateContract;
            row1.DateFinish = row18.DateFinish;
            row1.Processed = row18.Processed;
            row1.SalesRepresentative = row18.SalesRepresentative;
            row1.ProjectType = row18.ProjectType;
            row1.CommitedQty = row18.CommitedQty;
            row1.CommitCeiling = row18.CommitCeiling;
            row1.Warehouse = row18.Warehouse;
            row1.ProjectStatus = row18.ProjectStatus;
            row1.PriceList = row18.PriceList;
            row1.ExpExpenses = row18.ExpExpenses;
            row1.ExpMargin = row18.ExpMargin;
            row1.ExpReinvoicing = row18.ExpReinvoicing;
            row1.Responsible = row18.Responsible;
            row1.ServCost = row18.ServCost;
            row1.ServMargin = row18.ServMargin;
            row1.ServRevenue = row18.ServRevenue;
            row1.StartDate = row18.StartDate;
            row1.ServSerCost = row18.ServSerCost;
            row1.ServOutCost = row18.ServOutCost;
            row1.PaymentMethod = row18.PaymentMethod;
            row1.flag = row18.flag;
            row1.whyError = row18.whyError;
            nb_line_ok_tFilterRow_11++;
          } else {
            if (row23 == null) {
              row23 = new row23Struct();
            }
            row23.Organization = row18.Organization;
            row23.Searchkey = row18.Searchkey;
            row23.Name = row18.Name;
            row23.Description = row18.Description;
            row23.Summary = row18.Summary;
            row23.User = row18.User;
            row23.BusinessPartner = row18.BusinessPartner;
            row23.BPLocation = row18.BPLocation;
            row23.POReference = row18.POReference;
            row23.PaymentTerm = row18.PaymentTerm;
            row23.Commitment = row18.Commitment;
            row23.CommitedAmt = row18.CommitedAmt;
            row23.DateContract = row18.DateContract;
            row23.DateFinish = row18.DateFinish;
            row23.Processed = row18.Processed;
            row23.SalesRepresentative = row18.SalesRepresentative;
            row23.ProjectType = row18.ProjectType;
            row23.CommitedQty = row18.CommitedQty;
            row23.CommitCeiling = row18.CommitCeiling;
            row23.Warehouse = row18.Warehouse;
            row23.ProjectStatus = row18.ProjectStatus;
            row23.PriceList = row18.PriceList;
            row23.ExpExpenses = row18.ExpExpenses;
            row23.ExpMargin = row18.ExpMargin;
            row23.ExpReinvoicing = row18.ExpReinvoicing;
            row23.Responsible = row18.Responsible;
            row23.ServCost = row18.ServCost;
            row23.ServMargin = row18.ServMargin;
            row23.ServRevenue = row18.ServRevenue;
            row23.StartDate = row18.StartDate;
            row23.ServSerCost = row18.ServSerCost;
            row23.ServOutCost = row18.ServOutCost;
            row23.PaymentMethod = row18.PaymentMethod;
            row23.flag = row18.flag;
            row23.whyError = row18.whyError;
            nb_line_reject_tFilterRow_11++;
          }
          nb_line_tFilterRow_11++;

          /**
           * [tFilterRow_11 main ] stop
           */
          // Start of branch "row1"
          if (row1 != null) {

            /**
             * [tJavaRow_1 main ] start
             */

            currentComponent = "tJavaRow_1";

            row2.flag = "0";
            row2.whyError = "";

            row2.Organization = row1.Organization;

            row2.Searchkey = row1.Searchkey;
            row2.Name = row1.Name;
            row2.Description = row1.Description;
            row2.Summary = row1.Summary;

            row2.User = row1.User;
            if (row1.User != null) {
              User objUser = service.findDALInstance(false, User.class, new Value(
                  User.PROPERTY_NAME, row1.User));
              if (objUser == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row1.User + "\n";
              }
            }

            row2.BusinessPartner = row1.BusinessPartner;
            if (row1.BusinessPartner != null) {
              BusinessPartner objBP = service.findDALInstance(false, BusinessPartner.class,
                  new Value(BusinessPartner.PROPERTY_NAME, row1.BusinessPartner));
              if (objBP == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE")
                    + row1.BusinessPartner + "\n";
              }
            }

            row2.BPLocation = row1.BPLocation;
            if (row1.BPLocation != null) {
              Location objBP = service.findDALInstance(false, Location.class, new Value(
                  Location.PROPERTY_NAME, row1.BPLocation));
              if (objBP == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row1.BPLocation
                    + "\n";
              }
            }

            row2.POReference = row1.POReference;

            row2.PaymentTerm = row1.PaymentTerm;
            if (row1.PaymentTerm != null) {
              PaymentTerm objPaymentTerm = service.findDALInstance(false, PaymentTerm.class,
                  new Value(PaymentTerm.PROPERTY_NAME, row1.PaymentTerm));
              if (objPaymentTerm == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row1.PaymentTerm
                    + "\n";
              }
            }

            row2.Commitment = row1.Commitment;
            row2.CommitedAmt = row1.CommitedAmt;
            row2.DateContract = row1.DateContract;
            row2.DateFinish = row1.DateFinish;
            row2.Processed = row1.Processed;

            row2.SalesRepresentative = row1.SalesRepresentative;
            if (row1.SalesRepresentative != null) {
              User objUser = service.findDALInstance(false, User.class, new Value(
                  User.PROPERTY_NAME, row1.SalesRepresentative));
              if (objUser == null || objUser.getBusinessPartner() == null
                  || !objUser.getBusinessPartner().isSalesRepresentative()) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE")
                    + row1.SalesRepresentative + "\n";
              }
            }

            row2.ProjectType = row1.ProjectType;
            if (row1.ProjectType != null) {
              ProjectType objProjectType = service.findDALInstance(false, ProjectType.class,
                  new Value(ProjectType.PROPERTY_NAME, row1.ProjectType));
              if (objProjectType == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row1.ProjectType
                    + "\n";
              }
            }

            row2.CommitedQty = row1.CommitedQty;
            row2.CommitCeiling = row1.CommitCeiling;

            row2.Warehouse = row1.Warehouse;
            if (row1.Warehouse != null) {
              Warehouse objWarehouse = service.findDALInstance(false, Warehouse.class, new Value(
                  Warehouse.PROPERTY_NAME, row1.Warehouse));
              if (objWarehouse == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row1.Warehouse
                    + "\n";
              }
            }

            row2.ProjectStatus = row1.ProjectStatus;
            if (row1.ProjectStatus != null
                && service.getReferenceValue("ProjectStatus", row1.ProjectStatus) == null) {
              row2.flag = "-1";
              row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row1.ProjectStatus
                  + "\n";
            }

            row2.PriceList = row1.PriceList;
            if (row1.PriceList != null) {
              PriceList objPriceList = service.findDALInstance(false, PriceList.class, new Value(
                  PriceList.PROPERTY_NAME, row1.PriceList));
              if (objPriceList == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row1.PriceList
                    + "\n";
              }
            }

            row2.ExpExpenses = row1.ExpExpenses;
            row2.ExpMargin = row1.ExpMargin;
            row2.ExpReinvoicing = row1.ExpReinvoicing;

            row2.Responsible = row1.Responsible;
            if (row1.Responsible != null) {
              BusinessPartner objBP = service.findDALInstance(false, BusinessPartner.class,
                  new Value(BusinessPartner.PROPERTY_NAME, row1.Responsible), new Value(
                      BusinessPartner.PROPERTY_EMPLOYEE, true));
              if (objBP == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE") + row1.Responsible
                    + "\n";
              }
            }

            row2.ServCost = row1.ServCost;
            row2.ServMargin = row1.ServMargin;
            row2.ServRevenue = row1.ServRevenue;
            row2.StartDate = row1.StartDate;
            row2.ServSerCost = row1.ServSerCost;
            row2.ServOutCost = row1.ServOutCost;

            row2.PaymentMethod = row1.PaymentMethod;
            if (row1.PaymentMethod != null) {
              FIN_PaymentMethod objPaymentMethod = service.findDALInstance(false,
                  FIN_PaymentMethod.class, new Value(FIN_PaymentMethod.PROPERTY_NAME,
                      row1.PaymentMethod));
              if (objPaymentMethod == null) {
                row2.flag = "-1";
                row2.whyError += service.Utility_messageBD("IDL_BAD_REFERENCE")
                    + row1.PaymentMethod + "\n";
              }
            }

            nb_line_tJavaRow_1++;

            /**
             * [tJavaRow_1 main ] stop
             */

            /**
             * [tFilterRow_10 main ] start
             */

            currentComponent = "tFilterRow_10";

            row3 = null;
            row19 = null;

            if (

            (row2.flag == null ? false : row2.flag.toLowerCase().compareTo("0") == 0)

            )

            {
              if (row3 == null) {
                row3 = new row3Struct();
              }
              row3.Organization = row2.Organization;
              row3.Searchkey = row2.Searchkey;
              row3.Name = row2.Name;
              row3.Description = row2.Description;
              row3.Summary = row2.Summary;
              row3.User = row2.User;
              row3.BusinessPartner = row2.BusinessPartner;
              row3.BPLocation = row2.BPLocation;
              row3.POReference = row2.POReference;
              row3.PaymentTerm = row2.PaymentTerm;
              row3.Commitment = row2.Commitment;
              row3.CommitedAmt = row2.CommitedAmt;
              row3.DateContract = row2.DateContract;
              row3.DateFinish = row2.DateFinish;
              row3.Processed = row2.Processed;
              row3.SalesRepresentative = row2.SalesRepresentative;
              row3.ProjectType = row2.ProjectType;
              row3.CommitedQty = row2.CommitedQty;
              row3.CommitCeiling = row2.CommitCeiling;
              row3.Warehouse = row2.Warehouse;
              row3.ProjectStatus = row2.ProjectStatus;
              row3.PriceList = row2.PriceList;
              row3.ExpExpenses = row2.ExpExpenses;
              row3.ExpMargin = row2.ExpMargin;
              row3.ExpReinvoicing = row2.ExpReinvoicing;
              row3.Responsible = row2.Responsible;
              row3.ServCost = row2.ServCost;
              row3.ServMargin = row2.ServMargin;
              row3.ServRevenue = row2.ServRevenue;
              row3.StartDate = row2.StartDate;
              row3.ServSerCost = row2.ServSerCost;
              row3.ServOutCost = row2.ServOutCost;
              row3.PaymentMethod = row2.PaymentMethod;
              row3.flag = row2.flag;
              row3.whyError = row2.whyError;
              nb_line_ok_tFilterRow_10++;
            } else {
              if (row19 == null) {
                row19 = new row19Struct();
              }
              row19.Organization = row2.Organization;
              row19.Searchkey = row2.Searchkey;
              row19.Name = row2.Name;
              row19.Description = row2.Description;
              row19.Summary = row2.Summary;
              row19.User = row2.User;
              row19.BusinessPartner = row2.BusinessPartner;
              row19.BPLocation = row2.BPLocation;
              row19.POReference = row2.POReference;
              row19.PaymentTerm = row2.PaymentTerm;
              row19.Commitment = row2.Commitment;
              row19.CommitedAmt = row2.CommitedAmt;
              row19.DateContract = row2.DateContract;
              row19.DateFinish = row2.DateFinish;
              row19.Processed = row2.Processed;
              row19.SalesRepresentative = row2.SalesRepresentative;
              row19.ProjectType = row2.ProjectType;
              row19.CommitedQty = row2.CommitedQty;
              row19.CommitCeiling = row2.CommitCeiling;
              row19.Warehouse = row2.Warehouse;
              row19.ProjectStatus = row2.ProjectStatus;
              row19.PriceList = row2.PriceList;
              row19.ExpExpenses = row2.ExpExpenses;
              row19.ExpMargin = row2.ExpMargin;
              row19.ExpReinvoicing = row2.ExpReinvoicing;
              row19.Responsible = row2.Responsible;
              row19.ServCost = row2.ServCost;
              row19.ServMargin = row2.ServMargin;
              row19.ServRevenue = row2.ServRevenue;
              row19.StartDate = row2.StartDate;
              row19.ServSerCost = row2.ServSerCost;
              row19.ServOutCost = row2.ServOutCost;
              row19.PaymentMethod = row2.PaymentMethod;
              row19.flag = row2.flag;
              row19.whyError = row2.whyError;
              nb_line_reject_tFilterRow_10++;
            }
            nb_line_tFilterRow_10++;

            /**
             * [tFilterRow_10 main ] stop
             */
            // Start of branch "row3"
            if (row3 != null) {

              /**
               * [tJavaRow_18 main ] start
               */

              currentComponent = "tJavaRow_18";

              service.finishRecordProcess(row3.Organization, row3.Searchkey, row3.Name,
                  row3.ProjectType, row3.ProjectStatus, row3.Processed, row3.StartDate,
                  row3.DateFinish, row3.DateContract, row3.Responsible, row3.BusinessPartner,
                  row3.BPLocation, row3.User, row3.PaymentMethod, row3.PaymentTerm,
                  row3.Commitment, row3.CommitCeiling, row3.CommitedAmt, row3.CommitedQty,
                  row3.ServRevenue, row3.ExpExpenses, row3.ServSerCost, row3.ServOutCost,
                  row3.ServCost, row3.ExpReinvoicing, row3.ServMargin, row3.ExpMargin,
                  row3.SalesRepresentative, row3.Warehouse, row3.PriceList, row3.POReference,
                  row3.Summary, row3.Description);
              nb_line_tJavaRow_18++;

              /**
               * [tJavaRow_18 main ] stop
               */

            } // End of branch "row3"

            // Start of branch "row19"
            if (row19 != null) {

              /**
               * [tJavaRow_9 main ] start
               */

              currentComponent = "tJavaRow_9";

              service.logRecordError(row19.whyError, row19.Organization, row19.Searchkey,
                  row19.Name, row19.Description, row19.Summary, row19.User, row19.BusinessPartner,
                  row19.BPLocation, row19.POReference, row19.PaymentTerm, row19.Commitment,
                  row19.CommitedAmt, row19.DateContract, row19.DateFinish, row19.Processed,
                  row19.SalesRepresentative, row19.ProjectType, row19.CommitedQty,
                  row19.CommitCeiling, row19.Warehouse, row19.ProjectStatus, row19.PriceList,
                  row19.ExpExpenses, row19.ExpMargin, row19.ExpReinvoicing, row19.Responsible,
                  row19.ServCost, row19.ServMargin, row19.ServRevenue, row19.StartDate,
                  row19.ServSerCost, row19.ServOutCost, row19.PaymentMethod);
              nb_line_tJavaRow_9++;

              /**
               * [tJavaRow_9 main ] stop
               */

            } // End of branch "row19"

          } // End of branch "row1"

          // Start of branch "row23"
          if (row23 != null) {

            /**
             * [tJavaRow_16 main ] start
             */

            currentComponent = "tJavaRow_16";

            service.logRecordError(row23.whyError, row23.Organization, row23.Searchkey, row23.Name,
                row23.Description, row23.Summary, row23.User, row23.BusinessPartner,
                row23.BPLocation, row23.POReference, row23.PaymentTerm, row23.Commitment,
                row23.CommitedAmt, row23.DateContract, row23.DateFinish, row23.Processed,
                row23.SalesRepresentative, row23.ProjectType, row23.CommitedQty,
                row23.CommitCeiling, row23.Warehouse, row23.ProjectStatus, row23.PriceList,
                row23.ExpExpenses, row23.ExpMargin, row23.ExpReinvoicing, row23.Responsible,
                row23.ServCost, row23.ServMargin, row23.ServRevenue, row23.StartDate,
                row23.ServSerCost, row23.ServOutCost, row23.PaymentMethod);
            nb_line_tJavaRow_16++;

            /**
             * [tJavaRow_16 main ] stop
             */

          } // End of branch "row23"

        } // End of branch "row16"

        /**
         * [tFileInputDelimited_1 end ] start
         */

        currentComponent = "tFileInputDelimited_1";

        nb_line_tFileInputDelimited_1++;
      }
      csvReadertFileInputDelimited_1.close();
      globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);

      ok_Hash.put("tFileInputDelimited_1", true);
      end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

      /**
       * [tFileInputDelimited_1 end ] stop
       */

      /**
       * [tJavaRow_11 end ] start
       */

      currentComponent = "tJavaRow_11";

      globalMap.put("tJavaRow_11_NB_LINE", nb_line_tJavaRow_11);

      ok_Hash.put("tJavaRow_11", true);
      end_Hash.put("tJavaRow_11", System.currentTimeMillis());

      /**
       * [tJavaRow_11 end ] stop
       */

      /**
       * [tFilterRow_11 end ] start
       */

      currentComponent = "tFilterRow_11";

      globalMap.put("tFilterRow_11_NB_LINE", nb_line_tFilterRow_11);
      globalMap.put("tFilterRow_11_NB_LINE_OK", nb_line_ok_tFilterRow_11);
      globalMap.put("tFilterRow_11_NB_LINE_REJECT", nb_line_reject_tFilterRow_11);

      ok_Hash.put("tFilterRow_11", true);
      end_Hash.put("tFilterRow_11", System.currentTimeMillis());

      /**
       * [tFilterRow_11 end ] stop
       */

      /**
       * [tJavaRow_1 end ] start
       */

      currentComponent = "tJavaRow_1";

      globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

      ok_Hash.put("tJavaRow_1", true);
      end_Hash.put("tJavaRow_1", System.currentTimeMillis());

      /**
       * [tJavaRow_1 end ] stop
       */

      /**
       * [tFilterRow_10 end ] start
       */

      currentComponent = "tFilterRow_10";

      globalMap.put("tFilterRow_10_NB_LINE", nb_line_tFilterRow_10);
      globalMap.put("tFilterRow_10_NB_LINE_OK", nb_line_ok_tFilterRow_10);
      globalMap.put("tFilterRow_10_NB_LINE_REJECT", nb_line_reject_tFilterRow_10);

      ok_Hash.put("tFilterRow_10", true);
      end_Hash.put("tFilterRow_10", System.currentTimeMillis());

      /**
       * [tFilterRow_10 end ] stop
       */

      /**
       * [tJavaRow_18 end ] start
       */

      currentComponent = "tJavaRow_18";

      globalMap.put("tJavaRow_18_NB_LINE", nb_line_tJavaRow_18);

      ok_Hash.put("tJavaRow_18", true);
      end_Hash.put("tJavaRow_18", System.currentTimeMillis());

      /**
       * [tJavaRow_18 end ] stop
       */

      /**
       * [tJavaRow_9 end ] start
       */

      currentComponent = "tJavaRow_9";

      globalMap.put("tJavaRow_9_NB_LINE", nb_line_tJavaRow_9);

      ok_Hash.put("tJavaRow_9", true);
      end_Hash.put("tJavaRow_9", System.currentTimeMillis());

      /**
       * [tJavaRow_9 end ] stop
       */

      /**
       * [tJavaRow_16 end ] start
       */

      currentComponent = "tJavaRow_16";

      globalMap.put("tJavaRow_16_NB_LINE", nb_line_tJavaRow_16);

      ok_Hash.put("tJavaRow_16", true);
      end_Hash.put("tJavaRow_16", System.currentTimeMillis());

      /**
       * [tJavaRow_16 end ] stop
       */

    } catch (Exception e) {

      throw new TalendException(e, currentComponent, globalMap);

    }

    globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
  }

  public boolean watch = false;
  public int portStats = 3334;
  public int portTraces = 4334;
  public String clientHost;
  public String defaultClientHost = "localhost";
  public String contextStr = "Default";
  public String pid = "0";
  public String rootPid = null;
  public String fatherPid = null;
  public long startTime = 0;
  public boolean isChildJob = false;

  private ThreadLocal threadLocal = new ThreadLocal();
  {
    java.util.Map threadRunResultMap = new java.util.HashMap();
    threadRunResultMap.put("errorCode", null);
    threadRunResultMap.put("status", "");
    threadLocal.set(threadRunResultMap);
  }

  private java.util.Properties context_param = new java.util.Properties();

  public String status = "";

  public static void main(String[] args) {
    final ProjectJob ProjectJobClass = new ProjectJob();

    int exitCode = ProjectJobClass.runJobInTOS(args);

    System.exit(exitCode);
  }

  public String[][] runJob(String[] args) {

    int exitCode = runJobInTOS(args);
    String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

    return bufferValue;
  }

  public int runJobInTOS(String[] args) {

    String lastStr = "";
    for (String arg : args) {
      if (arg.equalsIgnoreCase("--context_param")) {
        lastStr = arg;
      } else if (lastStr.equals("")) {
        evalParam(arg);
      } else {
        evalParam(lastStr + " " + arg);
        lastStr = "";
      }
    }

    if (clientHost == null) {
      clientHost = defaultClientHost;
    }

    if (pid == null || "0".equals(pid)) {
      pid = TalendString.getAsciiRandomString(6);
    }

    if (rootPid == null) {
      rootPid = pid;
    }
    if (fatherPid == null) {
      fatherPid = pid;
    } else {
      isChildJob = true;
    }

    try {
      java.io.InputStream inContext = ProjectJob.class.getClassLoader().getResourceAsStream(
          "idl/projectjob_0_1/contexts/Default.properties");
      if (inContext != null) {
        defaultProps.load(inContext);
        inContext.close();
        context = new ContextProperties(defaultProps);
      }

      if (contextStr.compareTo("Default") != 0) {
        inContext = ProjectJob.class.getClassLoader().getResourceAsStream(
            "idl/projectjob_0_1/contexts/" + contextStr + ".properties");
        if (inContext != null) {
          context.load(inContext);
          inContext.close();
        }
      }

      if (!context_param.isEmpty()) {
        context.putAll(context_param);
      }

      try {
        context.executeInsert = Boolean.parseBoolean(context.getProperty("executeInsert"));
      } catch (NumberFormatException e) {
        context.executeInsert = null;
      }

      context.filename = (String) context.getProperty("filename");

      try {
        context.numLinesOk = Integer.parseInt(context.getProperty("numLinesOk"));
      } catch (NumberFormatException e) {
        context.numLinesOk = null;
      }

      try {
        context.numLinesRejected = Integer.parseInt(context.getProperty("numLinesRejected"));
      } catch (NumberFormatException e) {
        context.numLinesRejected = null;
      }

      context.validationFailCause = (String) context.getProperty("validationFailCause");

    } catch (java.io.IOException ie) {
      System.err.println("Could not load context " + contextStr);
      ie.printStackTrace();
    }

    long end = 0;

    startTime = System.currentTimeMillis();

    try {
      errorCode = null;
      tFileInputDelimited_1Process(globalMap);
      status = "end";
    } catch (TalendException e_tFileInputDelimited_1) {
      status = "failure";
      e_tFileInputDelimited_1.printStackTrace();
      globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

    } finally {
    }

    end = System.currentTimeMillis();

    if (watch) {
      System.out.println((end - startTime) + " milliseconds");
    }

    if (errorCode == null) {
      return status != null && status.equals("failure") ? 1 : 0;
    } else {
      return errorCode.intValue();
    }
  }

  private void evalParam(String arg) {
    if (arg.startsWith("--watch")) {
      watch = true;
    } else if (arg.startsWith("--stat_port=")) {
      portStats = Integer.parseInt(arg.substring(12));
    } else if (arg.startsWith("--trace_port=")) {
      portTraces = Integer.parseInt(arg.substring(13));
    } else if (arg.startsWith("--client_host=")) {
      clientHost = arg.substring(14);
    } else if (arg.startsWith("--context=")) {
      contextStr = arg.substring(10);
    } else if (arg.startsWith("--father_pid=")) {
      fatherPid = arg.substring(13);
    } else if (arg.startsWith("--root_pid=")) {
      rootPid = arg.substring(11);
    } else if (arg.startsWith("--pid=")) {
      pid = arg.substring(6);
    } else if (arg.startsWith("--context_param")) {
      String keyValue = arg.substring(16);
      int index = -1;
      if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
        context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
      }
    }

  }

  public Integer getErrorCode() {
    return errorCode;
  }

  public String getStatus() {
    return status;
  }
}
/************************************************************************************************
 * 343687 characters generated by Talend Open Studio on the January 25, 2013 3:05:45 PM CET
 ************************************************************************************************/
