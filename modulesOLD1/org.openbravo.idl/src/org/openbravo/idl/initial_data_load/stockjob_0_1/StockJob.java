// ============================================================================
//
// Copyright (c) 2005-2016, Talend Inc.
//
// This source code has been automatically generated by Talend Open Studio
// / JobDesigner (CodeGenerator version 3.1.4.r29781).
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// (http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package org.openbravo.idl.initial_data_load.stockjob_0_1;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.openbravo.idl.proc.Value;
import org.openbravo.model.common.geography.Country;
import org.openbravo.model.common.plm.Product;

import routines.TalendString;
import routines.system.TDieException;

//the import part of tJavaRow_8
//import java.util.List;

/**
 * Job: StockJob Purpose: <br>
 * Description: <br>
 * 
 * @author adrian.romero@openbravo.com
 * @version 3.1.4.r29781
 * @status
 */
@SuppressWarnings({ "rawtypes", "unchecked", "hiding" })
public class StockJob {
  public final Object obj = new Object();
  // create and load default properties
  private java.util.Properties defaultProps = new java.util.Properties();

  // create application properties with default
  private class ContextProperties extends java.util.Properties {

    /**
     * 
     */
    private static final long serialVersionUID = 1L;

    public ContextProperties(java.util.Properties properties) {
      super(properties);
    }

    public ContextProperties() {
      super();
    }

    @SuppressWarnings("unused")
    public void synchronizeContext() {

    }

  }

  private ContextProperties context = new ContextProperties();
  public Integer errorCode = null;
  private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
  private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
  private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
  public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

  private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
  private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
      new java.io.BufferedOutputStream(baos));

  public String getExceptionStackTrace() {
    errorMessagePS.flush();
    return baos.toString();
  }

  @SuppressWarnings("serial")
  private class TalendException extends Exception {
    private java.util.Map<String, Object> globalMap = null;
    private Exception e = null;
    private String currentComponent = null;

    private TalendException(Exception e, String errorComponent,
        final java.util.Map<String, Object> globalMap) {
      this.currentComponent = errorComponent;
      this.globalMap = globalMap;
      this.e = e;
    }

    @Override
    public void printStackTrace() {
      if (!(e instanceof TalendException || e instanceof TDieException)) {
        globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());
        System.err.println("Exception in component " + currentComponent);
      }
      if (!(e instanceof TDieException)) {
        if (e instanceof TalendException) {
          e.printStackTrace();
        } else {
          e.printStackTrace();
          e.printStackTrace(errorMessagePS);
        }
      }
      if (!(e instanceof TalendException)) {
        try {
          for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
            if (m.getName().compareTo(currentComponent + "_error") == 0) {
              m.invoke(StockJob.this, new Object[] { e, globalMap });
              break;
            }
          }

          if (!(e instanceof TDieException)) {
          }
        } catch (java.lang.SecurityException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalArgumentException e) {
          this.e.printStackTrace();
        } catch (java.lang.IllegalAccessException e) {
          this.e.printStackTrace();
        } catch (java.lang.reflect.InvocationTargetException e) {
          this.e.printStackTrace();
        }
      }
    }
  }

  public void tFileInputDelimited_1_error(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
    end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_1_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_1_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_1", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_5_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_5", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_2_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_2", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_7_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_7", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFilterRow_3_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tFilterRow_3", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_3_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_3", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_8_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_8", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_6_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_6", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tJavaRow_2_error(Exception exception, final java.util.Map<String, Object> globalMap)
      throws TalendException {
    end_Hash.put("tJavaRow_2", System.currentTimeMillis());
    tFileInputDelimited_1_onSubJobError(exception, globalMap);
  }

  public void tFileInputDelimited_1_onSubJobError(Exception exception,
      final java.util.Map<String, Object> globalMap) throws TalendException {
  }

  static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String TransactionalOrganization;
    String Name;
    String Description;
    String MovementDate;
    String Warehouse;
    String WarehouseName;
    String WarehouseDescription;
    String Warehouse1stLine;
    String Warehouse2ndLine;
    String WarehousePostalCode;
    String WarehouseCity;
    String WarehouseRegion;
    String WarehouseCountry;
    String WarehouseBinSeparator;
    String Bin;
    String BinIsDefault;
    String BinPriority;
    String BinRowX;
    String BinStackY;
    String BinLevelZ;
    String Product;
    String AttributeValue;
    String Quantity;
    String Cost;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TransactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TransactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MovementDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MovementDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehousePostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehousePostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCountry = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCountry = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseBinSeparator = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseBinSeparator = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Bin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Bin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinIsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinIsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinPriority = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinPriority = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinRowX = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinRowX = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinStackY = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinStackY = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinLevelZ = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinLevelZ = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Cost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Cost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TransactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TransactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MovementDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MovementDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehousePostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehousePostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCountry == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCountry.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseBinSeparator == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseBinSeparator.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Bin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Bin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinIsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinIsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinPriority == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinPriority.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinRowX == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinRowX.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinStackY == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinStackY.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinLevelZ == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinLevelZ.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Cost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Cost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("TransactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.TransactionalOrganization));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("MovementDate");
      sb.append("=");
      sb.append(String.valueOf(this.MovementDate));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("WarehouseName");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseName));

      sb.append(", ");

      sb.append("WarehouseDescription");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseDescription));

      sb.append(", ");

      sb.append("Warehouse1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse1stLine));

      sb.append(", ");

      sb.append("Warehouse2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse2ndLine));

      sb.append(", ");

      sb.append("WarehousePostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.WarehousePostalCode));

      sb.append(", ");

      sb.append("WarehouseCity");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCity));

      sb.append(", ");

      sb.append("WarehouseRegion");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseRegion));

      sb.append(", ");

      sb.append("WarehouseCountry");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCountry));

      sb.append(", ");

      sb.append("WarehouseBinSeparator");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseBinSeparator));

      sb.append(", ");

      sb.append("Bin");
      sb.append("=");
      sb.append(String.valueOf(this.Bin));

      sb.append(", ");

      sb.append("BinIsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.BinIsDefault));

      sb.append(", ");

      sb.append("BinPriority");
      sb.append("=");
      sb.append(String.valueOf(this.BinPriority));

      sb.append(", ");

      sb.append("BinRowX");
      sb.append("=");
      sb.append(String.valueOf(this.BinRowX));

      sb.append(", ");

      sb.append("BinStackY");
      sb.append("=");
      sb.append(String.valueOf(this.BinStackY));

      sb.append(", ");

      sb.append("BinLevelZ");
      sb.append("=");
      sb.append(String.valueOf(this.BinLevelZ));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("AttributeValue");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeValue));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("Cost");
      sb.append("=");
      sb.append(String.valueOf(this.Cost));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String TransactionalOrganization;
    String Name;
    String Description;
    String MovementDate;
    String Warehouse;
    String WarehouseName;
    String WarehouseDescription;
    String Warehouse1stLine;
    String Warehouse2ndLine;
    String WarehousePostalCode;
    String WarehouseCity;
    String WarehouseRegion;
    String WarehouseCountry;
    String WarehouseBinSeparator;
    String Bin;
    String BinIsDefault;
    String BinPriority;
    String BinRowX;
    String BinStackY;
    String BinLevelZ;
    String Product;
    String AttributeValue;
    String Quantity;
    String Cost;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TransactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TransactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MovementDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MovementDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehousePostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehousePostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCountry = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCountry = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseBinSeparator = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseBinSeparator = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Bin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Bin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinIsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinIsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinPriority = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinPriority = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinRowX = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinRowX = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinStackY = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinStackY = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinLevelZ = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinLevelZ = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Cost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Cost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TransactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TransactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MovementDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MovementDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehousePostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehousePostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCountry == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCountry.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseBinSeparator == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseBinSeparator.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Bin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Bin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinIsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinIsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinPriority == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinPriority.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinRowX == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinRowX.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinStackY == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinStackY.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinLevelZ == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinLevelZ.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Cost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Cost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("TransactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.TransactionalOrganization));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("MovementDate");
      sb.append("=");
      sb.append(String.valueOf(this.MovementDate));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("WarehouseName");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseName));

      sb.append(", ");

      sb.append("WarehouseDescription");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseDescription));

      sb.append(", ");

      sb.append("Warehouse1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse1stLine));

      sb.append(", ");

      sb.append("Warehouse2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse2ndLine));

      sb.append(", ");

      sb.append("WarehousePostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.WarehousePostalCode));

      sb.append(", ");

      sb.append("WarehouseCity");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCity));

      sb.append(", ");

      sb.append("WarehouseRegion");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseRegion));

      sb.append(", ");

      sb.append("WarehouseCountry");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCountry));

      sb.append(", ");

      sb.append("WarehouseBinSeparator");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseBinSeparator));

      sb.append(", ");

      sb.append("Bin");
      sb.append("=");
      sb.append(String.valueOf(this.Bin));

      sb.append(", ");

      sb.append("BinIsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.BinIsDefault));

      sb.append(", ");

      sb.append("BinPriority");
      sb.append("=");
      sb.append(String.valueOf(this.BinPriority));

      sb.append(", ");

      sb.append("BinRowX");
      sb.append("=");
      sb.append(String.valueOf(this.BinRowX));

      sb.append(", ");

      sb.append("BinStackY");
      sb.append("=");
      sb.append(String.valueOf(this.BinStackY));

      sb.append(", ");

      sb.append("BinLevelZ");
      sb.append("=");
      sb.append(String.valueOf(this.BinLevelZ));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("AttributeValue");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeValue));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("Cost");
      sb.append("=");
      sb.append(String.valueOf(this.Cost));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String TransactionalOrganization;
    String Name;
    String Description;
    String MovementDate;
    String Warehouse;
    String WarehouseName;
    String WarehouseDescription;
    String Warehouse1stLine;
    String Warehouse2ndLine;
    String WarehousePostalCode;
    String WarehouseCity;
    String WarehouseRegion;
    String WarehouseCountry;
    String WarehouseBinSeparator;
    String Bin;
    String BinIsDefault;
    String BinPriority;
    String BinRowX;
    String BinStackY;
    String BinLevelZ;
    String Product;
    String AttributeValue;
    String Quantity;
    String Cost;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TransactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TransactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MovementDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MovementDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehousePostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehousePostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCountry = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCountry = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseBinSeparator = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseBinSeparator = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Bin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Bin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinIsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinIsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinPriority = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinPriority = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinRowX = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinRowX = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinStackY = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinStackY = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinLevelZ = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinLevelZ = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Cost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Cost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TransactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TransactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MovementDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MovementDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehousePostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehousePostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCountry == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCountry.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseBinSeparator == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseBinSeparator.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Bin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Bin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinIsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinIsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinPriority == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinPriority.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinRowX == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinRowX.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinStackY == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinStackY.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinLevelZ == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinLevelZ.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Cost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Cost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("TransactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.TransactionalOrganization));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("MovementDate");
      sb.append("=");
      sb.append(String.valueOf(this.MovementDate));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("WarehouseName");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseName));

      sb.append(", ");

      sb.append("WarehouseDescription");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseDescription));

      sb.append(", ");

      sb.append("Warehouse1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse1stLine));

      sb.append(", ");

      sb.append("Warehouse2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse2ndLine));

      sb.append(", ");

      sb.append("WarehousePostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.WarehousePostalCode));

      sb.append(", ");

      sb.append("WarehouseCity");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCity));

      sb.append(", ");

      sb.append("WarehouseRegion");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseRegion));

      sb.append(", ");

      sb.append("WarehouseCountry");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCountry));

      sb.append(", ");

      sb.append("WarehouseBinSeparator");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseBinSeparator));

      sb.append(", ");

      sb.append("Bin");
      sb.append("=");
      sb.append(String.valueOf(this.Bin));

      sb.append(", ");

      sb.append("BinIsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.BinIsDefault));

      sb.append(", ");

      sb.append("BinPriority");
      sb.append("=");
      sb.append(String.valueOf(this.BinPriority));

      sb.append(", ");

      sb.append("BinRowX");
      sb.append("=");
      sb.append(String.valueOf(this.BinRowX));

      sb.append(", ");

      sb.append("BinStackY");
      sb.append("=");
      sb.append(String.valueOf(this.BinStackY));

      sb.append(", ");

      sb.append("BinLevelZ");
      sb.append("=");
      sb.append(String.valueOf(this.BinLevelZ));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("AttributeValue");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeValue));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("Cost");
      sb.append("=");
      sb.append(String.valueOf(this.Cost));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String TransactionalOrganization;
    String Name;
    String Description;
    String MovementDate;
    String Warehouse;
    String WarehouseName;
    String WarehouseDescription;
    String Warehouse1stLine;
    String Warehouse2ndLine;
    String WarehousePostalCode;
    String WarehouseCity;
    String WarehouseRegion;
    String WarehouseCountry;
    String WarehouseBinSeparator;
    String Bin;
    String BinIsDefault;
    String BinPriority;
    String BinRowX;
    String BinStackY;
    String BinLevelZ;
    String Product;
    String AttributeValue;
    String Quantity;
    String Cost;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TransactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TransactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MovementDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MovementDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehousePostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehousePostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCountry = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCountry = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseBinSeparator = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseBinSeparator = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Bin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Bin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinIsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinIsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinPriority = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinPriority = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinRowX = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinRowX = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinStackY = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinStackY = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinLevelZ = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinLevelZ = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Cost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Cost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TransactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TransactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MovementDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MovementDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehousePostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehousePostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCountry == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCountry.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseBinSeparator == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseBinSeparator.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Bin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Bin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinIsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinIsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinPriority == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinPriority.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinRowX == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinRowX.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinStackY == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinStackY.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinLevelZ == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinLevelZ.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Cost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Cost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("TransactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.TransactionalOrganization));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("MovementDate");
      sb.append("=");
      sb.append(String.valueOf(this.MovementDate));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("WarehouseName");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseName));

      sb.append(", ");

      sb.append("WarehouseDescription");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseDescription));

      sb.append(", ");

      sb.append("Warehouse1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse1stLine));

      sb.append(", ");

      sb.append("Warehouse2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse2ndLine));

      sb.append(", ");

      sb.append("WarehousePostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.WarehousePostalCode));

      sb.append(", ");

      sb.append("WarehouseCity");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCity));

      sb.append(", ");

      sb.append("WarehouseRegion");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseRegion));

      sb.append(", ");

      sb.append("WarehouseCountry");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCountry));

      sb.append(", ");

      sb.append("WarehouseBinSeparator");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseBinSeparator));

      sb.append(", ");

      sb.append("Bin");
      sb.append("=");
      sb.append(String.valueOf(this.Bin));

      sb.append(", ");

      sb.append("BinIsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.BinIsDefault));

      sb.append(", ");

      sb.append("BinPriority");
      sb.append("=");
      sb.append(String.valueOf(this.BinPriority));

      sb.append(", ");

      sb.append("BinRowX");
      sb.append("=");
      sb.append(String.valueOf(this.BinRowX));

      sb.append(", ");

      sb.append("BinStackY");
      sb.append("=");
      sb.append(String.valueOf(this.BinStackY));

      sb.append(", ");

      sb.append("BinLevelZ");
      sb.append("=");
      sb.append(String.valueOf(this.BinLevelZ));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("AttributeValue");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeValue));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("Cost");
      sb.append("=");
      sb.append(String.valueOf(this.Cost));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String TransactionalOrganization;
    String Name;
    String Description;
    String MovementDate;
    String Warehouse;
    String WarehouseName;
    String WarehouseDescription;
    String Warehouse1stLine;
    String Warehouse2ndLine;
    String WarehousePostalCode;
    String WarehouseCity;
    String WarehouseRegion;
    String WarehouseCountry;
    String WarehouseBinSeparator;
    String Bin;
    String BinIsDefault;
    String BinPriority;
    String BinRowX;
    String BinStackY;
    String BinLevelZ;
    String Product;
    String AttributeValue;
    String Quantity;
    String Cost;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TransactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TransactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MovementDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MovementDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehousePostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehousePostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCountry = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCountry = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseBinSeparator = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseBinSeparator = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Bin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Bin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinIsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinIsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinPriority = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinPriority = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinRowX = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinRowX = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinStackY = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinStackY = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinLevelZ = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinLevelZ = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Cost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Cost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TransactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TransactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MovementDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MovementDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehousePostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehousePostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCountry == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCountry.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseBinSeparator == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseBinSeparator.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Bin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Bin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinIsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinIsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinPriority == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinPriority.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinRowX == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinRowX.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinStackY == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinStackY.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinLevelZ == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinLevelZ.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Cost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Cost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("TransactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.TransactionalOrganization));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("MovementDate");
      sb.append("=");
      sb.append(String.valueOf(this.MovementDate));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("WarehouseName");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseName));

      sb.append(", ");

      sb.append("WarehouseDescription");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseDescription));

      sb.append(", ");

      sb.append("Warehouse1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse1stLine));

      sb.append(", ");

      sb.append("Warehouse2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse2ndLine));

      sb.append(", ");

      sb.append("WarehousePostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.WarehousePostalCode));

      sb.append(", ");

      sb.append("WarehouseCity");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCity));

      sb.append(", ");

      sb.append("WarehouseRegion");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseRegion));

      sb.append(", ");

      sb.append("WarehouseCountry");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCountry));

      sb.append(", ");

      sb.append("WarehouseBinSeparator");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseBinSeparator));

      sb.append(", ");

      sb.append("Bin");
      sb.append("=");
      sb.append(String.valueOf(this.Bin));

      sb.append(", ");

      sb.append("BinIsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.BinIsDefault));

      sb.append(", ");

      sb.append("BinPriority");
      sb.append("=");
      sb.append(String.valueOf(this.BinPriority));

      sb.append(", ");

      sb.append("BinRowX");
      sb.append("=");
      sb.append(String.valueOf(this.BinRowX));

      sb.append(", ");

      sb.append("BinStackY");
      sb.append("=");
      sb.append(String.valueOf(this.BinStackY));

      sb.append(", ");

      sb.append("BinLevelZ");
      sb.append("=");
      sb.append(String.valueOf(this.BinLevelZ));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("AttributeValue");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeValue));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("Cost");
      sb.append("=");
      sb.append(String.valueOf(this.Cost));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String TransactionalOrganization;
    String Name;
    String Description;
    String MovementDate;
    String Warehouse;
    String WarehouseName;
    String WarehouseDescription;
    String Warehouse1stLine;
    String Warehouse2ndLine;
    String WarehousePostalCode;
    String WarehouseCity;
    String WarehouseRegion;
    String WarehouseCountry;
    String WarehouseBinSeparator;
    String Bin;
    String BinIsDefault;
    String BinPriority;
    String BinRowX;
    String BinStackY;
    String BinLevelZ;
    String Product;
    String AttributeValue;
    String Quantity;
    String Cost;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TransactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TransactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MovementDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MovementDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehousePostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehousePostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCountry = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCountry = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseBinSeparator = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseBinSeparator = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Bin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Bin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinIsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinIsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinPriority = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinPriority = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinRowX = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinRowX = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinStackY = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinStackY = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinLevelZ = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinLevelZ = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Cost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Cost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TransactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TransactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MovementDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MovementDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehousePostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehousePostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCountry == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCountry.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseBinSeparator == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseBinSeparator.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Bin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Bin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinIsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinIsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinPriority == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinPriority.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinRowX == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinRowX.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinStackY == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinStackY.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinLevelZ == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinLevelZ.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Cost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Cost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("TransactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.TransactionalOrganization));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("MovementDate");
      sb.append("=");
      sb.append(String.valueOf(this.MovementDate));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("WarehouseName");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseName));

      sb.append(", ");

      sb.append("WarehouseDescription");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseDescription));

      sb.append(", ");

      sb.append("Warehouse1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse1stLine));

      sb.append(", ");

      sb.append("Warehouse2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse2ndLine));

      sb.append(", ");

      sb.append("WarehousePostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.WarehousePostalCode));

      sb.append(", ");

      sb.append("WarehouseCity");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCity));

      sb.append(", ");

      sb.append("WarehouseRegion");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseRegion));

      sb.append(", ");

      sb.append("WarehouseCountry");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCountry));

      sb.append(", ");

      sb.append("WarehouseBinSeparator");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseBinSeparator));

      sb.append(", ");

      sb.append("Bin");
      sb.append("=");
      sb.append(String.valueOf(this.Bin));

      sb.append(", ");

      sb.append("BinIsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.BinIsDefault));

      sb.append(", ");

      sb.append("BinPriority");
      sb.append("=");
      sb.append(String.valueOf(this.BinPriority));

      sb.append(", ");

      sb.append("BinRowX");
      sb.append("=");
      sb.append(String.valueOf(this.BinRowX));

      sb.append(", ");

      sb.append("BinStackY");
      sb.append("=");
      sb.append(String.valueOf(this.BinStackY));

      sb.append(", ");

      sb.append("BinLevelZ");
      sb.append("=");
      sb.append(String.valueOf(this.BinLevelZ));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("AttributeValue");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeValue));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("Cost");
      sb.append("=");
      sb.append(String.valueOf(this.Cost));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String TransactionalOrganization;
    String Name;
    String Description;
    String MovementDate;
    String Warehouse;
    String WarehouseName;
    String WarehouseDescription;
    String Warehouse1stLine;
    String Warehouse2ndLine;
    String WarehousePostalCode;
    String WarehouseCity;
    String WarehouseRegion;
    String WarehouseCountry;
    String WarehouseBinSeparator;
    String Bin;
    String BinIsDefault;
    String BinPriority;
    String BinRowX;
    String BinStackY;
    String BinLevelZ;
    String Product;
    String AttributeValue;
    String Quantity;
    String Cost;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TransactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TransactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MovementDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MovementDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehousePostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehousePostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCountry = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCountry = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseBinSeparator = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseBinSeparator = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Bin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Bin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinIsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinIsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinPriority = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinPriority = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinRowX = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinRowX = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinStackY = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinStackY = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinLevelZ = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinLevelZ = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Cost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Cost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TransactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TransactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MovementDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MovementDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehousePostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehousePostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCountry == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCountry.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseBinSeparator == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseBinSeparator.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Bin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Bin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinIsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinIsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinPriority == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinPriority.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinRowX == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinRowX.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinStackY == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinStackY.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinLevelZ == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinLevelZ.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Cost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Cost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("TransactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.TransactionalOrganization));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("MovementDate");
      sb.append("=");
      sb.append(String.valueOf(this.MovementDate));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("WarehouseName");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseName));

      sb.append(", ");

      sb.append("WarehouseDescription");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseDescription));

      sb.append(", ");

      sb.append("Warehouse1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse1stLine));

      sb.append(", ");

      sb.append("Warehouse2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse2ndLine));

      sb.append(", ");

      sb.append("WarehousePostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.WarehousePostalCode));

      sb.append(", ");

      sb.append("WarehouseCity");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCity));

      sb.append(", ");

      sb.append("WarehouseRegion");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseRegion));

      sb.append(", ");

      sb.append("WarehouseCountry");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCountry));

      sb.append(", ");

      sb.append("WarehouseBinSeparator");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseBinSeparator));

      sb.append(", ");

      sb.append("Bin");
      sb.append("=");
      sb.append(String.valueOf(this.Bin));

      sb.append(", ");

      sb.append("BinIsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.BinIsDefault));

      sb.append(", ");

      sb.append("BinPriority");
      sb.append("=");
      sb.append(String.valueOf(this.BinPriority));

      sb.append(", ");

      sb.append("BinRowX");
      sb.append("=");
      sb.append(String.valueOf(this.BinRowX));

      sb.append(", ");

      sb.append("BinStackY");
      sb.append("=");
      sb.append(String.valueOf(this.BinStackY));

      sb.append(", ");

      sb.append("BinLevelZ");
      sb.append("=");
      sb.append(String.valueOf(this.BinLevelZ));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("AttributeValue");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeValue));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("Cost");
      sb.append("=");
      sb.append(String.valueOf(this.Cost));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String TransactionalOrganization;
    String Name;
    String Description;
    String MovementDate;
    String Warehouse;
    String WarehouseName;
    String WarehouseDescription;
    String Warehouse1stLine;
    String Warehouse2ndLine;
    String WarehousePostalCode;
    String WarehouseCity;
    String WarehouseRegion;
    String WarehouseCountry;
    String WarehouseBinSeparator;
    String Bin;
    String BinIsDefault;
    String BinPriority;
    String BinRowX;
    String BinStackY;
    String BinLevelZ;
    String Product;
    String AttributeValue;
    String Quantity;
    String Cost;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TransactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TransactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MovementDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MovementDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehousePostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehousePostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCountry = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCountry = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseBinSeparator = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseBinSeparator = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Bin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Bin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinIsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinIsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinPriority = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinPriority = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinRowX = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinRowX = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinStackY = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinStackY = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinLevelZ = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinLevelZ = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Cost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Cost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TransactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TransactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MovementDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MovementDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehousePostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehousePostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCountry == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCountry.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseBinSeparator == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseBinSeparator.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Bin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Bin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinIsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinIsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinPriority == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinPriority.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinRowX == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinRowX.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinStackY == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinStackY.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinLevelZ == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinLevelZ.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Cost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Cost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("TransactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.TransactionalOrganization));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("MovementDate");
      sb.append("=");
      sb.append(String.valueOf(this.MovementDate));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("WarehouseName");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseName));

      sb.append(", ");

      sb.append("WarehouseDescription");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseDescription));

      sb.append(", ");

      sb.append("Warehouse1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse1stLine));

      sb.append(", ");

      sb.append("Warehouse2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse2ndLine));

      sb.append(", ");

      sb.append("WarehousePostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.WarehousePostalCode));

      sb.append(", ");

      sb.append("WarehouseCity");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCity));

      sb.append(", ");

      sb.append("WarehouseRegion");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseRegion));

      sb.append(", ");

      sb.append("WarehouseCountry");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCountry));

      sb.append(", ");

      sb.append("WarehouseBinSeparator");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseBinSeparator));

      sb.append(", ");

      sb.append("Bin");
      sb.append("=");
      sb.append(String.valueOf(this.Bin));

      sb.append(", ");

      sb.append("BinIsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.BinIsDefault));

      sb.append(", ");

      sb.append("BinPriority");
      sb.append("=");
      sb.append(String.valueOf(this.BinPriority));

      sb.append(", ");

      sb.append("BinRowX");
      sb.append("=");
      sb.append(String.valueOf(this.BinRowX));

      sb.append(", ");

      sb.append("BinStackY");
      sb.append("=");
      sb.append(String.valueOf(this.BinStackY));

      sb.append(", ");

      sb.append("BinLevelZ");
      sb.append("=");
      sb.append(String.valueOf(this.BinLevelZ));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("AttributeValue");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeValue));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("Cost");
      sb.append("=");
      sb.append(String.valueOf(this.Cost));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String TransactionalOrganization;
    String Name;
    String Description;
    String MovementDate;
    String Warehouse;
    String WarehouseName;
    String WarehouseDescription;
    String Warehouse1stLine;
    String Warehouse2ndLine;
    String WarehousePostalCode;
    String WarehouseCity;
    String WarehouseRegion;
    String WarehouseCountry;
    String WarehouseBinSeparator;
    String Bin;
    String BinIsDefault;
    String BinPriority;
    String BinRowX;
    String BinStackY;
    String BinLevelZ;
    String Product;
    String AttributeValue;
    String Quantity;
    String Cost;
    String flag;
    String whyError;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TransactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TransactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MovementDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MovementDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehousePostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehousePostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCountry = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCountry = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseBinSeparator = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseBinSeparator = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Bin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Bin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinIsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinIsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinPriority = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinPriority = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinRowX = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinRowX = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinStackY = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinStackY = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinLevelZ = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinLevelZ = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Cost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Cost = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.flag = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.flag = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.whyError = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.whyError = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TransactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TransactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MovementDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MovementDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehousePostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehousePostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCountry == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCountry.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseBinSeparator == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseBinSeparator.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Bin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Bin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinIsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinIsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinPriority == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinPriority.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinRowX == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinRowX.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinStackY == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinStackY.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinLevelZ == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinLevelZ.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Cost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Cost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.flag == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.flag.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.whyError == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.whyError.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("TransactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.TransactionalOrganization));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("MovementDate");
      sb.append("=");
      sb.append(String.valueOf(this.MovementDate));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("WarehouseName");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseName));

      sb.append(", ");

      sb.append("WarehouseDescription");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseDescription));

      sb.append(", ");

      sb.append("Warehouse1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse1stLine));

      sb.append(", ");

      sb.append("Warehouse2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse2ndLine));

      sb.append(", ");

      sb.append("WarehousePostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.WarehousePostalCode));

      sb.append(", ");

      sb.append("WarehouseCity");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCity));

      sb.append(", ");

      sb.append("WarehouseRegion");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseRegion));

      sb.append(", ");

      sb.append("WarehouseCountry");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCountry));

      sb.append(", ");

      sb.append("WarehouseBinSeparator");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseBinSeparator));

      sb.append(", ");

      sb.append("Bin");
      sb.append("=");
      sb.append(String.valueOf(this.Bin));

      sb.append(", ");

      sb.append("BinIsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.BinIsDefault));

      sb.append(", ");

      sb.append("BinPriority");
      sb.append("=");
      sb.append(String.valueOf(this.BinPriority));

      sb.append(", ");

      sb.append("BinRowX");
      sb.append("=");
      sb.append(String.valueOf(this.BinRowX));

      sb.append(", ");

      sb.append("BinStackY");
      sb.append("=");
      sb.append(String.valueOf(this.BinStackY));

      sb.append(", ");

      sb.append("BinLevelZ");
      sb.append("=");
      sb.append(String.valueOf(this.BinLevelZ));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("AttributeValue");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeValue));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("Cost");
      sb.append("=");
      sb.append(String.valueOf(this.Cost));

      sb.append(", ");

      sb.append("flag");
      sb.append("=");
      sb.append(String.valueOf(this.flag));

      sb.append(", ");

      sb.append("whyError");
      sb.append("=");
      sb.append(String.valueOf(this.whyError));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock = new byte[0];
    static byte[] commonByteArray = new byte[0];

    String Organization;
    String TransactionalOrganization;
    String Name;
    String Description;
    String MovementDate;
    String Warehouse;
    String WarehouseName;
    String WarehouseDescription;
    String Warehouse1stLine;
    String Warehouse2ndLine;
    String WarehousePostalCode;
    String WarehouseCity;
    String WarehouseRegion;
    String WarehouseCountry;
    String WarehouseBinSeparator;
    String Bin;
    String BinIsDefault;
    String BinPriority;
    String BinRowX;
    String BinStackY;
    String BinLevelZ;
    String Product;
    String AttributeValue;
    String Quantity;
    String Cost;

    public void readData(ObjectInputStream dis) {

      synchronized (commonByteArrayLock) {

        try {

          int length = 0;

          length = dis.readInt();
          if (length == -1) {
            this.Organization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Organization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.TransactionalOrganization = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.TransactionalOrganization = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Name = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Name = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Description = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Description = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.MovementDate = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.MovementDate = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseName = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseName = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseDescription = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseDescription = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse1stLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse1stLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Warehouse2ndLine = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Warehouse2ndLine = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehousePostalCode = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehousePostalCode = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseRegion = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseRegion = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseCountry = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseCountry = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.WarehouseBinSeparator = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.WarehouseBinSeparator = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Bin = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Bin = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinIsDefault = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinIsDefault = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinPriority = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinPriority = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinRowX = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinRowX = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinStackY = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinStackY = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.BinLevelZ = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.BinLevelZ = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Product = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Product = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.AttributeValue = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.AttributeValue = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Quantity = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Quantity = new String(commonByteArray, 0, length);
          }

          length = dis.readInt();
          if (length == -1) {
            this.Cost = null;
          } else {
            if (length > commonByteArray.length) {
              if (length < 1024 && commonByteArray.length == 0) {
                commonByteArray = new byte[1024];
              } else {
                commonByteArray = new byte[2 * length];
              }
            }
            dis.readFully(commonByteArray, 0, length);
            this.Cost = new String(commonByteArray, 0, length);
          }

        } catch (IOException e) {
          throw new RuntimeException(e);

        }

      }

    }

    public void writeData(ObjectOutputStream dos) {
      try {

        // String

        if (this.Organization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Organization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.TransactionalOrganization == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.TransactionalOrganization.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Name == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Name.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Description == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Description.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.MovementDate == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.MovementDate.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseName == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseName.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseDescription == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseDescription.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse1stLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse1stLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Warehouse2ndLine == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Warehouse2ndLine.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehousePostalCode == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehousePostalCode.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseRegion == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseRegion.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseCountry == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseCountry.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.WarehouseBinSeparator == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.WarehouseBinSeparator.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Bin == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Bin.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinIsDefault == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinIsDefault.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinPriority == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinPriority.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinRowX == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinRowX.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinStackY == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinStackY.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.BinLevelZ == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.BinLevelZ.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Product == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Product.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.AttributeValue == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.AttributeValue.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Quantity == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Quantity.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

        // String

        if (this.Cost == null) {
          dos.writeInt(-1);
        } else {
          byte[] byteArray = this.Cost.getBytes();
          dos.writeInt(byteArray.length);
          dos.write(byteArray);
        }

      } catch (IOException e) {
        throw new RuntimeException(e);
      }

    }

    public String toString() {

      StringBuilder sb = new StringBuilder();
      sb.append(super.toString());
      sb.append("[");

      sb.append("Organization");
      sb.append("=");
      sb.append(String.valueOf(this.Organization));

      sb.append(", ");

      sb.append("TransactionalOrganization");
      sb.append("=");
      sb.append(String.valueOf(this.TransactionalOrganization));

      sb.append(", ");

      sb.append("Name");
      sb.append("=");
      sb.append(String.valueOf(this.Name));

      sb.append(", ");

      sb.append("Description");
      sb.append("=");
      sb.append(String.valueOf(this.Description));

      sb.append(", ");

      sb.append("MovementDate");
      sb.append("=");
      sb.append(String.valueOf(this.MovementDate));

      sb.append(", ");

      sb.append("Warehouse");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse));

      sb.append(", ");

      sb.append("WarehouseName");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseName));

      sb.append(", ");

      sb.append("WarehouseDescription");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseDescription));

      sb.append(", ");

      sb.append("Warehouse1stLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse1stLine));

      sb.append(", ");

      sb.append("Warehouse2ndLine");
      sb.append("=");
      sb.append(String.valueOf(this.Warehouse2ndLine));

      sb.append(", ");

      sb.append("WarehousePostalCode");
      sb.append("=");
      sb.append(String.valueOf(this.WarehousePostalCode));

      sb.append(", ");

      sb.append("WarehouseCity");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCity));

      sb.append(", ");

      sb.append("WarehouseRegion");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseRegion));

      sb.append(", ");

      sb.append("WarehouseCountry");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseCountry));

      sb.append(", ");

      sb.append("WarehouseBinSeparator");
      sb.append("=");
      sb.append(String.valueOf(this.WarehouseBinSeparator));

      sb.append(", ");

      sb.append("Bin");
      sb.append("=");
      sb.append(String.valueOf(this.Bin));

      sb.append(", ");

      sb.append("BinIsDefault");
      sb.append("=");
      sb.append(String.valueOf(this.BinIsDefault));

      sb.append(", ");

      sb.append("BinPriority");
      sb.append("=");
      sb.append(String.valueOf(this.BinPriority));

      sb.append(", ");

      sb.append("BinRowX");
      sb.append("=");
      sb.append(String.valueOf(this.BinRowX));

      sb.append(", ");

      sb.append("BinStackY");
      sb.append("=");
      sb.append(String.valueOf(this.BinStackY));

      sb.append(", ");

      sb.append("BinLevelZ");
      sb.append("=");
      sb.append(String.valueOf(this.BinLevelZ));

      sb.append(", ");

      sb.append("Product");
      sb.append("=");
      sb.append(String.valueOf(this.Product));

      sb.append(", ");

      sb.append("AttributeValue");
      sb.append("=");
      sb.append(String.valueOf(this.AttributeValue));

      sb.append(", ");

      sb.append("Quantity");
      sb.append("=");
      sb.append(String.valueOf(this.Quantity));

      sb.append(", ");

      sb.append("Cost");
      sb.append("=");
      sb.append(String.valueOf(this.Cost));

      sb.append("]");

      return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

      int returnValue = -1;

      return returnValue;
    }

  }

  public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap)
      throws TalendException {
    globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

    String currentComponent = "";

    try {

      row1Struct row1 = new row1Struct();
      row2Struct row2 = new row2Struct();
      row4Struct row4 = new row4Struct();
      row7Struct row7 = new row7Struct();
      row9Struct row9 = new row9Struct();
      row10Struct row10 = new row10Struct();
      row12Struct row12 = new row12Struct();
      row11Struct row11 = new row11Struct();
      row8Struct row8 = new row8Struct();
      row3Struct row3 = new row3Struct();

      /**
       * [tJavaRow_3 begin ] start
       */

      ok_Hash.put("tJavaRow_3", false);
      start_Hash.put("tJavaRow_3", System.currentTimeMillis());
      currentComponent = "tJavaRow_3";

      int nb_line_tJavaRow_3 = 0;

      /**
       * [tJavaRow_3 begin ] stop
       */

      /**
       * [tJavaRow_8 begin ] start
       */

      ok_Hash.put("tJavaRow_8", false);
      start_Hash.put("tJavaRow_8", System.currentTimeMillis());
      currentComponent = "tJavaRow_8";

      int nb_line_tJavaRow_8 = 0;

      /**
       * [tJavaRow_8 begin ] stop
       */

      /**
       * [tFilterRow_3 begin ] start
       */

      ok_Hash.put("tFilterRow_3", false);
      start_Hash.put("tFilterRow_3", System.currentTimeMillis());
      currentComponent = "tFilterRow_3";

      int nb_line_tFilterRow_3 = 0;
      int nb_line_ok_tFilterRow_3 = 0;
      int nb_line_reject_tFilterRow_3 = 0;

      /**
       * [tFilterRow_3 begin ] stop
       */

      /**
       * [tJavaRow_7 begin ] start
       */

      ok_Hash.put("tJavaRow_7", false);
      start_Hash.put("tJavaRow_7", System.currentTimeMillis());
      currentComponent = "tJavaRow_7";

      int nb_line_tJavaRow_7 = 0;

      /**
       * [tJavaRow_7 begin ] stop
       */

      /**
       * [tJavaRow_6 begin ] start
       */

      ok_Hash.put("tJavaRow_6", false);
      start_Hash.put("tJavaRow_6", System.currentTimeMillis());
      currentComponent = "tJavaRow_6";

      int nb_line_tJavaRow_6 = 0;

      /**
       * [tJavaRow_6 begin ] stop
       */

      /**
       * [tFilterRow_2 begin ] start
       */

      ok_Hash.put("tFilterRow_2", false);
      start_Hash.put("tFilterRow_2", System.currentTimeMillis());
      currentComponent = "tFilterRow_2";

      int nb_line_tFilterRow_2 = 0;
      int nb_line_ok_tFilterRow_2 = 0;
      int nb_line_reject_tFilterRow_2 = 0;

      /**
       * [tFilterRow_2 begin ] stop
       */

      /**
       * [tJavaRow_5 begin ] start
       */

      ok_Hash.put("tJavaRow_5", false);
      start_Hash.put("tJavaRow_5", System.currentTimeMillis());
      currentComponent = "tJavaRow_5";

      int nb_line_tJavaRow_5 = 0;

      /**
       * [tJavaRow_5 begin ] stop
       */

      /**
       * [tJavaRow_2 begin ] start
       */

      ok_Hash.put("tJavaRow_2", false);
      start_Hash.put("tJavaRow_2", System.currentTimeMillis());
      currentComponent = "tJavaRow_2";

      int nb_line_tJavaRow_2 = 0;

      /**
       * [tJavaRow_2 begin ] stop
       */

      /**
       * [tFilterRow_1 begin ] start
       */

      ok_Hash.put("tFilterRow_1", false);
      start_Hash.put("tFilterRow_1", System.currentTimeMillis());
      currentComponent = "tFilterRow_1";

      int nb_line_tFilterRow_1 = 0;
      int nb_line_ok_tFilterRow_1 = 0;
      int nb_line_reject_tFilterRow_1 = 0;

      /**
       * [tFilterRow_1 begin ] stop
       */

      /**
       * [tJavaRow_1 begin ] start
       */

      ok_Hash.put("tJavaRow_1", false);
      start_Hash.put("tJavaRow_1", System.currentTimeMillis());
      currentComponent = "tJavaRow_1";

      int nb_line_tJavaRow_1 = 0;

      /**
       * [tJavaRow_1 begin ] stop
       */

      /**
       * [tFileInputDelimited_1 begin ] start
       */

      ok_Hash.put("tFileInputDelimited_1", false);
      start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
      currentComponent = "tFileInputDelimited_1";

      int nb_line_tFileInputDelimited_1 = 0;
      int footer_tFileInputDelimited_1 = 0;
      int totalLinetFileInputDelimited_1 = 0;
      int limittFileInputDelimited_1 = -1;
      int lastLinetFileInputDelimited_1 = -1;

      char fieldSeparator_tFileInputDelimited_1[] = null;

      // support passing value (property: Field Separator) by 'context.fs'
      // or 'globalMap.get("fs")'.
      if (((String) ",").length() > 0) {
        fieldSeparator_tFileInputDelimited_1 = ((String) ",").toCharArray();
      } else {
        throw new IllegalArgumentException("Field Separator must be assigned a char.");
      }

      char rowSeparator_tFileInputDelimited_1[] = null;

      // support passing value (property: Row Separator) by 'context.rs'
      // or 'globalMap.get("rs")'.
      if (((String) "\n").length() > 0) {
        rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
      } else {
        throw new IllegalArgumentException("Row Separator must be assigned a char.");
      }

      com.csvreader.CsvReader csvReadertFileInputDelimited_1 = new com.csvreader.CsvReader(
          new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(/**
           * 
           * Start field tFileInputDelimited_1:FILENAME
           */
          context.getProperty("filename")/**
           * End field tFileInputDelimited_1:FILENAME
           */
          ), "UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);

      if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
          && (rowSeparator_tFileInputDelimited_1[0] != '\r'))
        csvReadertFileInputDelimited_1.setRecordDelimiter(rowSeparator_tFileInputDelimited_1[0]);

      csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
      csvReadertFileInputDelimited_1.setTextQualifier('"');

      csvReadertFileInputDelimited_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      String[] rowtFileInputDelimited_1 = null;

      if (footer_tFileInputDelimited_1 > 0) {

        while (csvReadertFileInputDelimited_1.readRecord()) {
          rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();
          if (!(rowtFileInputDelimited_1.length == 1 && ("\015")
              .equals(rowtFileInputDelimited_1[0]))) {// empty
            // line when
            // row
            // separator
            // is '\n'

            totalLinetFileInputDelimited_1++;

          }

        }
        int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
            - footer_tFileInputDelimited_1 < 0 ? 0 : totalLinetFileInputDelimited_1
            - footer_tFileInputDelimited_1;
        if (lastLinetFileInputDelimited_1 > 0) {
          lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1
              : lastLineTemptFileInputDelimited_1;
        } else {
          lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
        }

        csvReadertFileInputDelimited_1.close();

        csvReadertFileInputDelimited_1 = new com.csvreader.CsvReader(new java.io.BufferedReader(
            new java.io.InputStreamReader(new java.io.FileInputStream(/**
             * Start field
             * tFileInputDelimited_1:FILENAME
             */
            context.getProperty("filename")/**
             * End field tFileInputDelimited_1:FILENAME
             */
            ), "UTF-8")), fieldSeparator_tFileInputDelimited_1[0]);

        if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
            && (rowSeparator_tFileInputDelimited_1[0] != '\r'))
          csvReadertFileInputDelimited_1.setRecordDelimiter(rowSeparator_tFileInputDelimited_1[0]);
        csvReadertFileInputDelimited_1.setSkipEmptyRecords(true);
        csvReadertFileInputDelimited_1.setTextQualifier('"');
        csvReadertFileInputDelimited_1.setEscapeMode(com.csvreader.CsvReader.ESCAPE_MODE_DOUBLED);

      }

      int currentLinetFileInputDelimited_1 = 0;
      int outputLinetFileInputDelimited_1 = 0;

      while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1.readRecord()) {

        rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

        if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
          // line
          // when
          // row
          // separator
          // is
          // '\n'
          continue;
        }

        currentLinetFileInputDelimited_1++;
        if (currentLinetFileInputDelimited_1 < 1 + 1) {
          continue;
        }

        if (lastLinetFileInputDelimited_1 > -1
            && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
          break;
        }
        outputLinetFileInputDelimited_1++;
        if (limittFileInputDelimited_1 > 0
            && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
          break;
        }

        row1 = null;
        row1 = new row1Struct();
        try {

          if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
            // line
            // when
            // row
            // separator
            // is
            // '\n'

            row1.Organization = null;

            row1.TransactionalOrganization = null;

            row1.Name = null;

            row1.Description = null;

            row1.MovementDate = null;

            row1.Warehouse = null;

            row1.WarehouseName = null;

            row1.WarehouseDescription = null;

            row1.Warehouse1stLine = null;

            row1.Warehouse2ndLine = null;

            row1.WarehousePostalCode = null;

            row1.WarehouseCity = null;

            row1.WarehouseRegion = null;

            row1.WarehouseCountry = null;

            row1.WarehouseBinSeparator = null;

            row1.Bin = null;

            row1.BinIsDefault = null;

            row1.BinPriority = null;

            row1.BinRowX = null;

            row1.BinStackY = null;

            row1.BinLevelZ = null;

            row1.Product = null;

            row1.AttributeValue = null;

            row1.Quantity = null;

            row1.Cost = null;

          } else {

            if (0 < rowtFileInputDelimited_1.length) {
              row1.Organization = rowtFileInputDelimited_1[0];

            } else {
              row1.Organization = null;
            }

            if (1 < rowtFileInputDelimited_1.length) {
              row1.TransactionalOrganization = rowtFileInputDelimited_1[1];

            } else {
              row1.TransactionalOrganization = null;
            }

            if (2 < rowtFileInputDelimited_1.length) {
              row1.Name = rowtFileInputDelimited_1[2];

            } else {
              row1.Name = null;
            }

            if (3 < rowtFileInputDelimited_1.length) {
              row1.Description = rowtFileInputDelimited_1[3];

            } else {
              row1.Description = null;
            }

            if (4 < rowtFileInputDelimited_1.length) {
              row1.MovementDate = rowtFileInputDelimited_1[4];

            } else {
              row1.MovementDate = null;
            }

            if (5 < rowtFileInputDelimited_1.length) {
              row1.Warehouse = rowtFileInputDelimited_1[5];

            } else {
              row1.Warehouse = null;
            }

            if (6 < rowtFileInputDelimited_1.length) {
              row1.WarehouseName = rowtFileInputDelimited_1[6];

            } else {
              row1.WarehouseName = null;
            }

            if (7 < rowtFileInputDelimited_1.length) {
              row1.WarehouseDescription = rowtFileInputDelimited_1[7];

            } else {
              row1.WarehouseDescription = null;
            }

            if (8 < rowtFileInputDelimited_1.length) {
              row1.Warehouse1stLine = rowtFileInputDelimited_1[8];

            } else {
              row1.Warehouse1stLine = null;
            }

            if (9 < rowtFileInputDelimited_1.length) {
              row1.Warehouse2ndLine = rowtFileInputDelimited_1[9];

            } else {
              row1.Warehouse2ndLine = null;
            }

            if (10 < rowtFileInputDelimited_1.length) {
              row1.WarehousePostalCode = rowtFileInputDelimited_1[10];

            } else {
              row1.WarehousePostalCode = null;
            }

            if (11 < rowtFileInputDelimited_1.length) {
              row1.WarehouseCity = rowtFileInputDelimited_1[11];

            } else {
              row1.WarehouseCity = null;
            }

            if (12 < rowtFileInputDelimited_1.length) {
              row1.WarehouseRegion = rowtFileInputDelimited_1[12];

            } else {
              row1.WarehouseRegion = null;
            }

            if (13 < rowtFileInputDelimited_1.length) {
              row1.WarehouseCountry = rowtFileInputDelimited_1[13];

            } else {
              row1.WarehouseCountry = null;
            }

            if (14 < rowtFileInputDelimited_1.length) {
              row1.WarehouseBinSeparator = rowtFileInputDelimited_1[14];

            } else {
              row1.WarehouseBinSeparator = null;
            }

            if (15 < rowtFileInputDelimited_1.length) {
              row1.Bin = rowtFileInputDelimited_1[15];

            } else {
              row1.Bin = null;
            }

            if (16 < rowtFileInputDelimited_1.length) {
              row1.BinIsDefault = rowtFileInputDelimited_1[16];

            } else {
              row1.BinIsDefault = null;
            }

            if (17 < rowtFileInputDelimited_1.length) {
              row1.BinPriority = rowtFileInputDelimited_1[17];

            } else {
              row1.BinPriority = null;
            }

            if (18 < rowtFileInputDelimited_1.length) {
              row1.BinRowX = rowtFileInputDelimited_1[18];

            } else {
              row1.BinRowX = null;
            }

            if (19 < rowtFileInputDelimited_1.length) {
              row1.BinStackY = rowtFileInputDelimited_1[19];

            } else {
              row1.BinStackY = null;
            }

            if (20 < rowtFileInputDelimited_1.length) {
              row1.BinLevelZ = rowtFileInputDelimited_1[20];

            } else {
              row1.BinLevelZ = null;
            }

            if (21 < rowtFileInputDelimited_1.length) {
              row1.Product = rowtFileInputDelimited_1[21];

            } else {
              row1.Product = null;
            }

            if (22 < rowtFileInputDelimited_1.length) {
              row1.AttributeValue = rowtFileInputDelimited_1[22];

            } else {
              row1.AttributeValue = null;
            }

            if (23 < rowtFileInputDelimited_1.length) {
              row1.Quantity = rowtFileInputDelimited_1[23];

            } else {
              row1.Quantity = null;
            }

            if (24 < rowtFileInputDelimited_1.length) {
              row1.Cost = rowtFileInputDelimited_1[24];

            } else {
              row1.Cost = null;
            }

          }

        } catch (Exception e) {
          System.err.println(e.getMessage());
          row1 = null;
        }

        /**
         * [tFileInputDelimited_1 begin ] stop
         */
        /**
         * [tFileInputDelimited_1 main ] start
         */

        currentComponent = "tFileInputDelimited_1";

        /**
         * [tFileInputDelimited_1 main ] stop
         */
        // Start of branch "row1"
        if (row1 != null) {

          /**
           * [tJavaRow_1 main ] start
           */

          currentComponent = "tJavaRow_1";

          org.openbravo.idl.proc.IdlService service = org.openbravo.idl.proc.IdlIntService
              .getInstance().getService("Stock");
          org.openbravo.idl.proc.Validator validator = service.getValidator("Stock");

          row2.Organization = validator.checkOrganization(row1.Organization);
          row2.TransactionalOrganization = validator
              .checkTransactionalOrganization(row1.TransactionalOrganization);
          row2.Name = validator.checkNotNull(validator.checkString(row1.Name, 60), "Name");
          row2.Description = validator.checkString(row1.Description, 255, "Description");
          row2.MovementDate = validator.checkNotNull(
              validator.checkDate(row1.MovementDate, "MovementDate"), "MovementDate");
          row2.Warehouse = validator.checkNotNull(
              validator.checkString(row1.Warehouse, 60, "Warehouse"), "Warehouse");
          row2.WarehouseName = validator.checkNotNull(
              validator.checkString(row1.WarehouseName, 60, "WarehouseName"), "WarehouseName");
          row2.WarehouseDescription = validator.checkString(row1.WarehouseDescription, 255,
              "WarehouseDescription");
          row2.Warehouse1stLine = validator.checkString(row1.Warehouse1stLine, 60);
          row2.Warehouse2ndLine = validator.checkString(row1.Warehouse2ndLine, 60);
          row2.WarehousePostalCode = validator.checkString(row1.WarehousePostalCode, 10);
          row2.WarehouseCity = validator.checkString(row1.WarehouseCity, 60);
          row2.WarehouseRegion = validator.checkString(row1.WarehouseRegion, 60);
          row2.WarehouseCountry = validator.checkString(row1.WarehouseCountry, 60,
              "WarehouseCountry");
          row2.WarehouseBinSeparator = validator.checkString(row1.WarehouseBinSeparator, 1,
              "WarehouseBinSeparator");
          row2.Bin = validator.checkNotNull(validator.checkString(row1.Bin, 40, "Bin"), "Bin");
          row2.BinIsDefault = validator.checkNotNull(
              validator.checkBoolean(row1.BinIsDefault, "BinIsDefault"), "BinIsDefault");
          row2.BinPriority = validator.checkNotNull(
              validator.checkLong(row1.BinPriority, "BinPriority"), "BinPriority");
          row2.BinRowX = validator.checkString(row1.BinRowX, 60, "BinRowX");
          row2.BinStackY = validator.checkString(row1.BinStackY, 60, "BinStackY");
          row2.BinLevelZ = validator.checkString(row1.BinLevelZ, 60, "BinLevelZ");
          row2.Product = validator.checkNotNull(validator.checkString(row1.Product, 40), "Product");
          row2.AttributeValue = validator.checkString(row1.AttributeValue, 60);
          row2.Quantity = validator.checkNotNull(validator.checkBigDecimal(row1.Quantity),
              "Quantity");
          row2.Cost = validator.checkBigDecimal(row1.Cost);

          row2.flag = validator.getErrorCode();
          row2.whyError = validator.getErrorMessage();
          nb_line_tJavaRow_1++;

          /**
           * [tJavaRow_1 main ] stop
           */

          /**
           * [tFilterRow_1 main ] start
           */

          currentComponent = "tFilterRow_1";

          row4 = null;
          row3 = null;

          if (

          (row2.flag == null ? false : row2.flag.toLowerCase().compareTo("0") == 0)

          )

          {
            if (row4 == null) {
              row4 = new row4Struct();
            }
            row4.Organization = row2.Organization;
            row4.TransactionalOrganization = row2.TransactionalOrganization;
            row4.Name = row2.Name;
            row4.Description = row2.Description;
            row4.MovementDate = row2.MovementDate;
            row4.Warehouse = row2.Warehouse;
            row4.WarehouseName = row2.WarehouseName;
            row4.WarehouseDescription = row2.WarehouseDescription;
            row4.Warehouse1stLine = row2.Warehouse1stLine;
            row4.Warehouse2ndLine = row2.Warehouse2ndLine;
            row4.WarehousePostalCode = row2.WarehousePostalCode;
            row4.WarehouseCity = row2.WarehouseCity;
            row4.WarehouseRegion = row2.WarehouseRegion;
            row4.WarehouseCountry = row2.WarehouseCountry;
            row4.WarehouseBinSeparator = row2.WarehouseBinSeparator;
            row4.Bin = row2.Bin;
            row4.BinIsDefault = row2.BinIsDefault;
            row4.BinPriority = row2.BinPriority;
            row4.BinRowX = row2.BinRowX;
            row4.BinStackY = row2.BinStackY;
            row4.BinLevelZ = row2.BinLevelZ;
            row4.Product = row2.Product;
            row4.AttributeValue = row2.AttributeValue;
            row4.Quantity = row2.Quantity;
            row4.Cost = row2.Cost;
            row4.flag = row2.flag;
            row4.whyError = row2.whyError;
            nb_line_ok_tFilterRow_1++;
          } else {
            if (row3 == null) {
              row3 = new row3Struct();
            }
            row3.Organization = row2.Organization;
            row3.TransactionalOrganization = row2.TransactionalOrganization;
            row3.Name = row2.Name;
            row3.Description = row2.Description;
            row3.MovementDate = row2.MovementDate;
            row3.Warehouse = row2.Warehouse;
            row3.WarehouseName = row2.WarehouseName;
            row3.WarehouseDescription = row2.WarehouseDescription;
            row3.Warehouse1stLine = row2.Warehouse1stLine;
            row3.Warehouse2ndLine = row2.Warehouse2ndLine;
            row3.WarehousePostalCode = row2.WarehousePostalCode;
            row3.WarehouseCity = row2.WarehouseCity;
            row3.WarehouseRegion = row2.WarehouseRegion;
            row3.WarehouseCountry = row2.WarehouseCountry;
            row3.WarehouseBinSeparator = row2.WarehouseBinSeparator;
            row3.Bin = row2.Bin;
            row3.BinIsDefault = row2.BinIsDefault;
            row3.BinPriority = row2.BinPriority;
            row3.BinRowX = row2.BinRowX;
            row3.BinStackY = row2.BinStackY;
            row3.BinLevelZ = row2.BinLevelZ;
            row3.Product = row2.Product;
            row3.AttributeValue = row2.AttributeValue;
            row3.Quantity = row2.Quantity;
            row3.Cost = row2.Cost;
            row3.flag = row2.flag;
            row3.whyError = row2.whyError;
            nb_line_reject_tFilterRow_1++;
          }
          nb_line_tFilterRow_1++;

          /**
           * [tFilterRow_1 main ] stop
           */
          // Start of branch "row4"
          if (row4 != null) {

            /**
             * [tJavaRow_5 main ] start
             */

            currentComponent = "tJavaRow_5";

            Product product = service.findDALInstance(true, Product.class, new Value(
                Product.PROPERTY_SEARCHKEY, row4.Product));
            row7.flag = product == null ? "-1" : "0";

            // fields transfer
            row7.Organization = row4.Organization;
            row7.TransactionalOrganization = row4.TransactionalOrganization;
            row7.Name = row4.Name;
            row7.Description = row4.Description;
            row7.MovementDate = row4.MovementDate;
            row7.Warehouse = row4.Warehouse;
            row7.WarehouseName = row4.WarehouseName;
            row7.WarehouseDescription = row4.WarehouseDescription;
            row7.Warehouse1stLine = row4.Warehouse1stLine;
            row7.Warehouse2ndLine = row4.Warehouse2ndLine;
            row7.WarehousePostalCode = row4.WarehousePostalCode;
            row7.WarehouseCity = row4.WarehouseCity;
            row7.WarehouseRegion = row4.WarehouseRegion;
            row7.WarehouseCountry = row4.WarehouseCountry;
            row7.WarehouseBinSeparator = row4.WarehouseBinSeparator;
            row7.Bin = row4.Bin;
            row7.BinIsDefault = row4.BinIsDefault;
            row7.BinPriority = row4.BinPriority;
            row7.BinRowX = row4.BinRowX;
            row7.BinStackY = row4.BinStackY;
            row7.BinLevelZ = row4.BinLevelZ;
            row7.Product = row4.Product;
            row7.AttributeValue = row4.AttributeValue;
            row7.Quantity = row4.Quantity;
            row7.Cost = row4.Cost;

            nb_line_tJavaRow_5++;

            /**
             * [tJavaRow_5 main ] stop
             */

            /**
             * [tFilterRow_2 main ] start
             */

            currentComponent = "tFilterRow_2";

            row9 = null;
            row8 = null;

            if (

            (row7.flag == null ? false : row7.flag.toLowerCase().compareTo("0") == 0)

            )

            {
              if (row9 == null) {
                row9 = new row9Struct();
              }
              row9.Organization = row7.Organization;
              row9.TransactionalOrganization = row7.TransactionalOrganization;
              row9.Name = row7.Name;
              row9.Description = row7.Description;
              row9.MovementDate = row7.MovementDate;
              row9.Warehouse = row7.Warehouse;
              row9.WarehouseName = row7.WarehouseName;
              row9.WarehouseDescription = row7.WarehouseDescription;
              row9.Warehouse1stLine = row7.Warehouse1stLine;
              row9.Warehouse2ndLine = row7.Warehouse2ndLine;
              row9.WarehousePostalCode = row7.WarehousePostalCode;
              row9.WarehouseCity = row7.WarehouseCity;
              row9.WarehouseRegion = row7.WarehouseRegion;
              row9.WarehouseCountry = row7.WarehouseCountry;
              row9.WarehouseBinSeparator = row7.WarehouseBinSeparator;
              row9.Bin = row7.Bin;
              row9.BinIsDefault = row7.BinIsDefault;
              row9.BinPriority = row7.BinPriority;
              row9.BinRowX = row7.BinRowX;
              row9.BinStackY = row7.BinStackY;
              row9.BinLevelZ = row7.BinLevelZ;
              row9.Product = row7.Product;
              row9.AttributeValue = row7.AttributeValue;
              row9.Quantity = row7.Quantity;
              row9.Cost = row7.Cost;
              row9.flag = row7.flag;
              row9.whyError = row7.whyError;
              nb_line_ok_tFilterRow_2++;
            } else {
              if (row8 == null) {
                row8 = new row8Struct();
              }
              row8.Organization = row7.Organization;
              row8.TransactionalOrganization = row7.TransactionalOrganization;
              row8.Name = row7.Name;
              row8.Description = row7.Description;
              row8.MovementDate = row7.MovementDate;
              row8.Warehouse = row7.Warehouse;
              row8.WarehouseName = row7.WarehouseName;
              row8.WarehouseDescription = row7.WarehouseDescription;
              row8.Warehouse1stLine = row7.Warehouse1stLine;
              row8.Warehouse2ndLine = row7.Warehouse2ndLine;
              row8.WarehousePostalCode = row7.WarehousePostalCode;
              row8.WarehouseCity = row7.WarehouseCity;
              row8.WarehouseRegion = row7.WarehouseRegion;
              row8.WarehouseCountry = row7.WarehouseCountry;
              row8.WarehouseBinSeparator = row7.WarehouseBinSeparator;
              row8.Bin = row7.Bin;
              row8.BinIsDefault = row7.BinIsDefault;
              row8.BinPriority = row7.BinPriority;
              row8.BinRowX = row7.BinRowX;
              row8.BinStackY = row7.BinStackY;
              row8.BinLevelZ = row7.BinLevelZ;
              row8.Product = row7.Product;
              row8.AttributeValue = row7.AttributeValue;
              row8.Quantity = row7.Quantity;
              row8.Cost = row7.Cost;
              row8.flag = row7.flag;
              row8.whyError = row7.whyError;
              nb_line_reject_tFilterRow_2++;
            }
            nb_line_tFilterRow_2++;

            /**
             * [tFilterRow_2 main ] stop
             */
            // Start of branch "row9"
            if (row9 != null) {

              /**
               * [tJavaRow_7 main ] start
               */

              currentComponent = "tJavaRow_7";

              Country country = service.findDALInstance(true, Country.class, new Value("name",
                  row9.WarehouseCountry));
              row10.flag = country == null && row9.WarehouseCountry != null
                  && !row9.WarehouseCountry.equals("") ? "-1" : "0";

              // fields transfer
              row10.Organization = row9.Organization;
              row10.TransactionalOrganization = row9.TransactionalOrganization;
              row10.Name = row9.Name;
              row10.Description = row9.Description;
              row10.MovementDate = row9.MovementDate;
              row10.Warehouse = row9.Warehouse;
              row10.WarehouseName = row9.WarehouseName;
              row10.WarehouseDescription = row9.WarehouseDescription;
              row10.Warehouse1stLine = row9.Warehouse1stLine;
              row10.Warehouse2ndLine = row9.Warehouse2ndLine;
              row10.WarehousePostalCode = row9.WarehousePostalCode;
              row10.WarehouseCity = row9.WarehouseCity;
              row10.WarehouseRegion = row9.WarehouseRegion;
              row10.WarehouseCountry = row9.WarehouseCountry;
              row10.WarehouseBinSeparator = row9.WarehouseBinSeparator;
              row10.Bin = row9.Bin;
              row10.BinIsDefault = row9.BinIsDefault;
              row10.BinPriority = row9.BinPriority;
              row10.BinRowX = row9.BinRowX;
              row10.BinStackY = row9.BinStackY;
              row10.BinLevelZ = row9.BinLevelZ;
              row10.Product = row9.Product;
              row10.AttributeValue = row9.AttributeValue;
              row10.Quantity = row9.Quantity;
              row10.Cost = row9.Cost;

              nb_line_tJavaRow_7++;

              /**
               * [tJavaRow_7 main ] stop
               */

              /**
               * [tFilterRow_3 main ] start
               */

              currentComponent = "tFilterRow_3";

              row12 = null;
              row11 = null;

              if (

              (row10.flag == null ? false : row10.flag.toLowerCase().compareTo("0") == 0)

              )

              {
                if (row12 == null) {
                  row12 = new row12Struct();
                }
                row12.Organization = row10.Organization;
                row12.TransactionalOrganization = row10.TransactionalOrganization;
                row12.Name = row10.Name;
                row12.Description = row10.Description;
                row12.MovementDate = row10.MovementDate;
                row12.Warehouse = row10.Warehouse;
                row12.WarehouseName = row10.WarehouseName;
                row12.WarehouseDescription = row10.WarehouseDescription;
                row12.Warehouse1stLine = row10.Warehouse1stLine;
                row12.Warehouse2ndLine = row10.Warehouse2ndLine;
                row12.WarehousePostalCode = row10.WarehousePostalCode;
                row12.WarehouseCity = row10.WarehouseCity;
                row12.WarehouseRegion = row10.WarehouseRegion;
                row12.WarehouseCountry = row10.WarehouseCountry;
                row12.WarehouseBinSeparator = row10.WarehouseBinSeparator;
                row12.Bin = row10.Bin;
                row12.BinIsDefault = row10.BinIsDefault;
                row12.BinPriority = row10.BinPriority;
                row12.BinRowX = row10.BinRowX;
                row12.BinStackY = row10.BinStackY;
                row12.BinLevelZ = row10.BinLevelZ;
                row12.Product = row10.Product;
                row12.AttributeValue = row10.AttributeValue;
                row12.Quantity = row10.Quantity;
                row12.Cost = row10.Cost;
                row12.flag = row10.flag;
                row12.whyError = row10.whyError;
                nb_line_ok_tFilterRow_3++;
              } else {
                if (row11 == null) {
                  row11 = new row11Struct();
                }
                row11.Organization = row10.Organization;
                row11.TransactionalOrganization = row10.TransactionalOrganization;
                row11.Name = row10.Name;
                row11.Description = row10.Description;
                row11.MovementDate = row10.MovementDate;
                row11.Warehouse = row10.Warehouse;
                row11.WarehouseName = row10.WarehouseName;
                row11.WarehouseDescription = row10.WarehouseDescription;
                row11.Warehouse1stLine = row10.Warehouse1stLine;
                row11.Warehouse2ndLine = row10.Warehouse2ndLine;
                row11.WarehousePostalCode = row10.WarehousePostalCode;
                row11.WarehouseCity = row10.WarehouseCity;
                row11.WarehouseRegion = row10.WarehouseRegion;
                row11.WarehouseCountry = row10.WarehouseCountry;
                row11.WarehouseBinSeparator = row10.WarehouseBinSeparator;
                row11.Bin = row10.Bin;
                row11.BinIsDefault = row10.BinIsDefault;
                row11.BinPriority = row10.BinPriority;
                row11.BinRowX = row10.BinRowX;
                row11.BinStackY = row10.BinStackY;
                row11.BinLevelZ = row10.BinLevelZ;
                row11.Product = row10.Product;
                row11.AttributeValue = row10.AttributeValue;
                row11.Quantity = row10.Quantity;
                row11.Cost = row10.Cost;
                row11.flag = row10.flag;
                row11.whyError = row10.whyError;
                nb_line_reject_tFilterRow_3++;
              }
              nb_line_tFilterRow_3++;

              /**
               * [tFilterRow_3 main ] stop
               */
              // Start of branch "row12"
              if (row12 != null) {

                /**
                 * [tJavaRow_3 main ] start
                 */

                currentComponent = "tJavaRow_3";

                org.openbravo.idl.proc.IdlService service3 = org.openbravo.idl.proc.IdlIntService
                    .getInstance().getService("Stock");

                service3.finishRecordProcess(row12.Organization, row12.TransactionalOrganization,
                    row12.Name, row12.Description, row12.MovementDate, row12.Warehouse,
                    row12.WarehouseName, row12.WarehouseDescription, row12.Warehouse1stLine,
                    row12.Warehouse2ndLine, row12.WarehousePostalCode, row12.WarehouseCity,
                    row12.WarehouseRegion, row12.WarehouseCountry, row12.WarehouseBinSeparator,
                    row12.Bin, row12.BinIsDefault, row12.BinPriority, row12.BinRowX,
                    row12.BinStackY, row12.BinLevelZ, row12.Product, row12.AttributeValue,
                    row12.Quantity, row12.Cost);

                nb_line_tJavaRow_3++;

                /**
                 * [tJavaRow_3 main ] stop
                 */

              } // End of branch "row12"

              // Start of branch "row11"
              if (row11 != null) {

                /**
                 * [tJavaRow_8 main ] start
                 */

                currentComponent = "tJavaRow_8";

                org.openbravo.idl.proc.IdlService service8 = org.openbravo.idl.proc.IdlIntService
                    .getInstance().getService("Stock");

                service8.logRecordError(service8.Utility_messageBD("IDL_BAD_REFERENCE")
                    + row11.WarehouseCountry, row11.Organization, row11.TransactionalOrganization,
                    row11.Name, row11.Description, row11.MovementDate, row11.Warehouse,
                    row11.WarehouseName, row11.WarehouseDescription, row11.Warehouse1stLine,
                    row11.Warehouse2ndLine, row11.WarehousePostalCode, row11.WarehouseCity,
                    row11.WarehouseRegion, row11.WarehouseCountry, row11.WarehouseBinSeparator,
                    row11.Bin, row11.BinIsDefault, row11.BinPriority, row11.BinRowX,
                    row11.BinStackY, row11.BinLevelZ, row11.Product, row11.AttributeValue,
                    row11.Quantity, row11.Cost);

                nb_line_tJavaRow_8++;

                /**
                 * [tJavaRow_8 main ] stop
                 */

              } // End of branch "row11"

            } // End of branch "row9"

            // Start of branch "row8"
            if (row8 != null) {

              /**
               * [tJavaRow_6 main ] start
               */

              currentComponent = "tJavaRow_6";

              org.openbravo.idl.proc.IdlService service6 = org.openbravo.idl.proc.IdlIntService
                  .getInstance().getService("Stock");

              service6.logRecordError(service6.Utility_messageBD("IDL_BAD_REFERENCE")
                  + row8.Product, row8.Organization, row8.TransactionalOrganization, row8.Name,
                  row8.Description, row8.MovementDate, row8.Warehouse, row8.WarehouseName,
                  row8.WarehouseDescription, row8.Warehouse1stLine, row8.Warehouse2ndLine,
                  row8.WarehousePostalCode, row8.WarehouseCity, row8.WarehouseRegion,
                  row8.WarehouseCountry, row8.WarehouseBinSeparator, row8.Bin, row8.BinIsDefault,
                  row8.BinPriority, row8.BinRowX, row8.BinStackY, row8.BinLevelZ, row8.Product,
                  row8.AttributeValue, row8.Quantity, row8.Cost);

              nb_line_tJavaRow_6++;

              /**
               * [tJavaRow_6 main ] stop
               */

            } // End of branch "row8"

          } // End of branch "row4"

          // Start of branch "row3"
          if (row3 != null) {

            /**
             * [tJavaRow_2 main ] start
             */

            currentComponent = "tJavaRow_2";

            org.openbravo.idl.proc.IdlService service2 = org.openbravo.idl.proc.IdlIntService
                .getInstance().getService("Stock");

            service2.logRecordError(row3.whyError, row3.Organization,
                row3.TransactionalOrganization, row3.Name, row3.Description, row3.MovementDate,
                row3.Warehouse, row3.WarehouseName, row3.WarehouseDescription,
                row3.Warehouse1stLine, row3.Warehouse2ndLine, row3.WarehousePostalCode,
                row3.WarehouseCity, row3.WarehouseRegion, row3.WarehouseCountry,
                row3.WarehouseBinSeparator, row3.Bin, row3.BinIsDefault, row3.BinPriority,
                row3.BinRowX, row3.BinStackY, row3.BinLevelZ, row3.Product, row3.AttributeValue,
                row3.Quantity, row3.Cost);

            nb_line_tJavaRow_2++;

            /**
             * [tJavaRow_2 main ] stop
             */

          } // End of branch "row3"

        } // End of branch "row1"

        /**
         * [tFileInputDelimited_1 end ] start
         */

        currentComponent = "tFileInputDelimited_1";

        nb_line_tFileInputDelimited_1++;
      }
      csvReadertFileInputDelimited_1.close();
      globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);

      ok_Hash.put("tFileInputDelimited_1", true);
      end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

      /**
       * [tFileInputDelimited_1 end ] stop
       */

      /**
       * [tJavaRow_1 end ] start
       */

      currentComponent = "tJavaRow_1";

      globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

      ok_Hash.put("tJavaRow_1", true);
      end_Hash.put("tJavaRow_1", System.currentTimeMillis());

      /**
       * [tJavaRow_1 end ] stop
       */

      /**
       * [tFilterRow_1 end ] start
       */

      currentComponent = "tFilterRow_1";

      globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
      globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
      globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

      ok_Hash.put("tFilterRow_1", true);
      end_Hash.put("tFilterRow_1", System.currentTimeMillis());

      /**
       * [tFilterRow_1 end ] stop
       */

      /**
       * [tJavaRow_5 end ] start
       */

      currentComponent = "tJavaRow_5";

      globalMap.put("tJavaRow_5_NB_LINE", nb_line_tJavaRow_5);

      ok_Hash.put("tJavaRow_5", true);
      end_Hash.put("tJavaRow_5", System.currentTimeMillis());

      /**
       * [tJavaRow_5 end ] stop
       */

      /**
       * [tFilterRow_2 end ] start
       */

      currentComponent = "tFilterRow_2";

      globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
      globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
      globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

      ok_Hash.put("tFilterRow_2", true);
      end_Hash.put("tFilterRow_2", System.currentTimeMillis());

      /**
       * [tFilterRow_2 end ] stop
       */

      /**
       * [tJavaRow_7 end ] start
       */

      currentComponent = "tJavaRow_7";

      globalMap.put("tJavaRow_7_NB_LINE", nb_line_tJavaRow_7);

      ok_Hash.put("tJavaRow_7", true);
      end_Hash.put("tJavaRow_7", System.currentTimeMillis());

      /**
       * [tJavaRow_7 end ] stop
       */

      /**
       * [tFilterRow_3 end ] start
       */

      currentComponent = "tFilterRow_3";

      globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
      globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
      globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);

      ok_Hash.put("tFilterRow_3", true);
      end_Hash.put("tFilterRow_3", System.currentTimeMillis());

      /**
       * [tFilterRow_3 end ] stop
       */

      /**
       * [tJavaRow_3 end ] start
       */

      currentComponent = "tJavaRow_3";

      globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

      ok_Hash.put("tJavaRow_3", true);
      end_Hash.put("tJavaRow_3", System.currentTimeMillis());

      /**
       * [tJavaRow_3 end ] stop
       */

      /**
       * [tJavaRow_8 end ] start
       */

      currentComponent = "tJavaRow_8";

      globalMap.put("tJavaRow_8_NB_LINE", nb_line_tJavaRow_8);

      ok_Hash.put("tJavaRow_8", true);
      end_Hash.put("tJavaRow_8", System.currentTimeMillis());

      /**
       * [tJavaRow_8 end ] stop
       */

      /**
       * [tJavaRow_6 end ] start
       */

      currentComponent = "tJavaRow_6";

      globalMap.put("tJavaRow_6_NB_LINE", nb_line_tJavaRow_6);

      ok_Hash.put("tJavaRow_6", true);
      end_Hash.put("tJavaRow_6", System.currentTimeMillis());

      /**
       * [tJavaRow_6 end ] stop
       */

      /**
       * [tJavaRow_2 end ] start
       */

      currentComponent = "tJavaRow_2";

      globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);

      ok_Hash.put("tJavaRow_2", true);
      end_Hash.put("tJavaRow_2", System.currentTimeMillis());

      /**
       * [tJavaRow_2 end ] stop
       */

    } catch (Exception e) {

      throw new TalendException(e, currentComponent, globalMap);

    }

    globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
  }

  public boolean watch = false;
  public int portStats = 3334;
  public int portTraces = 4334;
  public String clientHost;
  public String defaultClientHost = "localhost";
  public String contextStr = "Default";
  public String pid = "0";
  public String rootPid = null;
  public String fatherPid = null;
  public long startTime = 0;
  public boolean isChildJob = false;

  private ThreadLocal threadLocal = new ThreadLocal();
  {
    java.util.Map threadRunResultMap = new java.util.HashMap();
    threadRunResultMap.put("errorCode", null);
    threadRunResultMap.put("status", "");
    threadLocal.set(threadRunResultMap);
  }

  private java.util.Properties context_param = new java.util.Properties();

  public String status = "";

  public static void main(String[] args) {
    final StockJob StockJobClass = new StockJob();

    int exitCode = StockJobClass.runJobInTOS(args);

    System.exit(exitCode);
  }

  public String[][] runJob(String[] args) {

    int exitCode = runJobInTOS(args);
    String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

    return bufferValue;
  }

  public int runJobInTOS(String[] args) {

    String lastStr = "";
    for (String arg : args) {
      if (arg.equalsIgnoreCase("--context_param")) {
        lastStr = arg;
      } else if (lastStr.equals("")) {
        evalParam(arg);
      } else {
        evalParam(lastStr + " " + arg);
        lastStr = "";
      }
    }

    if (clientHost == null) {
      clientHost = defaultClientHost;
    }

    if (pid == null || "0".equals(pid)) {
      pid = TalendString.getAsciiRandomString(6);
    }

    if (rootPid == null) {
      rootPid = pid;
    }
    if (fatherPid == null) {
      fatherPid = pid;
    } else {
      isChildJob = true;
    }

    try {
      java.io.InputStream inContext = StockJob.class.getClassLoader().getResourceAsStream(
          "initial_data_load/stockjob_0_1/contexts/Default.properties");
      if (inContext != null) {
        defaultProps.load(inContext);
        inContext.close();
        context = new ContextProperties(defaultProps);
      }

      if (contextStr.compareTo("Default") != 0) {
        inContext = StockJob.class.getClassLoader().getResourceAsStream(
            "initial_data_load/stockjob_0_1/contexts/" + contextStr + ".properties");
        if (inContext != null) {
          context.load(inContext);
          inContext.close();
        }
      }

      if (!context_param.isEmpty()) {
        context.putAll(context_param);
      }

    } catch (java.io.IOException ie) {
      System.err.println("Could not load context " + contextStr);
      ie.printStackTrace();
    }

    long end = 0;

    startTime = System.currentTimeMillis();

    try {
      errorCode = null;
      tFileInputDelimited_1Process(globalMap);
      status = "end";
    } catch (TalendException e_tFileInputDelimited_1) {
      status = "failure";
      e_tFileInputDelimited_1.printStackTrace();
      globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

    } finally {
    }

    end = System.currentTimeMillis();

    if (watch) {
      System.out.println((end - startTime) + " milliseconds");
    }

    if (errorCode == null) {
      return status != null && status.equals("failure") ? 1 : 0;
    } else {
      return errorCode.intValue();
    }
  }

  private void evalParam(String arg) {
    if (arg.startsWith("--watch")) {
      watch = true;
    } else if (arg.startsWith("--stat_port=")) {
      portStats = Integer.parseInt(arg.substring(12));
    } else if (arg.startsWith("--trace_port=")) {
      portTraces = Integer.parseInt(arg.substring(13));
    } else if (arg.startsWith("--client_host=")) {
      clientHost = arg.substring(14);
    } else if (arg.startsWith("--context=")) {
      contextStr = arg.substring(10);
    } else if (arg.startsWith("--father_pid=")) {
      fatherPid = arg.substring(13);
    } else if (arg.startsWith("--root_pid=")) {
      rootPid = arg.substring(11);
    } else if (arg.startsWith("--pid=")) {
      pid = arg.substring(6);
    } else if (arg.startsWith("--context_param")) {
      String keyValue = arg.substring(16);
      int index = -1;
      if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
        context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
      }
    }

  }

  public Integer getErrorCode() {
    return errorCode;
  }

  public String getStatus() {
    return status;
  }
}
/************************************************************************************************
 * 355656 characters generated by Talend Open Studio on the April 11, 2013 1:52:21 PM CEST
 ************************************************************************************************/

