<?xml version="1.0"?>
  <database name="TRIGGER M_RESERVATION_STOCK_TRG">
    <trigger name="M_RESERVATION_STOCK_TRG" table="M_RESERVATION_STOCK" fires="before" insert="true" update="true" delete="true" foreach="row">
      <body><![CDATA[

/*************************************************************************
* The contents of this file are subject to the Openbravo  Public  License
* Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
* Version 1.1  with a permitted attribution clause; you may not  use this
* file except in compliance with the License. You  may  obtain  a copy of
* the License at http://www.openbravo.com/legal/license.html
* Software distributed under the License  is  distributed  on  an "AS IS"
* basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
* License for the specific  language  governing  rights  and  limitations
* under the License.
* The Original Code is Openbravo ERP.
* The Initial Developer of the Original Code is Openbravo SLU
* All portions are Copyright (C) 2012-2015 Openbravo SLU
* All Rights Reserved.
* Contributor(s):  ______________________________________.
************************************************************************/
  v_reservedqtydiff NUMBER:=0;
  v_releasedqtydiff NUMBER:=0;
  v_allocatedqtydiff NUMBER:=0;
  v_reservation_id      VARCHAR2(32);
  v_attributesetinstance_id      VARCHAR2(32);
  v_locator_id      VARCHAR2(32);
  v_resstatus       VARCHAR2(60);
  v_m_product_id       VARCHAR2(60);
  v_c_uom_id       VARCHAR2(60);

BEGIN
  IF (AD_isTriggerEnabled()='N') THEN
    RETURN;
  END IF;

  IF (INSERTING OR UPDATING) THEN
    v_reservedqtydiff := COALESCE(:NEW.quantity, 0);
    v_releasedqtydiff := COALESCE(:NEW.releasedqty, 0);
    v_reservation_id := :NEW.m_reservation_id;
    v_attributesetinstance_id := :NEW.m_attributesetinstance_id;
    v_locator_id := :NEW.m_locator_id;
    IF (:NEW.isallocated = 'Y') THEN
      v_allocatedqtydiff := COALESCE(:NEW.quantity, 0) - v_releasedqtydiff;
    END IF;
    IF (:NEW.releasedqty > :NEW.quantity) THEN
      RAISE_APPLICATION_ERROR(-20000, '@CannotReleasedMoreReserved@');
    END IF;
  END IF;

  IF (UPDATING OR DELETING) THEN
    v_reservedqtydiff := v_reservedqtydiff - COALESCE(:OLD.quantity, 0);
    v_releasedqtydiff := v_releasedqtydiff - COALESCE(:OLD.releasedqty, 0);
    v_reservation_id := :OLD.m_reservation_id;
    IF (:OLD.isallocated = 'Y') THEN
      v_allocatedqtydiff := v_allocatedqtydiff - COALESCE(:OLD.quantity, 0) + COALESCE(:OLD.releasedqty, 0);
    END IF;
  END IF;
  
  IF (DELETING) THEN
    SELECT res_status INTO v_resstatus
    FROM m_reservation
    WHERE m_reservation_id = :OLD.m_reservation_id;
    IF (:OLD.releasedqty <> 0) THEN
      RAISE_APPLICATION_ERROR(-20000, '@CannotDeleteReleasedReservation@');
    END IF;
    v_attributesetinstance_id := :OLD.m_attributesetinstance_id;
   v_locator_id := :OLD.m_locator_id;
  END IF;

  IF (v_reservedqtydiff <> 0 OR v_releasedqtydiff <> 0 or v_allocatedqtydiff <> 0) THEN
         UPDATE m_reservation
         SET reservedqty = COALESCE(reservedqty, 0) + v_reservedqtydiff,
             releasedqty = COALESCE(releasedqty, 0) + v_releasedqtydiff
         WHERE m_reservation_id = v_reservation_id;
         SELECT res_status, m_product_id, c_uom_id INTO v_resstatus, v_m_product_id, v_c_uom_id FROM   m_reservation where m_reservation_id = v_reservation_id;
         IF(v_resstatus <> 'DR') THEN
                 UPDATE m_storage_detail
                 SET reservedqty = reservedqty + v_reservedqtydiff - v_releasedqtydiff,
                     allocatedqty = allocatedqty + v_allocatedqtydiff
                 WHERE m_product_id = v_m_product_id
                       AND m_product_uom_id IS NULL
                       AND c_uom_id = v_c_uom_id
                       AND m_locator_id = v_locator_id
                       AND m_attributesetinstance_id = v_attributesetinstance_id;
         END IF;
  END IF;

END M_RESERVATION_STOCK_TRG
]]></body>
    </trigger>
  </database>
