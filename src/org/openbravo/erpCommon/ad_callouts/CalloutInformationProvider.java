/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html 
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License. 
 * The Original Code is Openbravo ERP. 
 * The Initial Developer of the Original Code is Openbravo SLU 
 * All portions are Copyright (C) 2016 Openbravo SLU 
 * All Rights Reserved. 
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
package org.openbravo.erpCommon.ad_callouts;

import java.util.List;
import java.util.Map;

import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;
import org.openbravo.client.kernel.RequestContext;
import org.openbravo.model.ad.datamodel.Column;

/**
 * CalloutInformationProvider provides the information that is used to populate the messages,
 * comboEntries etc... for Callouts.
 * 
 * @author inigo.sanchez
 *
 */
public interface CalloutInformationProvider {

  /**
   * Retrieves the name of the current element to take into account into the FIC response.
   */
  public String getCurrentElementName();

  /**
   * Retrieves the value of the current parameter allocated inside element to take into account into
   * the FIC response.
   */
  public Object getCurrentElementValue(Object element);

  /**
   * Retrieves the next element of the collection to manage all values updated by callouts.
   * 
   */
  public Object getNextElement();

  /**
   * This method checks if an object represents a combo data to apply a particular parser
   * operations.
   *
   * @return true if values represents a combo data.
   */
  public Boolean isComboData(Object element);

  /**
   * This method allows to implement a particular mechanism for managing combo data generated by
   * callouts.
   */
  public void manageComboData(Map<String, JSONObject> columnValues, List<String> dynamicCols,
      List<String> changedCols, RequestContext request, Object element, Column col, String colIdent)
      throws JSONException;
}
